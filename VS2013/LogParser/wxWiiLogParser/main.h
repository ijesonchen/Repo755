#ifndef __main__
#define __main__

/**
@file
Subclass of MainFrameBase, which is generated by wxFormBuilder.
*/

// main wxWidgets header file
#include <wx/wx.h>
#include "gui.h"

//// end generated include

#include <string>
#include <vector>
#include <unordered_set>
#include <memory>

#include "LogQuery.h"

////////////////////////////////////////////////////////////////////////////////
// application class declaration 
////////////////////////////////////////////////////////////////////////////////

class MainApp : public wxApp
{
public:
	virtual bool OnInit();
};

// declare global static function wxGetApp()
DECLARE_APP(MainApp)

////////////////////////////////////////////////////////////////////////////////
// main application frame declaration 
////////////////////////////////////////////////////////////////////////////////
/** Implementing MainFrameBase */

#include "LogMsg.h"

class MyFileDropTarget;

class MainFrame : public MainFrameBase
{
	public:
		/** Constructor */
		MainFrame( wxWindow* parent );
	//// end generated class members


		// Virtual event handlers, override them in your derived class
		virtual void m_toolReloadOnToolClicked(wxCommandEvent& event);
		virtual void m_toolFilterOnToolClicked(wxCommandEvent& event);
		virtual void m_buttonSearchOnButtonClick(wxCommandEvent& event);
		virtual void m_checkAutoRefreshOnCheckBox(wxCommandEvent& event);
		virtual void m_checkAllTagOnCheckBox(wxCommandEvent& event);
		virtual void m_timerRefreshOnTimer(wxTimerEvent& event);




		friend MyFileDropTarget;

private:
	std::vector<std::shared_ptr<LogMsg>> m_vtLogs;
	LogQuery m_LogQuery;
	std::vector<LogMsg> m_vtListLogs;
	std::unordered_set<std::string> m_usetCats;
	std::unordered_set<std::string> m_usetTags;

	wxString m_strFileName;
	
protected:
	int LoadFile(const wxString& wxstrFileName);

	void ClearCtrl()
	{
		m_LogQuery.clear();
		m_dvLogs->DeleteAllItems();
		m_ckListCategory->Clear();
		m_ckListTag->Clear();
	};

	void ClearLogs(void)
	{
		m_LogQuery.clear();
		m_vtLogs.clear();
		m_usetTags.clear();
		ClearCtrl();
	}

	void PushLogMsg(std::vector<std::string> &vtLines)
	{
		if (vtLines.size())
		{
			std::shared_ptr<LogMsg> spLog(new LogMsg(vtLines));
			if (spLog->isValid)
			{
				m_vtLogs.push_back(spLog);
				if (spLog->category.length())
				{
					m_usetCats.insert(spLog->category);
				}
				m_usetTags.insert(spLog->tag);
			}
			vtLines.clear();
		}
	}

	bool FillCtrl(void);

	void FillLogs();
	void FillCats();
	void FillTags();
	
	
	std::unordered_set<std::string> GetSelTags();
	std::unordered_set<std::string> GetSelCats();

private:
	void LoadCfg();
	void SaveCfg();
};

#endif // __main__
