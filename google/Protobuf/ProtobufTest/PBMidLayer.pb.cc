// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMidLayer.proto
#pragma warning(disable: 4996 4512 4244 4125)

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMidLayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PBMidLayer {

namespace {

const ::google::protobuf::Descriptor* HeadMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRelease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRelease_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoReqRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoReqRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallProcessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallProcessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallProcessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallProcessResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistorySearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistorySearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistorySearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistorySearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryTransRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryTransRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryTransResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryTransResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLocationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLocationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetQueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRuleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRuleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRuleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRuleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRuleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRuleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRuleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRuleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSysParaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSysParaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSysParaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSysParaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySysParaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySysParaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySysParaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySysParaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectManageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectManageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectManageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectManageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectManageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectManageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedbackNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedbackNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchAbortRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchAbortRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddLangSampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddLangSampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddLangSampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddLangSampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreprocessResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreprocessResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeakerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeakerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeakerItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeakerItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeywordResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeywordResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeywordSnippet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeywordSnippet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranscriptResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranscriptResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentTranscript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentTranscript_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeakerRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeakerRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeywordRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeywordRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechSegRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechSegRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* LanguageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LanguageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhoneNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhoneNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchTaskState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchTaskState_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchFileResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchFileResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechSegResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechSegResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechSegItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechSegItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* VADResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VADResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* VADItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VADItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DTMFResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DTMFResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DTMFItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DTMFItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemStateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemStateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileDataNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioRecordMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioChannelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioTransFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioFileTag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecognitionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriorityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchCondition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SpeechType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioEncodingTag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OperationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RuleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SystemParaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlarmLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioRecogFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileAcquireMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchTaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchTaskRunState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GenderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMidLayer_2eproto() {
  protobuf_AddDesc_PBMidLayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMidLayer.proto");
  GOOGLE_CHECK(file != NULL);
  HeadMsg_descriptor_ = file->message_type(0);
  static const int HeadMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, syn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, len_),
  };
  HeadMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadMsg_descriptor_,
      HeadMsg::default_instance_,
      HeadMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadMsg));
  ConnectRequest_descriptor_ = file->message_type(1);
  static const int ConnectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, srid_),
  };
  ConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRequest_descriptor_,
      ConnectRequest::default_instance_,
      ConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRequest));
  ConnectResponse_descriptor_ = file->message_type(2);
  static const int ConnectResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, srid_),
  };
  ConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectResponse_descriptor_,
      ConnectResponse::default_instance_,
      ConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectResponse));
  ConnectRelease_descriptor_ = file->message_type(3);
  static const int ConnectRelease_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, srid_),
  };
  ConnectRelease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRelease_descriptor_,
      ConnectRelease::default_instance_,
      ConnectRelease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRelease));
  EchoReqRes_descriptor_ = file->message_type(4);
  static const int EchoReqRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoReqRes, timestamp_),
  };
  EchoReqRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoReqRes_descriptor_,
      EchoReqRes::default_instance_,
      EchoReqRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoReqRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoReqRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoReqRes));
  CallProcessRequest_descriptor_ = file->message_type(5);
  static const int CallProcessRequest_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, terminals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, channeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, transflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, caller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, callee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, third_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, recogflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, callerappendix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, calleeappendix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, thirdappendix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, isimport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, voicefiles_),
  };
  CallProcessRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallProcessRequest_descriptor_,
      CallProcessRequest::default_instance_,
      CallProcessRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallProcessRequest));
  CallProcessResponse_descriptor_ = file->message_type(6);
  static const int CallProcessResponse_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, filetag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, recotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, prelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, speakerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, keywordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, translist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, vad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, speechseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, dtmfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, resultflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, syscode_),
  };
  CallProcessResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallProcessResponse_descriptor_,
      CallProcessResponse::default_instance_,
      CallProcessResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallProcessResponse));
  HistorySearchRequest_descriptor_ = file->message_type(7);
  static const int HistorySearchRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, packageseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, endflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, calllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, syscode_),
  };
  HistorySearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistorySearchRequest_descriptor_,
      HistorySearchRequest::default_instance_,
      HistorySearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistorySearchRequest));
  TaskAttribute_descriptor_ = file->message_type(8);
  static const int TaskAttribute_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, objectids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, voice_),
  };
  TaskAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskAttribute_descriptor_,
      TaskAttribute::default_instance_,
      TaskAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskAttribute));
  HistorySearchResponse_descriptor_ = file->message_type(9);
  static const int HistorySearchResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchResponse, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchResponse, syscode_),
  };
  HistorySearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistorySearchResponse_descriptor_,
      HistorySearchResponse::default_instance_,
      HistorySearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistorySearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistorySearchResponse));
  HistoryTransRequest_descriptor_ = file->message_type(10);
  static const int HistoryTransRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransRequest, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransRequest, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransRequest, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransRequest, syscode_),
  };
  HistoryTransRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryTransRequest_descriptor_,
      HistoryTransRequest::default_instance_,
      HistoryTransRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryTransRequest));
  HistoryTransResponse_descriptor_ = file->message_type(11);
  static const int HistoryTransResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, prelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, speakerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, keywordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, translist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, vad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, speechseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, dtmfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, syscode_),
  };
  HistoryTransResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryTransResponse_descriptor_,
      HistoryTransResponse::default_instance_,
      HistoryTransResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryTransResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryTransResponse));
  FileLocationNotify_descriptor_ = file->message_type(12);
  static const int FileLocationNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, filetag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, syscode_),
  };
  FileLocationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLocationNotify_descriptor_,
      FileLocationNotify::default_instance_,
      FileLocationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLocationNotify));
  TargetQueryRequest_descriptor_ = file->message_type(13);
  static const int TargetQueryRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryRequest, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryRequest, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryRequest, syscode_),
  };
  TargetQueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetQueryRequest_descriptor_,
      TargetQueryRequest::default_instance_,
      TargetQueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetQueryRequest));
  TargetQueryResponse_descriptor_ = file->message_type(14);
  static const int TargetQueryResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, packageseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, endflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, calllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, syscode_),
  };
  TargetQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetQueryResponse_descriptor_,
      TargetQueryResponse::default_instance_,
      TargetQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetQueryResponse));
  SetRuleRequest_descriptor_ = file->message_type(15);
  static const int SetRuleRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, opertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, speaker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, speechseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, syscode_),
  };
  SetRuleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRuleRequest_descriptor_,
      SetRuleRequest::default_instance_,
      SetRuleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRuleRequest));
  SetRuleResponse_descriptor_ = file->message_type(16);
  static const int SetRuleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleResponse, syscode_),
  };
  SetRuleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRuleResponse_descriptor_,
      SetRuleResponse::default_instance_,
      SetRuleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRuleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRuleResponse));
  QueryRuleRequest_descriptor_ = file->message_type(17);
  static const int QueryRuleRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, speechseglang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, speechsegid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, syscode_),
  };
  QueryRuleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRuleRequest_descriptor_,
      QueryRuleRequest::default_instance_,
      QueryRuleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRuleRequest));
  QueryRuleResponse_descriptor_ = file->message_type(18);
  static const int QueryRuleResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, speakerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, keywordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, speechseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, syscode_),
  };
  QueryRuleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRuleResponse_descriptor_,
      QueryRuleResponse::default_instance_,
      QueryRuleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRuleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRuleResponse));
  SetSysParaRequest_descriptor_ = file->message_type(19);
  static const int SetSysParaRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, languagethreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, speakerthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, keywordthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, languagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, speakercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, syscode_),
  };
  SetSysParaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSysParaRequest_descriptor_,
      SetSysParaRequest::default_instance_,
      SetSysParaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSysParaRequest));
  SetSysParaResponse_descriptor_ = file->message_type(20);
  static const int SetSysParaResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaResponse, syscode_),
  };
  SetSysParaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSysParaResponse_descriptor_,
      SetSysParaResponse::default_instance_,
      SetSysParaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSysParaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSysParaResponse));
  QuerySysParaRequest_descriptor_ = file->message_type(21);
  static const int QuerySysParaRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaRequest, syscode_),
  };
  QuerySysParaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySysParaRequest_descriptor_,
      QuerySysParaRequest::default_instance_,
      QuerySysParaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySysParaRequest));
  QuerySysParaResponse_descriptor_ = file->message_type(22);
  static const int QuerySysParaResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, languagethreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, speakerthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, keywordthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, languagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, speakercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, supportlangs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, langlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, syscode_),
  };
  QuerySysParaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySysParaResponse_descriptor_,
      QuerySysParaResponse::default_instance_,
      QuerySysParaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySysParaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySysParaResponse));
  AlarmNotify_descriptor_ = file->message_type(23);
  static const int AlarmNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, alarmtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, modulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, syscode_),
  };
  AlarmNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmNotify_descriptor_,
      AlarmNotify::default_instance_,
      AlarmNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmNotify));
  StatusNotify_descriptor_ = file->message_type(24);
  static const int StatusNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, modulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, cpuusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, totalmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, memoryused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, currenttasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, states_),
  };
  StatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusNotify_descriptor_,
      StatusNotify::default_instance_,
      StatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusNotify));
  ObjectManageRequest_descriptor_ = file->message_type(25);
  static const int ObjectManageRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, opertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, objectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, isautotrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, gender_),
  };
  ObjectManageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectManageRequest_descriptor_,
      ObjectManageRequest::default_instance_,
      ObjectManageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectManageRequest));
  ObjectManageNotify_descriptor_ = file->message_type(26);
  static const int ObjectManageNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageNotify, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageNotify, syscode_),
  };
  ObjectManageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectManageNotify_descriptor_,
      ObjectManageNotify::default_instance_,
      ObjectManageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectManageNotify));
  ObjectManageResponse_descriptor_ = file->message_type(27);
  static const int ObjectManageResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageResponse, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageResponse, syscode_),
  };
  ObjectManageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectManageResponse_descriptor_,
      ObjectManageResponse::default_instance_,
      ObjectManageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectManageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectManageResponse));
  FeedbackNotify_descriptor_ = file->message_type(28);
  static const int FeedbackNotify_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, filetag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, errorpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, rightpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, errorsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, rightsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, errorkw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, rightkw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, errorts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, rightts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, rightvad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, errorvad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, rightss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, errorss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, rightdtmf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, errordtmf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, syscode_),
  };
  FeedbackNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedbackNotify_descriptor_,
      FeedbackNotify::default_instance_,
      FeedbackNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedbackNotify));
  SearchRequest_descriptor_ = file->message_type(29);
  static const int SearchRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, maxresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, telpattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, speechseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, speakers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, calllist_),
  };
  SearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchRequest_descriptor_,
      SearchRequest::default_instance_,
      SearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchRequest));
  SearchAbortRequest_descriptor_ = file->message_type(30);
  static const int SearchAbortRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, aborttaskid_),
  };
  SearchAbortRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchAbortRequest_descriptor_,
      SearchAbortRequest::default_instance_,
      SearchAbortRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchAbortRequest));
  SearchResultNotify_descriptor_ = file->message_type(31);
  static const int SearchResultNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, voices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, speakers_),
  };
  SearchResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResultNotify_descriptor_,
      SearchResultNotify::default_instance_,
      SearchResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResultNotify));
  SearchResponse_descriptor_ = file->message_type(32);
  static const int SearchResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, status_),
  };
  SearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResponse_descriptor_,
      SearchResponse::default_instance_,
      SearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResponse));
  SearchStateRequest_descriptor_ = file->message_type(33);
  static const int SearchStateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateRequest, operid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateRequest, requesttaskid_),
  };
  SearchStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchStateRequest_descriptor_,
      SearchStateRequest::default_instance_,
      SearchStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchStateRequest));
  SearchStateResponse_descriptor_ = file->message_type(34);
  static const int SearchStateResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateResponse, operid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateResponse, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateResponse, state_),
  };
  SearchStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchStateResponse_descriptor_,
      SearchStateResponse::default_instance_,
      SearchStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchStateResponse));
  GetFileRequest_descriptor_ = file->message_type(35);
  static const int GetFileRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, operid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, filetag_),
  };
  GetFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileRequest_descriptor_,
      GetFileRequest::default_instance_,
      GetFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileRequest));
  GetFileResponse_descriptor_ = file->message_type(36);
  static const int GetFileResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, operid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, isdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, filelocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, filedata_),
  };
  GetFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileResponse_descriptor_,
      GetFileResponse::default_instance_,
      GetFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileResponse));
  AddLangSampRequest_descriptor_ = file->message_type(37);
  static const int AddLangSampRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampRequest, files_),
  };
  AddLangSampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddLangSampRequest_descriptor_,
      AddLangSampRequest::default_instance_,
      AddLangSampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddLangSampRequest));
  AddLangSampResponse_descriptor_ = file->message_type(38);
  static const int AddLangSampResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampResponse, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampResponse, status_),
  };
  AddLangSampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddLangSampResponse_descriptor_,
      AddLangSampResponse::default_instance_,
      AddLangSampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLangSampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddLangSampResponse));
  OperationStatus_descriptor_ = file->message_type(39);
  static const int OperationStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, description_),
  };
  OperationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationStatus_descriptor_,
      OperationStatus::default_instance_,
      OperationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationStatus));
  PreprocessResult_descriptor_ = file->message_type(40);
  static const int PreprocessResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, validlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, speakernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, filetag_),
  };
  PreprocessResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreprocessResult_descriptor_,
      PreprocessResult::default_instance_,
      PreprocessResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreprocessResult));
  SpeakerResult_descriptor_ = file->message_type(41);
  static const int SpeakerResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerResult, speakernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerResult, speakers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerResult, filetag_),
  };
  SpeakerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeakerResult_descriptor_,
      SpeakerResult::default_instance_,
      SpeakerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeakerResult));
  SpeakerItem_descriptor_ = file->message_type(42);
  static const int SpeakerItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerItem, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerItem, spyid_),
  };
  SpeakerItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeakerItem_descriptor_,
      SpeakerItem::default_instance_,
      SpeakerItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeakerItem));
  KeywordResult_descriptor_ = file->message_type(43);
  static const int KeywordResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordResult, keywordnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordResult, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordResult, filetag_),
  };
  KeywordResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeywordResult_descriptor_,
      KeywordResult::default_instance_,
      KeywordResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeywordResult));
  KeywordSnippet_descriptor_ = file->message_type(44);
  static const int KeywordSnippet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, spyid_),
  };
  KeywordSnippet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeywordSnippet_descriptor_,
      KeywordSnippet::default_instance_,
      KeywordSnippet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordSnippet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeywordSnippet));
  TranscriptResult_descriptor_ = file->message_type(45);
  static const int TranscriptResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscriptResult, segmentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscriptResult, segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscriptResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscriptResult, filetag_),
  };
  TranscriptResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranscriptResult_descriptor_,
      TranscriptResult::default_instance_,
      TranscriptResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscriptResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscriptResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranscriptResult));
  SegmentTranscript_descriptor_ = file->message_type(46);
  static const int SegmentTranscript_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTranscript, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTranscript, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTranscript, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTranscript, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTranscript, endtime_),
  };
  SegmentTranscript_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentTranscript_descriptor_,
      SegmentTranscript::default_instance_,
      SegmentTranscript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTranscript, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTranscript, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentTranscript));
  SpeakerRule_descriptor_ = file->message_type(47);
  static const int SpeakerRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerRule, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerRule, thresholdflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerRule, lowthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerRule, highthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerRule, telrule_),
  };
  SpeakerRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeakerRule_descriptor_,
      SpeakerRule::default_instance_,
      SpeakerRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeakerRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeakerRule));
  KeywordRule_descriptor_ = file->message_type(48);
  static const int KeywordRule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordRule, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordRule, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordRule, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordRule, telrule_),
  };
  KeywordRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeywordRule_descriptor_,
      KeywordRule::default_instance_,
      KeywordRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeywordRule));
  SpeechSegRule_descriptor_ = file->message_type(49);
  static const int SpeechSegRule_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, speechsegid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, speechsegname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, telrule_),
  };
  SpeechSegRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechSegRule_descriptor_,
      SpeechSegRule::default_instance_,
      SpeechSegRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechSegRule));
  LanguageInfo_descriptor_ = file->message_type(50);
  static const int LanguageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanguageInfo, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanguageInfo, keywordsupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanguageInfo, transsupported_),
  };
  LanguageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LanguageInfo_descriptor_,
      LanguageInfo::default_instance_,
      LanguageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanguageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanguageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LanguageInfo));
  TrainInfo_descriptor_ = file->message_type(51);
  static const int TrainInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainInfo, isdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainInfo, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainInfo, path_),
  };
  TrainInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainInfo_descriptor_,
      TrainInfo::default_instance_,
      TrainInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainInfo));
  PhoneNumber_descriptor_ = file->message_type(52);
  static const int PhoneNumber_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, telnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, provincecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, areacode_),
  };
  PhoneNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhoneNumber_descriptor_,
      PhoneNumber::default_instance_,
      PhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhoneNumber));
  SearchTaskState_descriptor_ = file->message_type(53);
  static const int SearchTaskState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, runstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, queuetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, aborttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, msg_),
  };
  SearchTaskState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchTaskState_descriptor_,
      SearchTaskState::default_instance_,
      SearchTaskState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTaskState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchTaskState));
  SystemCode_descriptor_ = file->message_type(54);
  static const int SystemCode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, srid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, datasource_),
  };
  SystemCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemCode_descriptor_,
      SystemCode::default_instance_,
      SystemCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemCode));
  SearchFileResult_descriptor_ = file->message_type(55);
  static const int SearchFileResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, filetag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, speakers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, speechsegs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, datasource_),
  };
  SearchFileResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchFileResult_descriptor_,
      SearchFileResult::default_instance_,
      SearchFileResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchFileResult));
  SpeechSegResult_descriptor_ = file->message_type(56);
  static const int SpeechSegResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegResult, speechsegs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegResult, filetag_),
  };
  SpeechSegResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechSegResult_descriptor_,
      SpeechSegResult::default_instance_,
      SpeechSegResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechSegResult));
  SpeechSegItem_descriptor_ = file->message_type(57);
  static const int SpeechSegItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, speechsegcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, hitbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, hitend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, spyid_),
  };
  SpeechSegItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechSegItem_descriptor_,
      SpeechSegItem::default_instance_,
      SpeechSegItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechSegItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechSegItem));
  VADResult_descriptor_ = file->message_type(58);
  static const int VADResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADResult, vads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADResult, filetag_),
  };
  VADResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VADResult_descriptor_,
      VADResult::default_instance_,
      VADResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VADResult));
  VADItem_descriptor_ = file->message_type(59);
  static const int VADItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADItem, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADItem, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADItem, spk_),
  };
  VADItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VADItem_descriptor_,
      VADItem::default_instance_,
      VADItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VADItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VADItem));
  DTMFResult_descriptor_ = file->message_type(60);
  static const int DTMFResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFResult, dtms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFResult, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFResult, filetag_),
  };
  DTMFResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DTMFResult_descriptor_,
      DTMFResult::default_instance_,
      DTMFResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DTMFResult));
  DTMFItem_descriptor_ = file->message_type(61);
  static const int DTMFItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFItem, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFItem, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFItem, end_),
  };
  DTMFItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DTMFItem_descriptor_,
      DTMFItem::default_instance_,
      DTMFItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTMFItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DTMFItem));
  SystemStateItem_descriptor_ = file->message_type(62);
  static const int SystemStateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStateItem, statename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStateItem, statevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStateItem, remark_),
  };
  SystemStateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemStateItem_descriptor_,
      SystemStateItem::default_instance_,
      SystemStateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemStateItem));
  FileDataNotify_descriptor_ = file->message_type(63);
  static const int FileDataNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDataNotify, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDataNotify, filetag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDataNotify, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDataNotify, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDataNotify, syscode_),
  };
  FileDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileDataNotify_descriptor_,
      FileDataNotify::default_instance_,
      FileDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileDataNotify));
  MsgType_descriptor_ = file->enum_type(0);
  AudioRecordMode_descriptor_ = file->enum_type(1);
  AudioChannelType_descriptor_ = file->enum_type(2);
  AudioTransFlag_descriptor_ = file->enum_type(3);
  AudioFileTag_descriptor_ = file->enum_type(4);
  RecognitionType_descriptor_ = file->enum_type(5);
  PriorityType_descriptor_ = file->enum_type(6);
  SearchCondition_descriptor_ = file->enum_type(7);
  SpeechType_descriptor_ = file->enum_type(8);
  AudioEncodingTag_descriptor_ = file->enum_type(9);
  OperationType_descriptor_ = file->enum_type(10);
  RuleType_descriptor_ = file->enum_type(11);
  SystemParaType_descriptor_ = file->enum_type(12);
  AlarmLevel_descriptor_ = file->enum_type(13);
  AudioRecogFlag_descriptor_ = file->enum_type(14);
  FileAcquireMethod_descriptor_ = file->enum_type(15);
  SearchTaskType_descriptor_ = file->enum_type(16);
  SearchTaskRunState_descriptor_ = file->enum_type(17);
  GenderType_descriptor_ = file->enum_type(18);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMidLayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadMsg_descriptor_, &HeadMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRequest_descriptor_, &ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectResponse_descriptor_, &ConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRelease_descriptor_, &ConnectRelease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoReqRes_descriptor_, &EchoReqRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallProcessRequest_descriptor_, &CallProcessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallProcessResponse_descriptor_, &CallProcessResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistorySearchRequest_descriptor_, &HistorySearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskAttribute_descriptor_, &TaskAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistorySearchResponse_descriptor_, &HistorySearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryTransRequest_descriptor_, &HistoryTransRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryTransResponse_descriptor_, &HistoryTransResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLocationNotify_descriptor_, &FileLocationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetQueryRequest_descriptor_, &TargetQueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetQueryResponse_descriptor_, &TargetQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRuleRequest_descriptor_, &SetRuleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRuleResponse_descriptor_, &SetRuleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRuleRequest_descriptor_, &QueryRuleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRuleResponse_descriptor_, &QueryRuleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSysParaRequest_descriptor_, &SetSysParaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSysParaResponse_descriptor_, &SetSysParaResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySysParaRequest_descriptor_, &QuerySysParaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySysParaResponse_descriptor_, &QuerySysParaResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmNotify_descriptor_, &AlarmNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusNotify_descriptor_, &StatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectManageRequest_descriptor_, &ObjectManageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectManageNotify_descriptor_, &ObjectManageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectManageResponse_descriptor_, &ObjectManageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedbackNotify_descriptor_, &FeedbackNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchRequest_descriptor_, &SearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchAbortRequest_descriptor_, &SearchAbortRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResultNotify_descriptor_, &SearchResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResponse_descriptor_, &SearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchStateRequest_descriptor_, &SearchStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchStateResponse_descriptor_, &SearchStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileRequest_descriptor_, &GetFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileResponse_descriptor_, &GetFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddLangSampRequest_descriptor_, &AddLangSampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddLangSampResponse_descriptor_, &AddLangSampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationStatus_descriptor_, &OperationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreprocessResult_descriptor_, &PreprocessResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeakerResult_descriptor_, &SpeakerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeakerItem_descriptor_, &SpeakerItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeywordResult_descriptor_, &KeywordResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeywordSnippet_descriptor_, &KeywordSnippet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranscriptResult_descriptor_, &TranscriptResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentTranscript_descriptor_, &SegmentTranscript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeakerRule_descriptor_, &SpeakerRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeywordRule_descriptor_, &KeywordRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechSegRule_descriptor_, &SpeechSegRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LanguageInfo_descriptor_, &LanguageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainInfo_descriptor_, &TrainInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhoneNumber_descriptor_, &PhoneNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchTaskState_descriptor_, &SearchTaskState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemCode_descriptor_, &SystemCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchFileResult_descriptor_, &SearchFileResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechSegResult_descriptor_, &SpeechSegResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechSegItem_descriptor_, &SpeechSegItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VADResult_descriptor_, &VADResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VADItem_descriptor_, &VADItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DTMFResult_descriptor_, &DTMFResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DTMFItem_descriptor_, &DTMFItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemStateItem_descriptor_, &SystemStateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileDataNotify_descriptor_, &FileDataNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMidLayer_2eproto() {
  delete HeadMsg::default_instance_;
  delete HeadMsg_reflection_;
  delete ConnectRequest::default_instance_;
  delete ConnectRequest_reflection_;
  delete ConnectResponse::default_instance_;
  delete ConnectResponse_reflection_;
  delete ConnectRelease::default_instance_;
  delete ConnectRelease_reflection_;
  delete EchoReqRes::default_instance_;
  delete EchoReqRes_reflection_;
  delete CallProcessRequest::default_instance_;
  delete CallProcessRequest_reflection_;
  delete CallProcessResponse::default_instance_;
  delete CallProcessResponse_reflection_;
  delete HistorySearchRequest::default_instance_;
  delete HistorySearchRequest_reflection_;
  delete TaskAttribute::default_instance_;
  delete TaskAttribute_reflection_;
  delete HistorySearchResponse::default_instance_;
  delete HistorySearchResponse_reflection_;
  delete HistoryTransRequest::default_instance_;
  delete HistoryTransRequest_reflection_;
  delete HistoryTransResponse::default_instance_;
  delete HistoryTransResponse_reflection_;
  delete FileLocationNotify::default_instance_;
  delete FileLocationNotify_reflection_;
  delete TargetQueryRequest::default_instance_;
  delete TargetQueryRequest_reflection_;
  delete TargetQueryResponse::default_instance_;
  delete TargetQueryResponse_reflection_;
  delete SetRuleRequest::default_instance_;
  delete SetRuleRequest_reflection_;
  delete SetRuleResponse::default_instance_;
  delete SetRuleResponse_reflection_;
  delete QueryRuleRequest::default_instance_;
  delete QueryRuleRequest_reflection_;
  delete QueryRuleResponse::default_instance_;
  delete QueryRuleResponse_reflection_;
  delete SetSysParaRequest::default_instance_;
  delete SetSysParaRequest_reflection_;
  delete SetSysParaResponse::default_instance_;
  delete SetSysParaResponse_reflection_;
  delete QuerySysParaRequest::default_instance_;
  delete QuerySysParaRequest_reflection_;
  delete QuerySysParaResponse::default_instance_;
  delete QuerySysParaResponse_reflection_;
  delete AlarmNotify::default_instance_;
  delete AlarmNotify_reflection_;
  delete StatusNotify::default_instance_;
  delete StatusNotify_reflection_;
  delete ObjectManageRequest::default_instance_;
  delete ObjectManageRequest_reflection_;
  delete ObjectManageNotify::default_instance_;
  delete ObjectManageNotify_reflection_;
  delete ObjectManageResponse::default_instance_;
  delete ObjectManageResponse_reflection_;
  delete FeedbackNotify::default_instance_;
  delete FeedbackNotify_reflection_;
  delete SearchRequest::default_instance_;
  delete SearchRequest_reflection_;
  delete SearchAbortRequest::default_instance_;
  delete SearchAbortRequest_reflection_;
  delete SearchResultNotify::default_instance_;
  delete SearchResultNotify_reflection_;
  delete SearchResponse::default_instance_;
  delete SearchResponse_reflection_;
  delete SearchStateRequest::default_instance_;
  delete SearchStateRequest_reflection_;
  delete SearchStateResponse::default_instance_;
  delete SearchStateResponse_reflection_;
  delete GetFileRequest::default_instance_;
  delete GetFileRequest_reflection_;
  delete GetFileResponse::default_instance_;
  delete GetFileResponse_reflection_;
  delete AddLangSampRequest::default_instance_;
  delete AddLangSampRequest_reflection_;
  delete AddLangSampResponse::default_instance_;
  delete AddLangSampResponse_reflection_;
  delete OperationStatus::default_instance_;
  delete OperationStatus_reflection_;
  delete PreprocessResult::default_instance_;
  delete PreprocessResult_reflection_;
  delete SpeakerResult::default_instance_;
  delete SpeakerResult_reflection_;
  delete SpeakerItem::default_instance_;
  delete SpeakerItem_reflection_;
  delete KeywordResult::default_instance_;
  delete KeywordResult_reflection_;
  delete KeywordSnippet::default_instance_;
  delete KeywordSnippet_reflection_;
  delete TranscriptResult::default_instance_;
  delete TranscriptResult_reflection_;
  delete SegmentTranscript::default_instance_;
  delete SegmentTranscript_reflection_;
  delete SpeakerRule::default_instance_;
  delete SpeakerRule_reflection_;
  delete KeywordRule::default_instance_;
  delete KeywordRule_reflection_;
  delete SpeechSegRule::default_instance_;
  delete SpeechSegRule_reflection_;
  delete LanguageInfo::default_instance_;
  delete LanguageInfo_reflection_;
  delete TrainInfo::default_instance_;
  delete TrainInfo_reflection_;
  delete PhoneNumber::default_instance_;
  delete PhoneNumber_reflection_;
  delete SearchTaskState::default_instance_;
  delete SearchTaskState_reflection_;
  delete SystemCode::default_instance_;
  delete SystemCode_reflection_;
  delete SearchFileResult::default_instance_;
  delete SearchFileResult_reflection_;
  delete SpeechSegResult::default_instance_;
  delete SpeechSegResult_reflection_;
  delete SpeechSegItem::default_instance_;
  delete SpeechSegItem_reflection_;
  delete VADResult::default_instance_;
  delete VADResult_reflection_;
  delete VADItem::default_instance_;
  delete VADItem_reflection_;
  delete DTMFResult::default_instance_;
  delete DTMFResult_reflection_;
  delete DTMFItem::default_instance_;
  delete DTMFItem_reflection_;
  delete SystemStateItem::default_instance_;
  delete SystemStateItem_reflection_;
  delete FileDataNotify::default_instance_;
  delete FileDataNotify_reflection_;
}

void protobuf_AddDesc_PBMidLayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020PBMidLayer.proto\022\nPBMidLayer\"W\n\007HeadMs"
    "g\022\020\n\003syn\030\001 \002(\007:\003255\022\020\n\003pro\030\002 \002(\007:\003100\022\014\n"
    "\004type\030\003 \002(\007\022\r\n\005seqno\030\004 \002(\006\022\013\n\003len\030\005 \002(\007\""
    "-\n\016ConnectRequest\022\r\n\005spyid\030\001 \002(\t\022\014\n\004srid"
    "\030\002 \001(\t\"[\n\017ConnectResponse\022+\n\006status\030\001 \002("
    "\0132\033.PBMidLayer.OperationStatus\022\r\n\005spyid\030"
    "\002 \002(\t\022\014\n\004srid\030\003 \001(\t\"Z\n\016ConnectRelease\022+\n"
    "\006status\030\001 \002(\0132\033.PBMidLayer.OperationStat"
    "us\022\r\n\005spyid\030\002 \002(\t\022\014\n\004srid\030\003 \001(\t\"\037\n\nEchoR"
    "eqRes\022\021\n\ttimestamp\030\001 \002(\r\"\253\005\n\022CallProcess"
    "Request\022\016\n\006callid\030\001 \002(\t\022)\n\004flag\030\002 \002(\0162\033."
    "PBMidLayer.AudioRecordMode\022\021\n\tterminals\030"
    "\003 \002(\005\0221\n\013channeltype\030\004 \002(\0162\034.PBMidLayer."
    "AudioChannelType\022;\n\ttransflag\030\005 \002(\0162\032.PB"
    "MidLayer.AudioTransFlag:\014ATF_NotTrans\022\016\n"
    "\006caller\030\006 \001(\t\022\016\n\006callee\030\007 \001(\t\022\r\n\005third\030\010"
    " \001(\t\022\021\n\tstarttime\030\t \001(\004\022\017\n\007endtime\030\n \001(\004"
    "\022\024\n\trecogflag\030\013 \001(\r:\0017\0226\n\006method\030\014 \001(\0162\035"
    ".PBMidLayer.FileAcquireMethod:\007FAM_URL\022/"
    "\n\016callerappendix\030\r \001(\0132\027.PBMidLayer.Phon"
    "eNumber\022/\n\016calleeappendix\030\016 \001(\0132\027.PBMidL"
    "ayer.PhoneNumber\022.\n\rthirdappendix\030\017 \001(\0132"
    "\027.PBMidLayer.PhoneNumber\0225\n\010priority\030\020 \001"
    "(\0162\030.PBMidLayer.PriorityType:\tPT_Normal\022"
    "\'\n\007syscode\030\021 \001(\0132\026.PBMidLayer.SystemCode"
    "\022\020\n\010isimport\030\022 \001(\010\0222\n\nvoicefiles\030\023 \003(\0132\036"
    ".PBMidLayer.FileLocationNotify\"\311\004\n\023CallP"
    "rocessResponse\022\016\n\006callid\030\001 \002(\t\022+\n\006status"
    "\030\002 \002(\0132\033.PBMidLayer.OperationStatus\022)\n\007f"
    "iletag\030\003 \002(\0162\030.PBMidLayer.AudioFileTag\022-"
    "\n\010recotype\030\004 \001(\0162\033.PBMidLayer.Recognitio"
    "nType\022\r\n\005count\030\005 \001(\r\022-\n\007prelist\030\006 \001(\0132\034."
    "PBMidLayer.PreprocessResult\022.\n\013speakerli"
    "st\030\007 \001(\0132\031.PBMidLayer.SpeakerResult\022.\n\013k"
    "eywordlist\030\010 \001(\0132\031.PBMidLayer.KeywordRes"
    "ult\022/\n\ttranslist\030\t \001(\0132\034.PBMidLayer.Tran"
    "scriptResult\022\"\n\003vad\030\n \001(\0132\025.PBMidLayer.V"
    "ADResult\022.\n\tspeechseg\030\013 \001(\0132\033.PBMidLayer"
    ".SpeechSegResult\022%\n\005dtmfs\030\014 \001(\0132\026.PBMidL"
    "ayer.DTMFResult\022\025\n\nresultflag\030\r \001(\r:\0017\022\021"
    "\n\tstarttime\030\016 \001(\004\022\'\n\007syscode\030\017 \001(\0132\026.PBM"
    "idLayer.SystemCode\"\305\001\n\024HistorySearchRequ"
    "est\022\016\n\006taskid\030\001 \002(\t\022\022\n\npackageseq\030\002 \002(\005\022"
    "\017\n\007endflag\030\003 \002(\005\022\017\n\007records\030\004 \002(\005\022,\n\tatt"
    "ribute\030\005 \001(\0132\031.PBMidLayer.TaskAttribute\022"
    "\020\n\010calllist\030\006 \003(\t\022\'\n\007syscode\030\007 \001(\0132\026.PBM"
    "idLayer.SystemCode\"\304\001\n\rTaskAttribute\022\r\n\005"
    "total\030\001 \002(\r\022*\n\010priority\030\002 \002(\0162\030.PBMidLay"
    "er.PriorityType\022.\n\tcondition\030\003 \002(\0162\033.PBM"
    "idLayer.SearchCondition\022\021\n\tobjectids\030\004 \003"
    "(\t\022\024\n\014languagename\030\005 \001(\t\022\020\n\010keywords\030\006 \003"
    "(\t\022\r\n\005voice\030\007 \001(\014\"\274\001\n\025HistorySearchRespo"
    "nse\022\016\n\006taskid\030\001 \002(\t\022+\n\006status\030\002 \002(\0132\033.PB"
    "MidLayer.OperationStatus\022.\n\tcondition\030\003 "
    "\002(\0162\033.PBMidLayer.SearchCondition\022\r\n\005coun"
    "t\030\004 \002(\r\022\'\n\007syscode\030\005 \001(\0132\026.PBMidLayer.Sy"
    "stemCode\"\232\001\n\023HistoryTransRequest\022\016\n\006task"
    "id\030\001 \002(\t\022.\n\tcondition\030\002 \002(\0162\033.PBMidLayer"
    ".SearchCondition\022\r\n\005begin\030\003 \002(\r\022\013\n\003end\030\004"
    " \002(\r\022\'\n\007syscode\030\005 \001(\0132\026.PBMidLayer.Syste"
    "mCode\"\306\003\n\024HistoryTransResponse\022\016\n\006taskid"
    "\030\001 \002(\t\022+\n\006status\030\002 \002(\0132\033.PBMidLayer.Oper"
    "ationStatus\022\r\n\005count\030\003 \002(\r\022-\n\007prelist\030\004 "
    "\003(\0132\034.PBMidLayer.PreprocessResult\022.\n\013spe"
    "akerlist\030\005 \003(\0132\031.PBMidLayer.SpeakerResul"
    "t\022.\n\013keywordlist\030\006 \003(\0132\031.PBMidLayer.Keyw"
    "ordResult\022/\n\ttranslist\030\007 \003(\0132\034.PBMidLaye"
    "r.TranscriptResult\022\"\n\003vad\030\010 \003(\0132\025.PBMidL"
    "ayer.VADResult\022.\n\tspeechseg\030\t \003(\0132\033.PBMi"
    "dLayer.SpeechSegResult\022%\n\005dtmfs\030\n \003(\0132\026."
    "PBMidLayer.DTMFResult\022\'\n\007syscode\030\013 \001(\0132\026"
    ".PBMidLayer.SystemCode\"\262\001\n\022FileLocationN"
    "otify\022\016\n\006callid\030\001 \002(\t\022)\n\007filetag\030\002 \002(\0162\030"
    ".PBMidLayer.AudioFileTag\022\014\n\004path\030\003 \002(\t\022*"
    "\n\004code\030\004 \002(\0162\034.PBMidLayer.AudioEncodingT"
    "ag\022\'\n\007syscode\030\005 \001(\0132\026.PBMidLayer.SystemC"
    "ode\"\201\001\n\022TargetQueryRequest\022\016\n\006taskid\030\001 \002"
    "(\t\022\016\n\006target\030\002 \002(\t\022\021\n\tstarttime\030\003 \002(\004\022\017\n"
    "\007endtime\030\004 \002(\004\022\'\n\007syscode\030\005 \001(\0132\026.PBMidL"
    "ayer.SystemCode\"\303\001\n\023TargetQueryResponse\022"
    "\016\n\006taskid\030\001 \002(\t\022+\n\006status\030\002 \002(\0132\033.PBMidL"
    "ayer.OperationStatus\022\022\n\npackageseq\030\003 \001(\005"
    "\022\017\n\007endflag\030\004 \001(\005\022\017\n\007records\030\005 \001(\005\022\020\n\010ca"
    "lllist\030\006 \003(\t\022\'\n\007syscode\030\007 \001(\0132\026.PBMidLay"
    "er.SystemCode\"\221\002\n\016SetRuleRequest\022+\n\010oper"
    "type\030\001 \002(\0162\031.PBMidLayer.OperationType\022\'\n"
    "\toperation\030\002 \002(\0162\024.PBMidLayer.RuleType\022("
    "\n\007speaker\030\003 \001(\0132\027.PBMidLayer.SpeakerRule"
    "\022(\n\007keyword\030\004 \001(\0132\027.PBMidLayer.KeywordRu"
    "le\022,\n\tspeechseg\030\005 \001(\0132\031.PBMidLayer.Speec"
    "hSegRule\022\'\n\007syscode\030\006 \001(\0132\026.PBMidLayer.S"
    "ystemCode\"g\n\017SetRuleResponse\022+\n\006status\030\001"
    " \002(\0132\033.PBMidLayer.OperationStatus\022\'\n\007sys"
    "code\030\002 \001(\0132\026.PBMidLayer.SystemCode\"\311\001\n\020Q"
    "ueryRuleRequest\022\'\n\toperation\030\001 \002(\0162\024.PBM"
    "idLayer.RuleType\022\020\n\010objectid\030\002 \001(\t\022\024\n\014la"
    "nguagename\030\003 \001(\t\022\017\n\007keyword\030\004 \001(\t\022\025\n\rspe"
    "echseglang\030\005 \001(\t\022\023\n\013speechsegid\030\006 \001(\t\022\'\n"
    "\007syscode\030\007 \001(\0132\026.PBMidLayer.SystemCode\"\202"
    "\002\n\021QueryRuleResponse\022+\n\006status\030\001 \002(\0132\033.P"
    "BMidLayer.OperationStatus\022\r\n\005count\030\002 \002(\r"
    "\022,\n\013speakerlist\030\003 \003(\0132\027.PBMidLayer.Speak"
    "erRule\022,\n\013keywordlist\030\004 \003(\0132\027.PBMidLayer"
    ".KeywordRule\022,\n\tspeechseg\030\005 \003(\0132\031.PBMidL"
    "ayer.SpeechSegRule\022\'\n\007syscode\030\006 \001(\0132\026.PB"
    "MidLayer.SystemCode\"\342\001\n\021SetSysParaReques"
    "t\022(\n\004type\030\001 \002(\0162\032.PBMidLayer.SystemParaT"
    "ype\022\031\n\021languagethreshold\030\002 \001(\002\022\030\n\020speake"
    "rthreshold\030\003 \001(\002\022\030\n\020keywordthreshold\030\004 \001"
    "(\002\022\025\n\rlanguagecount\030\005 \001(\005\022\024\n\014speakercoun"
    "t\030\006 \001(\005\022\'\n\007syscode\030\007 \001(\0132\026.PBMidLayer.Sy"
    "stemCode\"j\n\022SetSysParaResponse\022+\n\006status"
    "\030\001 \002(\0132\033.PBMidLayer.OperationStatus\022\'\n\007s"
    "yscode\030\002 \001(\0132\026.PBMidLayer.SystemCode\">\n\023"
    "QuerySysParaRequest\022\'\n\007syscode\030\001 \001(\0132\026.P"
    "BMidLayer.SystemCode\"\252\002\n\024QuerySysParaRes"
    "ponse\022+\n\006status\030\001 \002(\0132\033.PBMidLayer.Opera"
    "tionStatus\022\031\n\021languagethreshold\030\002 \001(\002\022\030\n"
    "\020speakerthreshold\030\003 \001(\002\022\030\n\020keywordthresh"
    "old\030\004 \001(\002\022\025\n\rlanguagecount\030\005 \001(\005\022\024\n\014spea"
    "kercount\030\006 \001(\005\022\024\n\014supportlangs\030\007 \002(\r\022*\n\010"
    "langlist\030\010 \003(\0132\030.PBMidLayer.LanguageInfo"
    "\022\'\n\007syscode\030\t \001(\0132\026.PBMidLayer.SystemCod"
    "e\"\225\001\n\013AlarmNotify\022\021\n\talarmtime\030\001 \002(\t\022%\n\005"
    "level\030\002 \002(\0162\026.PBMidLayer.AlarmLevel\022\017\n\007c"
    "ontent\030\003 \002(\t\022\022\n\nmodulename\030\004 \002(\t\022\'\n\007sysc"
    "ode\030\005 \001(\0132\026.PBMidLayer.SystemCode\"\351\001\n\014St"
    "atusNotify\022\022\n\nmodulename\030\001 \002(\t\022\n\n\002ip\030\002 \002"
    "(\t\022\020\n\010cpuusage\030\003 \002(\002\022\023\n\013totalmemory\030\004 \002("
    "\005\022\022\n\nmemoryused\030\005 \002(\005\022\024\n\014currenttasks\030\006 "
    "\002(\005\022\022\n\nrecordtime\030\007 \002(\t\022\'\n\007syscode\030\010 \001(\013"
    "2\026.PBMidLayer.SystemCode\022+\n\006states\030\t \003(\013"
    "2\033.PBMidLayer.SystemStateItem\"\202\002\n\023Object"
    "ManageRequest\022\020\n\010objectid\030\001 \002(\t\022+\n\010opert"
    "ype\030\002 \002(\0162\031.PBMidLayer.OperationType\022\r\n\005"
    "count\030\003 \002(\r\022#\n\004list\030\004 \003(\0132\025.PBMidLayer.T"
    "rainInfo\022\022\n\nobjectname\030\005 \001(\t\022\023\n\013isautotr"
    "ain\030\006 \001(\010\022\'\n\007syscode\030\007 \001(\0132\026.PBMidLayer."
    "SystemCode\022&\n\006gender\030\010 \001(\0162\026.PBMidLayer."
    "GenderType\"|\n\022ObjectManageNotify\022+\n\006stat"
    "us\030\001 \002(\0132\033.PBMidLayer.OperationStatus\022\020\n"
    "\010objectid\030\002 \001(\t\022\'\n\007syscode\030\003 \001(\0132\026.PBMid"
    "Layer.SystemCode\"~\n\024ObjectManageResponse"
    "\022+\n\006status\030\001 \002(\0132\033.PBMidLayer.OperationS"
    "tatus\022\020\n\010objectid\030\002 \001(\t\022\'\n\007syscode\030\003 \001(\013"
    "2\026.PBMidLayer.SystemCode\"\202\006\n\016FeedbackNot"
    "ify\022\016\n\006callid\030\001 \002(\t\022)\n\007filetag\030\002 \002(\0162\030.P"
    "BMidLayer.AudioFileTag\022\014\n\004type\030\003 \001(\005\022\016\n\006"
    "result\030\004 \001(\005\022-\n\007errorpp\030\005 \001(\0132\034.PBMidLay"
    "er.PreprocessResult\022-\n\007rightpp\030\006 \001(\0132\034.P"
    "BMidLayer.PreprocessResult\022*\n\007errorsp\030\007 "
    "\001(\0132\031.PBMidLayer.SpeakerResult\022*\n\007rights"
    "p\030\010 \001(\0132\031.PBMidLayer.SpeakerResult\022*\n\007er"
    "rorkw\030\t \001(\0132\031.PBMidLayer.KeywordResult\022*"
    "\n\007rightkw\030\n \001(\0132\031.PBMidLayer.KeywordResu"
    "lt\022-\n\007errorts\030\013 \001(\0132\034.PBMidLayer.Transcr"
    "iptResult\022-\n\007rightts\030\014 \001(\0132\034.PBMidLayer."
    "TranscriptResult\022\'\n\010rightvad\030\r \001(\0132\025.PBM"
    "idLayer.VADResult\022\'\n\010errorvad\030\016 \001(\0132\025.PB"
    "MidLayer.VADResult\022,\n\007rightss\030\017 \001(\0132\033.PB"
    "MidLayer.SpeechSegResult\022,\n\007errorss\030\020 \001("
    "\0132\033.PBMidLayer.SpeechSegResult\022)\n\trightd"
    "tmf\030\021 \001(\0132\026.PBMidLayer.DTMFResult\022)\n\terr"
    "ordtmf\030\022 \001(\0132\026.PBMidLayer.DTMFResult\022\'\n\007"
    "syscode\030\023 \001(\0132\026.PBMidLayer.SystemCode\"\265\003"
    "\n\rSearchRequest\022\016\n\006taskid\030\001 \002(\t\022\'\n\007sysco"
    "de\030\002 \002(\0132\026.PBMidLayer.SystemCode\022\021\n\tmaxr"
    "esult\030\003 \002(\005\022,\n\010tasktype\030\004 \002(\0162\032.PBMidLay"
    "er.SearchTaskType\022&\n\006gender\030\005 \001(\0162\026.PBMi"
    "dLayer.GenderType\022\021\n\tstarttime\030\006 \001(\004\022\017\n\007"
    "endtime\030\007 \001(\004\022+\n\ntelpattern\030\010 \003(\0132\027.PBMi"
    "dLayer.PhoneNumber\022\014\n\004lang\030\t \001(\t\022)\n\010keyw"
    "ords\030\n \003(\0132\027.PBMidLayer.KeywordRule\022,\n\ts"
    "peechseg\030\013 \003(\0132\031.PBMidLayer.SpeechSegRul"
    "e\022)\n\010speakers\030\014 \003(\0132\027.PBMidLayer.Speaker"
    "Rule\022\r\n\005voice\030\r \001(\014\022\020\n\010calllist\030\016 \003(\t\"b\n"
    "\022SearchAbortRequest\022\016\n\006taskid\030\001 \002(\t\022\'\n\007s"
    "yscode\030\002 \002(\0132\026.PBMidLayer.SystemCode\022\023\n\013"
    "aborttaskid\030\003 \002(\t\"\201\002\n\022SearchResultNotify"
    "\022\016\n\006taskid\030\001 \002(\t\022\'\n\007syscode\030\002 \002(\0132\026.PBMi"
    "dLayer.SystemCode\022+\n\006status\030\003 \002(\0132\033.PBMi"
    "dLayer.OperationStatus\022,\n\010tasktype\030\004 \001(\016"
    "2\032.PBMidLayer.SearchTaskType\022,\n\006voices\030\005"
    " \003(\0132\034.PBMidLayer.SearchFileResult\022)\n\010sp"
    "eakers\030\006 \003(\0132\027.PBMidLayer.SpeakerItem\"v\n"
    "\016SearchResponse\022\016\n\006taskid\030\001 \002(\t\022\'\n\007sysco"
    "de\030\002 \002(\0132\026.PBMidLayer.SystemCode\022+\n\006stat"
    "us\030\003 \002(\0132\033.PBMidLayer.OperationStatus\"d\n"
    "\022SearchStateRequest\022\016\n\006operid\030\001 \002(\t\022\'\n\007s"
    "yscode\030\002 \002(\0132\026.PBMidLayer.SystemCode\022\025\n\r"
    "requesttaskid\030\003 \002(\t\"\247\001\n\023SearchStateRespo"
    "nse\022\016\n\006operid\030\001 \002(\t\022\'\n\007syscode\030\002 \002(\0132\026.P"
    "BMidLayer.SystemCode\022+\n\006status\030\003 \002(\0132\033.P"
    "BMidLayer.OperationStatus\022*\n\005state\030\004 \002(\013"
    "2\033.PBMidLayer.SearchTaskState\"\204\001\n\016GetFil"
    "eRequest\022\016\n\006operid\030\001 \002(\t\022\'\n\007syscode\030\002 \002("
    "\0132\026.PBMidLayer.SystemCode\022\016\n\006callid\030\003 \002("
    "\t\022)\n\007filetag\030\004 \002(\0162\030.PBMidLayer.AudioFil"
    "eTag\"\276\001\n\017GetFileResponse\022\016\n\006operid\030\001 \002(\t"
    "\022\'\n\007syscode\030\002 \002(\0132\026.PBMidLayer.SystemCod"
    "e\022\016\n\006isdata\030\003 \002(\010\0224\n\014filelocation\030\004 \001(\0132"
    "\036.PBMidLayer.FileLocationNotify\022,\n\010filed"
    "ata\030\005 \001(\0132\032.PBMidLayer.FileDataNotify\"\212\001"
    "\n\022AddLangSampRequest\022\016\n\006taskid\030\001 \002(\t\022\'\n\007"
    "syscode\030\002 \002(\0132\026.PBMidLayer.SystemCode\022\014\n"
    "\004lang\030\003 \002(\t\022-\n\005files\030\004 \003(\0132\036.PBMidLayer."
    "FileLocationNotify\"{\n\023AddLangSampRespons"
    "e\022\016\n\006taskid\030\001 \002(\t\022\'\n\007syscode\030\002 \002(\0132\026.PBM"
    "idLayer.SystemCode\022+\n\006status\030\003 \002(\0132\033.PBM"
    "idLayer.OperationStatus\"4\n\017OperationStat"
    "us\022\014\n\004code\030\001 \002(\005\022\023\n\013description\030\002 \001(\t\"\346\001"
    "\n\020PreprocessResult\022$\n\004type\030\001 \002(\0162\026.PBMid"
    "Layer.SpeechType\022\024\n\014languagename\030\002 \001(\t\022\r"
    "\n\005score\030\003 \001(\002\022\020\n\010validlen\030\004 \001(\r\022&\n\006gende"
    "r\030\005 \001(\0162\026.PBMidLayer.GenderType\022\022\n\nspeak"
    "ernum\030\006 \001(\005\022\016\n\006callid\030\007 \001(\t\022)\n\007filetag\030\010"
    " \001(\0162\030.PBMidLayer.AudioFileTag\"\211\001\n\rSpeak"
    "erResult\022\022\n\nspeakernum\030\001 \002(\005\022)\n\010speakers"
    "\030\002 \003(\0132\027.PBMidLayer.SpeakerItem\022\016\n\006calli"
    "d\030\003 \001(\t\022)\n\007filetag\030\004 \001(\0162\030.PBMidLayer.Au"
    "dioFileTag\"=\n\013SpeakerItem\022\020\n\010objectid\030\001 "
    "\002(\t\022\r\n\005score\030\002 \002(\002\022\r\n\005spyid\030\003 \001(\t\"\214\001\n\rKe"
    "ywordResult\022\022\n\nkeywordnum\030\001 \002(\005\022,\n\010keywo"
    "rds\030\002 \003(\0132\032.PBMidLayer.KeywordSnippet\022\016\n"
    "\006callid\030\003 \001(\t\022)\n\007filetag\030\004 \001(\0162\030.PBMidLa"
    "yer.AudioFileTag\"\207\001\n\016KeywordSnippet\022\017\n\007k"
    "eyword\030\001 \002(\t\022\024\n\014languagename\030\002 \002(\t\022\r\n\005sc"
    "ore\030\003 \002(\002\022\021\n\tbegintime\030\004 \002(\r\022\017\n\007endtime\030"
    "\005 \002(\r\022\014\n\004text\030\006 \001(\t\022\r\n\005spyid\030\007 \001(\t\"\222\001\n\020T"
    "ranscriptResult\022\022\n\nsegmentnum\030\001 \002(\005\022/\n\010s"
    "egments\030\002 \003(\0132\035.PBMidLayer.SegmentTransc"
    "ript\022\016\n\006callid\030\003 \001(\t\022)\n\007filetag\030\004 \001(\0162\030."
    "PBMidLayer.AudioFileTag\"m\n\021SegmentTransc"
    "ript\022\017\n\007content\030\001 \002(\t\022\024\n\014languagename\030\002 "
    "\002(\t\022\r\n\005score\030\003 \002(\002\022\021\n\tbegintime\030\004 \002(\r\022\017\n"
    "\007endtime\030\005 \002(\r\"\215\001\n\013SpeakerRule\022\020\n\010object"
    "id\030\001 \002(\t\022\025\n\rthresholdflag\030\002 \001(\005\022\024\n\014lowth"
    "reshold\030\003 \001(\002\022\025\n\rhighthreshold\030\004 \001(\002\022(\n\007"
    "telrule\030\005 \003(\0132\027.PBMidLayer.PhoneNumber\"q"
    "\n\013KeywordRule\022\024\n\014languagename\030\001 \002(\t\022\017\n\007k"
    "eyword\030\002 \002(\t\022\021\n\tthreshold\030\003 \001(\002\022(\n\007telru"
    "le\030\005 \003(\0132\027.PBMidLayer.PhoneNumber\"\234\001\n\rSp"
    "eechSegRule\022\024\n\014languagename\030\001 \002(\t\022\023\n\013spe"
    "echsegid\030\002 \002(\t\022\014\n\004data\030\003 \001(\014\022\025\n\rspeechse"
    "gname\030\004 \001(\t\022\021\n\tthreshold\030\005 \001(\002\022(\n\007telrul"
    "e\030\006 \003(\0132\027.PBMidLayer.PhoneNumber\"V\n\014Lang"
    "uageInfo\022\024\n\014languagename\030\001 \002(\t\022\030\n\020keywor"
    "dsupported\030\002 \002(\005\022\026\n\016transsupported\030\003 \002(\005"
    "\"d\n\tTrainInfo\022*\n\004code\030\001 \002(\0162\034.PBMidLayer"
    ".AudioEncodingTag\022\016\n\006isdata\030\002 \002(\010\022\r\n\005voi"
    "ce\030\003 \001(\014\022\014\n\004path\030\004 \001(\t\"]\n\013PhoneNumber\022\021\n"
    "\ttelnumber\030\001 \002(\t\022\023\n\013countrycode\030\002 \001(\t\022\024\n"
    "\014provincecode\030\003 \001(\t\022\020\n\010areacode\030\004 \001(\t\"\235\001"
    "\n\017SearchTaskState\0220\n\010runstate\030\001 \002(\0162\036.PB"
    "MidLayer.SearchTaskRunState\022\021\n\tqueuetime"
    "\030\002 \002(\004\022\021\n\tstarttime\030\003 \001(\004\022\022\n\nfinishtime\030"
    "\004 \001(\004\022\021\n\taborttime\030\005 \001(\004\022\013\n\003msg\030\006 \001(\t\"=\n"
    "\nSystemCode\022\r\n\005spyid\030\001 \001(\t\022\014\n\004srid\030\002 \001(\t"
    "\022\022\n\ndatasource\030\003 \003(\t\"\370\001\n\020SearchFileResul"
    "t\022\016\n\006callid\030\001 \002(\t\022)\n\007filetag\030\002 \002(\0162\030.PBM"
    "idLayer.AudioFileTag\022\r\n\005score\030\003 \001(\002\022)\n\010s"
    "peakers\030\004 \003(\0132\027.PBMidLayer.SpeakerItem\022,"
    "\n\010keywords\030\005 \003(\0132\032.PBMidLayer.KeywordSni"
    "ppet\022-\n\nspeechsegs\030\006 \003(\0132\031.PBMidLayer.Sp"
    "eechSegItem\022\022\n\ndatasource\030\007 \002(\t\"{\n\017Speec"
    "hSegResult\022-\n\nspeechsegs\030\001 \003(\0132\031.PBMidLa"
    "yer.SpeechSegItem\022\016\n\006callid\030\002 \001(\t\022)\n\007fil"
    "etag\030\003 \001(\0162\030.PBMidLayer.AudioFileTag\"\202\001\n"
    "\rSpeechSegItem\022\025\n\rspeechsegcode\030\001 \002(\t\022\r\n"
    "\005begin\030\002 \002(\005\022\013\n\003end\030\003 \002(\005\022\020\n\010hitbegin\030\004 "
    "\002(\005\022\016\n\006hitend\030\005 \002(\005\022\r\n\005score\030\006 \002(\002\022\r\n\005sp"
    "yid\030\007 \001(\t\"i\n\tVADResult\022!\n\004vads\030\001 \003(\0132\023.P"
    "BMidLayer.VADItem\022\016\n\006callid\030\002 \001(\t\022)\n\007fil"
    "etag\030\003 \001(\0162\030.PBMidLayer.AudioFileTag\"2\n\007"
    "VADItem\022\r\n\005begin\030\001 \002(\005\022\013\n\003end\030\002 \002(\005\022\013\n\003s"
    "pk\030\003 \001(\t\"k\n\nDTMFResult\022\"\n\004dtms\030\001 \003(\0132\024.P"
    "BMidLayer.DTMFItem\022\016\n\006callid\030\002 \001(\t\022)\n\007fi"
    "letag\030\003 \001(\0162\030.PBMidLayer.AudioFileTag\"4\n"
    "\010DTMFItem\022\014\n\004code\030\001 \002(\005\022\r\n\005begin\030\002 \002(\005\022\013"
    "\n\003end\030\003 \002(\005\"H\n\017SystemStateItem\022\021\n\tstaten"
    "ame\030\001 \002(\t\022\022\n\nstatevalue\030\002 \002(\t\022\016\n\006remark\030"
    "\003 \001(\t\"\257\001\n\016FileDataNotify\022\016\n\006callid\030\001 \002(\t"
    "\022)\n\007filetag\030\002 \002(\0162\030.PBMidLayer.AudioFile"
    "Tag\022*\n\004code\030\003 \002(\0162\034.PBMidLayer.AudioEnco"
    "dingTag\022\r\n\005voice\030\004 \002(\014\022\'\n\007syscode\030\005 \002(\0132"
    "\026.PBMidLayer.SystemCode*\350\007\n\007MsgType\022\017\n\013M"
    "SG_UNKNOWN\020\000\022\023\n\017MSG_CONNECT_REQ\020\001\022\024\n\020MSG"
    "_CONNECT_RESP\020\002\022\027\n\023MSG_CONNECT_RELEASE\020\010"
    "\022\020\n\014MSG_ECHO_REQ\020\021\022\021\n\rMSG_ECHO_RESP\020\022\022\030\n"
    "\024MSG_CALL_PROCESS_REQ\020!\022\031\n\025MSG_CALL_PROC"
    "ESS_RESP\020\"\022\032\n\026MSG_HISTORY_SEARCH_REQ\020A\022\033"
    "\n\027MSG_HISTORY_SEARCH_RESP\020B\022\031\n\025MSG_HISTO"
    "RY_TRANS_REQ\020C\022\032\n\026MSG_HISTORY_TRANS_RESP"
    "\020D\022\034\n\030MSG_FILE_LOCATION_NOTIFY\020E\022\030\n\024MSG_"
    "TARGET_QUERY_REQ\020G\022\031\n\025MSG_TARGET_QUERY_R"
    "ESP\020H\022\025\n\020MSG_SET_RULE_REQ\020\201 \022\026\n\021MSG_SET_"
    "RULE_RESP\020\202 \022\027\n\022MSG_QUERY_RULE_REQ\020\203 \022\030\n"
    "\023MSG_QUERY_RULE_RESP\020\204 \022\030\n\023MSG_SET_SYSPA"
    "RA_REQ\020\211 \022\031\n\024MSG_SET_SYSPARA_RESP\020\212 \022\032\n\025"
    "MSG_QUERY_SYSPARA_REQ\020\221 \022\033\n\026MSG_QUERY_SY"
    "SPARA_RESP\020\222 \022\025\n\020MSG_ALARM_NOTIFY\020\224 \022\024\n\017"
    "MSG_STAT_NOTIFY\020\226 \022\032\n\025MSG_OBJECT_MANAGE_"
    "REQ\020\227 \022\033\n\026MSG_OBJECT_MANAGE_RESP\020\230 \022\031\n\024M"
    "SG_FEED_BACK_NOTIFY\020\231 \022\023\n\016MSG_SEARCH_REQ"
    "\020\201\010\022\031\n\024MSG_SEARCH_ABORT_REQ\020\202\010\022\026\n\021MSG_SE"
    "ARCH_RESULT\020\203\010\022\024\n\017MSG_SEARCH_RESP\020\204\010\022\031\n\024"
    "MSG_SEARCH_STATE_REQ\020\205\010\022\032\n\025MSG_SEARCH_ST"
    "ATE_RESP\020\206\010\022\025\n\020MSG_GET_FILE_REQ\020\207\010\022\026\n\021MS"
    "G_GET_FILE_RESP\020\210\010\022\032\n\025MSG_ADD_LANG_SAMP_"
    "REQ\020\211\010\022\033\n\026MSG_ADD_LANG_SAMP_RESP\020\212\010\022\035\n\030M"
    "SG_OBJECT_MANAGE_NOTIFY\020\213\010*K\n\017AudioRecor"
    "dMode\022\017\n\013ARM_Unknown\020\000\022\023\n\017ARM_Combinatio"
    "n\020\001\022\022\n\016ARM_Separation\020\002*o\n\020AudioChannelT"
    "ype\022\017\n\013ACT_Unknown\020\000\022\013\n\007ACT_Pcm\020\001\022\014\n\010ACT"
    "_Voip\020\002\022\020\n\014ACT_TwoLines\020\003\022\021\n\rACT_AirSign"
    "al\020\004\022\n\n\006ACT_WX\020\005*B\n\016AudioTransFlag\022\017\n\013AT"
    "F_Unknown\020\000\022\r\n\tATF_Trans\020\001\022\020\n\014ATF_NotTra"
    "ns\020\002*\215\001\n\014AudioFileTag\022\017\n\013AFT_Unknown\020\000\022\023"
    "\n\017AFT_Combination\020\001\022\027\n\023AFT_Caller_Cluste"
    "rA\020\002\022\027\n\023AFT_Callee_ClusterB\020\003\022\026\n\022AFT_Thi"
    "rd_ClusterC\020\004\022\r\n\tAFT_NoTag\020\005*\205\001\n\017Recogni"
    "tionType\022\024\n\020RT_UnknownResult\020\000\022\024\n\020RT_Spe"
    "akerResult\020\001\022\024\n\020RT_KeywordResult\020\002\022\027\n\023RT"
    "_PreprocessResult\020\003\022\027\n\023RT_TranscriptResu"
    "lt\020\004*F\n\014PriorityType\022\016\n\nPT_Unknown\020\000\022\013\n\007"
    "PT_High\020\001\022\r\n\tPT_Normal\020\002\022\n\n\006PT_Low\020\003*\254\001\n"
    "\017SearchCondition\022\016\n\nSC_Unknown\020\000\022\024\n\020SC_S"
    "peakerResult\020\001\022\024\n\020SC_KeywordResult\020\002\022\025\n\021"
    "SC_LanguageResult\020\003\022\027\n\023SC_TranscriptResu"
    "lt\020\004\022\n\n\006SC_VAD\020\005\022\013\n\007SC_DTMF\020\006\022\024\n\020SC_Spee"
    "chSegment\020\007*d\n\nSpeechType\022\016\n\nST_Unknown\020"
    "\000\022\014\n\010ST_Voice\020\001\022\013\n\007ST_DTMF\020\002\022\014\n\010ST_Music"
    "\020\003\022\014\n\010ST_Quiet\020\004\022\017\n\013ST_NonVoice\020\005*\377\001\n\020Au"
    "dioEncodingTag\022\017\n\013AET_Unknown\020\000\022\014\n\010AET_A"
    "Law\020\001\022\016\n\nAET_Gsm610\020\002\022\014\n\010AET_G726\020\003\022\021\n\rA"
    "ET_LinearPCM\020\004\022\017\n\013AET_G723_16\020\005\022\017\n\013AET_G"
    "723_15\020\006\022\014\n\010AET_G729\020\007\022\014\n\010AET_ULaw\020\010\022\022\n\016"
    "AET_INTEL_G723\020\t\022\022\n\016AET_INTEL_G729\020\n\022\024\n\020"
    "AET_INTEL_GSM690\020\013\022\016\n\nAET_AMR_NB\020\014\022\017\n\013AE"
    "T_GSM_EFR\020\r*L\n\rOperationType\022\016\n\nOT_Unkno"
    "wn\020\000\022\r\n\tOT_Create\020\001\022\r\n\tOT_Delete\020\002\022\r\n\tOT"
    "_Update\020\003*P\n\010RuleType\022\016\n\nRT_Unknown\020\000\022\016\n"
    "\nRT_Speaker\020\001\022\016\n\nRT_Keyword\020\002\022\024\n\020RT_Spee"
    "chSegment\020\003*\243\001\n\016SystemParaType\022\017\n\013SPT_Un"
    "known\020\000\022\031\n\025SPT_LanguageThreshold\020\001\022\030\n\024SP"
    "T_SpeakerThreshold\020\002\022\030\n\024SPT_KeywordThres"
    "hold\020\003\022\030\n\024SPT_LanguageRetCount\020\004\022\027\n\023SPT_"
    "SpeakerRetCount\020\005*M\n\nAlarmLevel\022\016\n\nAL_Un"
    "known\020\000\022\016\n\nAL_General\020\001\022\020\n\014AL_Important\020"
    "\002\022\r\n\tAL_Urgent\020\003*\235\001\n\016AudioRecogFlag\022\017\n\013A"
    "RF_Unknown\020\000\022\022\n\016ARF_Preprocess\020\001\022\017\n\013ARF_"
    "Speaker\020\002\022\017\n\013ARF_Keyword\020\004\022\022\n\016ARF_Transc"
    "ript\020\010\022\013\n\007ARF_VAD\020\020\022\025\n\021ARF_SpeechSegment"
    "\020 \022\014\n\010ARF_DTMF\020@*\?\n\021FileAcquireMethod\022\017\n"
    "\013FAM_Unknown\020\000\022\013\n\007FAM_URL\020\001\022\014\n\010FAM_Data\020"
    "\002*c\n\016SearchTaskType\022\017\n\013STT_Unknown\020\000\022\023\n\017"
    "STT_CondToVoice\020\001\022\024\n\020STT_VoiceToVoice\020\002\022"
    "\025\n\021STT_VoiceToObject\020\003*y\n\022SearchTaskRunS"
    "tate\022\020\n\014STRS_Unknown\020\000\022\016\n\nSTRS_Queue\020\001\022\020"
    "\n\014STRS_Running\020\002\022\017\n\013STRS_Finish\020\003\022\016\n\nSTR"
    "S_Abort\020\004\022\016\n\nSTRS_Error\020\005*E\n\nGenderType\022"
    "\016\n\nGT_Unknown\020\000\022\013\n\007GT_Male\020\001\022\r\n\tGT_Femal"
    "e\020\002\022\013\n\007GT_Both\020\003", 14496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMidLayer.proto", &protobuf_RegisterTypes);
  HeadMsg::default_instance_ = new HeadMsg();
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectResponse::default_instance_ = new ConnectResponse();
  ConnectRelease::default_instance_ = new ConnectRelease();
  EchoReqRes::default_instance_ = new EchoReqRes();
  CallProcessRequest::default_instance_ = new CallProcessRequest();
  CallProcessResponse::default_instance_ = new CallProcessResponse();
  HistorySearchRequest::default_instance_ = new HistorySearchRequest();
  TaskAttribute::default_instance_ = new TaskAttribute();
  HistorySearchResponse::default_instance_ = new HistorySearchResponse();
  HistoryTransRequest::default_instance_ = new HistoryTransRequest();
  HistoryTransResponse::default_instance_ = new HistoryTransResponse();
  FileLocationNotify::default_instance_ = new FileLocationNotify();
  TargetQueryRequest::default_instance_ = new TargetQueryRequest();
  TargetQueryResponse::default_instance_ = new TargetQueryResponse();
  SetRuleRequest::default_instance_ = new SetRuleRequest();
  SetRuleResponse::default_instance_ = new SetRuleResponse();
  QueryRuleRequest::default_instance_ = new QueryRuleRequest();
  QueryRuleResponse::default_instance_ = new QueryRuleResponse();
  SetSysParaRequest::default_instance_ = new SetSysParaRequest();
  SetSysParaResponse::default_instance_ = new SetSysParaResponse();
  QuerySysParaRequest::default_instance_ = new QuerySysParaRequest();
  QuerySysParaResponse::default_instance_ = new QuerySysParaResponse();
  AlarmNotify::default_instance_ = new AlarmNotify();
  StatusNotify::default_instance_ = new StatusNotify();
  ObjectManageRequest::default_instance_ = new ObjectManageRequest();
  ObjectManageNotify::default_instance_ = new ObjectManageNotify();
  ObjectManageResponse::default_instance_ = new ObjectManageResponse();
  FeedbackNotify::default_instance_ = new FeedbackNotify();
  SearchRequest::default_instance_ = new SearchRequest();
  SearchAbortRequest::default_instance_ = new SearchAbortRequest();
  SearchResultNotify::default_instance_ = new SearchResultNotify();
  SearchResponse::default_instance_ = new SearchResponse();
  SearchStateRequest::default_instance_ = new SearchStateRequest();
  SearchStateResponse::default_instance_ = new SearchStateResponse();
  GetFileRequest::default_instance_ = new GetFileRequest();
  GetFileResponse::default_instance_ = new GetFileResponse();
  AddLangSampRequest::default_instance_ = new AddLangSampRequest();
  AddLangSampResponse::default_instance_ = new AddLangSampResponse();
  OperationStatus::default_instance_ = new OperationStatus();
  PreprocessResult::default_instance_ = new PreprocessResult();
  SpeakerResult::default_instance_ = new SpeakerResult();
  SpeakerItem::default_instance_ = new SpeakerItem();
  KeywordResult::default_instance_ = new KeywordResult();
  KeywordSnippet::default_instance_ = new KeywordSnippet();
  TranscriptResult::default_instance_ = new TranscriptResult();
  SegmentTranscript::default_instance_ = new SegmentTranscript();
  SpeakerRule::default_instance_ = new SpeakerRule();
  KeywordRule::default_instance_ = new KeywordRule();
  SpeechSegRule::default_instance_ = new SpeechSegRule();
  LanguageInfo::default_instance_ = new LanguageInfo();
  TrainInfo::default_instance_ = new TrainInfo();
  PhoneNumber::default_instance_ = new PhoneNumber();
  SearchTaskState::default_instance_ = new SearchTaskState();
  SystemCode::default_instance_ = new SystemCode();
  SearchFileResult::default_instance_ = new SearchFileResult();
  SpeechSegResult::default_instance_ = new SpeechSegResult();
  SpeechSegItem::default_instance_ = new SpeechSegItem();
  VADResult::default_instance_ = new VADResult();
  VADItem::default_instance_ = new VADItem();
  DTMFResult::default_instance_ = new DTMFResult();
  DTMFItem::default_instance_ = new DTMFItem();
  SystemStateItem::default_instance_ = new SystemStateItem();
  FileDataNotify::default_instance_ = new FileDataNotify();
  HeadMsg::default_instance_->InitAsDefaultInstance();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectResponse::default_instance_->InitAsDefaultInstance();
  ConnectRelease::default_instance_->InitAsDefaultInstance();
  EchoReqRes::default_instance_->InitAsDefaultInstance();
  CallProcessRequest::default_instance_->InitAsDefaultInstance();
  CallProcessResponse::default_instance_->InitAsDefaultInstance();
  HistorySearchRequest::default_instance_->InitAsDefaultInstance();
  TaskAttribute::default_instance_->InitAsDefaultInstance();
  HistorySearchResponse::default_instance_->InitAsDefaultInstance();
  HistoryTransRequest::default_instance_->InitAsDefaultInstance();
  HistoryTransResponse::default_instance_->InitAsDefaultInstance();
  FileLocationNotify::default_instance_->InitAsDefaultInstance();
  TargetQueryRequest::default_instance_->InitAsDefaultInstance();
  TargetQueryResponse::default_instance_->InitAsDefaultInstance();
  SetRuleRequest::default_instance_->InitAsDefaultInstance();
  SetRuleResponse::default_instance_->InitAsDefaultInstance();
  QueryRuleRequest::default_instance_->InitAsDefaultInstance();
  QueryRuleResponse::default_instance_->InitAsDefaultInstance();
  SetSysParaRequest::default_instance_->InitAsDefaultInstance();
  SetSysParaResponse::default_instance_->InitAsDefaultInstance();
  QuerySysParaRequest::default_instance_->InitAsDefaultInstance();
  QuerySysParaResponse::default_instance_->InitAsDefaultInstance();
  AlarmNotify::default_instance_->InitAsDefaultInstance();
  StatusNotify::default_instance_->InitAsDefaultInstance();
  ObjectManageRequest::default_instance_->InitAsDefaultInstance();
  ObjectManageNotify::default_instance_->InitAsDefaultInstance();
  ObjectManageResponse::default_instance_->InitAsDefaultInstance();
  FeedbackNotify::default_instance_->InitAsDefaultInstance();
  SearchRequest::default_instance_->InitAsDefaultInstance();
  SearchAbortRequest::default_instance_->InitAsDefaultInstance();
  SearchResultNotify::default_instance_->InitAsDefaultInstance();
  SearchResponse::default_instance_->InitAsDefaultInstance();
  SearchStateRequest::default_instance_->InitAsDefaultInstance();
  SearchStateResponse::default_instance_->InitAsDefaultInstance();
  GetFileRequest::default_instance_->InitAsDefaultInstance();
  GetFileResponse::default_instance_->InitAsDefaultInstance();
  AddLangSampRequest::default_instance_->InitAsDefaultInstance();
  AddLangSampResponse::default_instance_->InitAsDefaultInstance();
  OperationStatus::default_instance_->InitAsDefaultInstance();
  PreprocessResult::default_instance_->InitAsDefaultInstance();
  SpeakerResult::default_instance_->InitAsDefaultInstance();
  SpeakerItem::default_instance_->InitAsDefaultInstance();
  KeywordResult::default_instance_->InitAsDefaultInstance();
  KeywordSnippet::default_instance_->InitAsDefaultInstance();
  TranscriptResult::default_instance_->InitAsDefaultInstance();
  SegmentTranscript::default_instance_->InitAsDefaultInstance();
  SpeakerRule::default_instance_->InitAsDefaultInstance();
  KeywordRule::default_instance_->InitAsDefaultInstance();
  SpeechSegRule::default_instance_->InitAsDefaultInstance();
  LanguageInfo::default_instance_->InitAsDefaultInstance();
  TrainInfo::default_instance_->InitAsDefaultInstance();
  PhoneNumber::default_instance_->InitAsDefaultInstance();
  SearchTaskState::default_instance_->InitAsDefaultInstance();
  SystemCode::default_instance_->InitAsDefaultInstance();
  SearchFileResult::default_instance_->InitAsDefaultInstance();
  SpeechSegResult::default_instance_->InitAsDefaultInstance();
  SpeechSegItem::default_instance_->InitAsDefaultInstance();
  VADResult::default_instance_->InitAsDefaultInstance();
  VADItem::default_instance_->InitAsDefaultInstance();
  DTMFResult::default_instance_->InitAsDefaultInstance();
  DTMFItem::default_instance_->InitAsDefaultInstance();
  SystemStateItem::default_instance_->InitAsDefaultInstance();
  FileDataNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMidLayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMidLayer_2eproto {
  StaticDescriptorInitializer_PBMidLayer_2eproto() {
    protobuf_AddDesc_PBMidLayer_2eproto();
  }
} static_descriptor_initializer_PBMidLayer_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 8:
    case 17:
    case 18:
    case 33:
    case 34:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 71:
    case 72:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4105:
    case 4106:
    case 4113:
    case 4114:
    case 4116:
    case 4118:
    case 4119:
    case 4120:
    case 4121:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioRecordMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioRecordMode_descriptor_;
}
bool AudioRecordMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioChannelType_descriptor_;
}
bool AudioChannelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioTransFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioTransFlag_descriptor_;
}
bool AudioTransFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioFileTag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioFileTag_descriptor_;
}
bool AudioFileTag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecognitionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognitionType_descriptor_;
}
bool RecognitionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriorityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriorityType_descriptor_;
}
bool PriorityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SearchCondition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchCondition_descriptor_;
}
bool SearchCondition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpeechType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechType_descriptor_;
}
bool SpeechType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioEncodingTag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioEncodingTag_descriptor_;
}
bool AudioEncodingTag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationType_descriptor_;
}
bool OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RuleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleType_descriptor_;
}
bool RuleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SystemParaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemParaType_descriptor_;
}
bool SystemParaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlarmLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmLevel_descriptor_;
}
bool AlarmLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioRecogFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioRecogFlag_descriptor_;
}
bool AudioRecogFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileAcquireMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileAcquireMethod_descriptor_;
}
bool FileAcquireMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SearchTaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchTaskType_descriptor_;
}
bool SearchTaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SearchTaskRunState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchTaskRunState_descriptor_;
}
bool SearchTaskRunState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GenderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenderType_descriptor_;
}
bool GenderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HeadMsg::kSynFieldNumber;
const int HeadMsg::kProFieldNumber;
const int HeadMsg::kTypeFieldNumber;
const int HeadMsg::kSeqnoFieldNumber;
const int HeadMsg::kLenFieldNumber;
#endif  // !_MSC_VER

HeadMsg::HeadMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadMsg::InitAsDefaultInstance() {
}

HeadMsg::HeadMsg(const HeadMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadMsg::SharedCtor() {
  _cached_size_ = 0;
  syn_ = 255u;
  pro_ = 100u;
  type_ = 0u;
  seqno_ = GOOGLE_ULONGLONG(0);
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadMsg::~HeadMsg() {
  SharedDtor();
}

void HeadMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeadMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadMsg_descriptor_;
}

const HeadMsg& HeadMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

HeadMsg* HeadMsg::default_instance_ = NULL;

HeadMsg* HeadMsg::New() const {
  return new HeadMsg;
}

void HeadMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    syn_ = 255u;
    pro_ = 100u;
    type_ = 0u;
    seqno_ = GOOGLE_ULONGLONG(0);
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 syn = 1 [default = 255];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &syn_)));
          set_has_syn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pro;
        break;
      }

      // required fixed32 pro = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pro_)));
          set_has_pro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_type;
        break;
      }

      // required fixed32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_seqno;
        break;
      }

      // required fixed64 seqno = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_len;
        break;
      }

      // required fixed32 len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 syn = 1 [default = 255];
  if (has_syn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->syn(), output);
  }

  // required fixed32 pro = 2 [default = 100];
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->pro(), output);
  }

  // required fixed32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->type(), output);
  }

  // required fixed64 seqno = 4;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->seqno(), output);
  }

  // required fixed32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 syn = 1 [default = 255];
  if (has_syn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->syn(), target);
  }

  // required fixed32 pro = 2 [default = 100];
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->pro(), target);
  }

  // required fixed32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->type(), target);
  }

  // required fixed64 seqno = 4;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->seqno(), target);
  }

  // required fixed32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 syn = 1 [default = 255];
    if (has_syn()) {
      total_size += 1 + 4;
    }

    // required fixed32 pro = 2 [default = 100];
    if (has_pro()) {
      total_size += 1 + 4;
    }

    // required fixed32 type = 3;
    if (has_type()) {
      total_size += 1 + 4;
    }

    // required fixed64 seqno = 4;
    if (has_seqno()) {
      total_size += 1 + 8;
    }

    // required fixed32 len = 5;
    if (has_len()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadMsg::MergeFrom(const HeadMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syn()) {
      set_syn(from.syn());
    }
    if (from.has_pro()) {
      set_pro(from.pro());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadMsg::CopyFrom(const HeadMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HeadMsg::Swap(HeadMsg* other) {
  if (other != this) {
    std::swap(syn_, other->syn_);
    std::swap(pro_, other->pro_);
    std::swap(type_, other->type_);
    std::swap(seqno_, other->seqno_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadMsg_descriptor_;
  metadata.reflection = HeadMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kSpyidFieldNumber;
const int ConnectRequest::kSridFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectRequest::InitAsDefaultInstance() {
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRequest_descriptor_;
}

const ConnectRequest& ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string spyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srid;
        break;
      }

      // optional string srid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->spyid(), output);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spyid(), target);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->srid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string spyid = 1;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 2;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRequest_descriptor_;
  metadata.reflection = ConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectResponse::kStatusFieldNumber;
const int ConnectResponse::kSpyidFieldNumber;
const int ConnectResponse::kSridFieldNumber;
#endif  // !_MSC_VER

ConnectResponse::ConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
}

ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectResponse::~ConnectResponse() {
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectResponse_descriptor_;
}

const ConnectResponse& ConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

ConnectResponse* ConnectResponse::default_instance_ = NULL;

ConnectResponse* ConnectResponse::New() const {
  return new ConnectResponse;
}

void ConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_spyid;
        break;
      }

      // required string spyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srid;
        break;
      }

      // optional string srid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->spyid(), output);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spyid(), target);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required string spyid = 2;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 3;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectResponse_descriptor_;
  metadata.reflection = ConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRelease::kStatusFieldNumber;
const int ConnectRelease::kSpyidFieldNumber;
const int ConnectRelease::kSridFieldNumber;
#endif  // !_MSC_VER

ConnectRelease::ConnectRelease()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectRelease::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
}

ConnectRelease::ConnectRelease(const ConnectRelease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectRelease::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRelease::~ConnectRelease() {
  SharedDtor();
}

void ConnectRelease::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void ConnectRelease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRelease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRelease_descriptor_;
}

const ConnectRelease& ConnectRelease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

ConnectRelease* ConnectRelease::default_instance_ = NULL;

ConnectRelease* ConnectRelease::New() const {
  return new ConnectRelease;
}

void ConnectRelease::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRelease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_spyid;
        break;
      }

      // required string spyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srid;
        break;
      }

      // optional string srid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectRelease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->spyid(), output);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectRelease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spyid(), target);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectRelease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required string spyid = 2;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 3;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRelease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRelease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRelease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRelease::MergeFrom(const ConnectRelease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRelease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRelease::CopyFrom(const ConnectRelease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRelease::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ConnectRelease::Swap(ConnectRelease* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRelease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRelease_descriptor_;
  metadata.reflection = ConnectRelease_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EchoReqRes::kTimestampFieldNumber;
#endif  // !_MSC_VER

EchoReqRes::EchoReqRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EchoReqRes::InitAsDefaultInstance() {
}

EchoReqRes::EchoReqRes(const EchoReqRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EchoReqRes::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoReqRes::~EchoReqRes() {
  SharedDtor();
}

void EchoReqRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EchoReqRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoReqRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoReqRes_descriptor_;
}

const EchoReqRes& EchoReqRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

EchoReqRes* EchoReqRes::default_instance_ = NULL;

EchoReqRes* EchoReqRes::New() const {
  return new EchoReqRes;
}

void EchoReqRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EchoReqRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EchoReqRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EchoReqRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EchoReqRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoReqRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EchoReqRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EchoReqRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EchoReqRes::MergeFrom(const EchoReqRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EchoReqRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoReqRes::CopyFrom(const EchoReqRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoReqRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EchoReqRes::Swap(EchoReqRes* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EchoReqRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoReqRes_descriptor_;
  metadata.reflection = EchoReqRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallProcessRequest::kCallidFieldNumber;
const int CallProcessRequest::kFlagFieldNumber;
const int CallProcessRequest::kTerminalsFieldNumber;
const int CallProcessRequest::kChanneltypeFieldNumber;
const int CallProcessRequest::kTransflagFieldNumber;
const int CallProcessRequest::kCallerFieldNumber;
const int CallProcessRequest::kCalleeFieldNumber;
const int CallProcessRequest::kThirdFieldNumber;
const int CallProcessRequest::kStarttimeFieldNumber;
const int CallProcessRequest::kEndtimeFieldNumber;
const int CallProcessRequest::kRecogflagFieldNumber;
const int CallProcessRequest::kMethodFieldNumber;
const int CallProcessRequest::kCallerappendixFieldNumber;
const int CallProcessRequest::kCalleeappendixFieldNumber;
const int CallProcessRequest::kThirdappendixFieldNumber;
const int CallProcessRequest::kPriorityFieldNumber;
const int CallProcessRequest::kSyscodeFieldNumber;
const int CallProcessRequest::kIsimportFieldNumber;
const int CallProcessRequest::kVoicefilesFieldNumber;
#endif  // !_MSC_VER

CallProcessRequest::CallProcessRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallProcessRequest::InitAsDefaultInstance() {
  callerappendix_ = const_cast< ::PBMidLayer::PhoneNumber*>(&::PBMidLayer::PhoneNumber::default_instance());
  calleeappendix_ = const_cast< ::PBMidLayer::PhoneNumber*>(&::PBMidLayer::PhoneNumber::default_instance());
  thirdappendix_ = const_cast< ::PBMidLayer::PhoneNumber*>(&::PBMidLayer::PhoneNumber::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

CallProcessRequest::CallProcessRequest(const CallProcessRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallProcessRequest::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  terminals_ = 0;
  channeltype_ = 0;
  transflag_ = 2;
  caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  third_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  recogflag_ = 7u;
  method_ = 1;
  callerappendix_ = NULL;
  calleeappendix_ = NULL;
  thirdappendix_ = NULL;
  priority_ = 2;
  syscode_ = NULL;
  isimport_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallProcessRequest::~CallProcessRequest() {
  SharedDtor();
}

void CallProcessRequest::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    delete caller_;
  }
  if (callee_ != &::google::protobuf::internal::kEmptyString) {
    delete callee_;
  }
  if (third_ != &::google::protobuf::internal::kEmptyString) {
    delete third_;
  }
  if (this != default_instance_) {
    delete callerappendix_;
    delete calleeappendix_;
    delete thirdappendix_;
    delete syscode_;
  }
}

void CallProcessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallProcessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallProcessRequest_descriptor_;
}

const CallProcessRequest& CallProcessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

CallProcessRequest* CallProcessRequest::default_instance_ = NULL;

CallProcessRequest* CallProcessRequest::New() const {
  return new CallProcessRequest;
}

void CallProcessRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    flag_ = 0;
    terminals_ = 0;
    channeltype_ = 0;
    transflag_ = 2;
    if (has_caller()) {
      if (caller_ != &::google::protobuf::internal::kEmptyString) {
        caller_->clear();
      }
    }
    if (has_callee()) {
      if (callee_ != &::google::protobuf::internal::kEmptyString) {
        callee_->clear();
      }
    }
    if (has_third()) {
      if (third_ != &::google::protobuf::internal::kEmptyString) {
        third_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starttime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    recogflag_ = 7u;
    method_ = 1;
    if (has_callerappendix()) {
      if (callerappendix_ != NULL) callerappendix_->::PBMidLayer::PhoneNumber::Clear();
    }
    if (has_calleeappendix()) {
      if (calleeappendix_ != NULL) calleeappendix_->::PBMidLayer::PhoneNumber::Clear();
    }
    if (has_thirdappendix()) {
      if (thirdappendix_ != NULL) thirdappendix_->::PBMidLayer::PhoneNumber::Clear();
    }
    priority_ = 2;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    isimport_ = false;
  }
  voicefiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallProcessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required .PBMidLayer.AudioRecordMode flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioRecordMode_IsValid(value)) {
            set_flag(static_cast< ::PBMidLayer::AudioRecordMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_terminals;
        break;
      }

      // required int32 terminals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terminals_)));
          set_has_terminals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channeltype;
        break;
      }

      // required .PBMidLayer.AudioChannelType channeltype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channeltype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioChannelType_IsValid(value)) {
            set_channeltype(static_cast< ::PBMidLayer::AudioChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_transflag;
        break;
      }

      // required .PBMidLayer.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transflag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioTransFlag_IsValid(value)) {
            set_transflag(static_cast< ::PBMidLayer::AudioTransFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_caller;
        break;
      }

      // optional string caller = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caller().data(), this->caller().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_callee;
        break;
      }

      // optional string callee = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callee().data(), this->callee().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_third;
        break;
      }

      // optional string third = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_third:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_third()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->third().data(), this->third().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_recogflag;
        break;
      }

      // optional uint32 recogflag = 11 [default = 7];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recogflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recogflag_)));
          set_has_recogflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_method;
        break;
      }

      // optional .PBMidLayer.FileAcquireMethod method = 12 [default = FAM_URL];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::FileAcquireMethod_IsValid(value)) {
            set_method(static_cast< ::PBMidLayer::FileAcquireMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_callerappendix;
        break;
      }

      // optional .PBMidLayer.PhoneNumber callerappendix = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callerappendix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callerappendix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_calleeappendix;
        break;
      }

      // optional .PBMidLayer.PhoneNumber calleeappendix = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calleeappendix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calleeappendix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_thirdappendix;
        break;
      }

      // optional .PBMidLayer.PhoneNumber thirdappendix = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thirdappendix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thirdappendix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_priority;
        break;
      }

      // optional .PBMidLayer.PriorityType priority = 16 [default = PT_Normal];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::PriorityType_IsValid(value)) {
            set_priority(static_cast< ::PBMidLayer::PriorityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isimport;
        break;
      }

      // optional bool isimport = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isimport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isimport_)));
          set_has_isimport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_voicefiles;
        break;
      }

      // repeated .PBMidLayer.FileLocationNotify voicefiles = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voicefiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_voicefiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_voicefiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallProcessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBMidLayer.AudioRecordMode flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->flag(), output);
  }

  // required int32 terminals = 3;
  if (has_terminals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->terminals(), output);
  }

  // required .PBMidLayer.AudioChannelType channeltype = 4;
  if (has_channeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channeltype(), output);
  }

  // required .PBMidLayer.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
  if (has_transflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->transflag(), output);
  }

  // optional string caller = 6;
  if (has_caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->caller(), output);
  }

  // optional string callee = 7;
  if (has_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->callee(), output);
  }

  // optional string third = 8;
  if (has_third()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->third().data(), this->third().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->third(), output);
  }

  // optional uint64 starttime = 9;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->starttime(), output);
  }

  // optional uint64 endtime = 10;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->endtime(), output);
  }

  // optional uint32 recogflag = 11 [default = 7];
  if (has_recogflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->recogflag(), output);
  }

  // optional .PBMidLayer.FileAcquireMethod method = 12 [default = FAM_URL];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->method(), output);
  }

  // optional .PBMidLayer.PhoneNumber callerappendix = 13;
  if (has_callerappendix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->callerappendix(), output);
  }

  // optional .PBMidLayer.PhoneNumber calleeappendix = 14;
  if (has_calleeappendix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->calleeappendix(), output);
  }

  // optional .PBMidLayer.PhoneNumber thirdappendix = 15;
  if (has_thirdappendix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->thirdappendix(), output);
  }

  // optional .PBMidLayer.PriorityType priority = 16 [default = PT_Normal];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->priority(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 17;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->syscode(), output);
  }

  // optional bool isimport = 18;
  if (has_isimport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isimport(), output);
  }

  // repeated .PBMidLayer.FileLocationNotify voicefiles = 19;
  for (int i = 0; i < this->voicefiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->voicefiles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallProcessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBMidLayer.AudioRecordMode flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->flag(), target);
  }

  // required int32 terminals = 3;
  if (has_terminals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->terminals(), target);
  }

  // required .PBMidLayer.AudioChannelType channeltype = 4;
  if (has_channeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channeltype(), target);
  }

  // required .PBMidLayer.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
  if (has_transflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->transflag(), target);
  }

  // optional string caller = 6;
  if (has_caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->caller(), target);
  }

  // optional string callee = 7;
  if (has_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->callee(), target);
  }

  // optional string third = 8;
  if (has_third()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->third().data(), this->third().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->third(), target);
  }

  // optional uint64 starttime = 9;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->starttime(), target);
  }

  // optional uint64 endtime = 10;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->endtime(), target);
  }

  // optional uint32 recogflag = 11 [default = 7];
  if (has_recogflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->recogflag(), target);
  }

  // optional .PBMidLayer.FileAcquireMethod method = 12 [default = FAM_URL];
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->method(), target);
  }

  // optional .PBMidLayer.PhoneNumber callerappendix = 13;
  if (has_callerappendix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->callerappendix(), target);
  }

  // optional .PBMidLayer.PhoneNumber calleeappendix = 14;
  if (has_calleeappendix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->calleeappendix(), target);
  }

  // optional .PBMidLayer.PhoneNumber thirdappendix = 15;
  if (has_thirdappendix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->thirdappendix(), target);
  }

  // optional .PBMidLayer.PriorityType priority = 16 [default = PT_Normal];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->priority(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 17;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->syscode(), target);
  }

  // optional bool isimport = 18;
  if (has_isimport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isimport(), target);
  }

  // repeated .PBMidLayer.FileLocationNotify voicefiles = 19;
  for (int i = 0; i < this->voicefiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->voicefiles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallProcessRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBMidLayer.AudioRecordMode flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // required int32 terminals = 3;
    if (has_terminals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terminals());
    }

    // required .PBMidLayer.AudioChannelType channeltype = 4;
    if (has_channeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeltype());
    }

    // required .PBMidLayer.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
    if (has_transflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transflag());
    }

    // optional string caller = 6;
    if (has_caller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caller());
    }

    // optional string callee = 7;
    if (has_callee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callee());
    }

    // optional string third = 8;
    if (has_third()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->third());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 starttime = 9;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 10;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 recogflag = 11 [default = 7];
    if (has_recogflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recogflag());
    }

    // optional .PBMidLayer.FileAcquireMethod method = 12 [default = FAM_URL];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional .PBMidLayer.PhoneNumber callerappendix = 13;
    if (has_callerappendix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callerappendix());
    }

    // optional .PBMidLayer.PhoneNumber calleeappendix = 14;
    if (has_calleeappendix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calleeappendix());
    }

    // optional .PBMidLayer.PhoneNumber thirdappendix = 15;
    if (has_thirdappendix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thirdappendix());
    }

    // optional .PBMidLayer.PriorityType priority = 16 [default = PT_Normal];
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBMidLayer.SystemCode syscode = 17;
    if (has_syscode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // optional bool isimport = 18;
    if (has_isimport()) {
      total_size += 2 + 1;
    }

  }
  // repeated .PBMidLayer.FileLocationNotify voicefiles = 19;
  total_size += 2 * this->voicefiles_size();
  for (int i = 0; i < this->voicefiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->voicefiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallProcessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallProcessRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallProcessRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallProcessRequest::MergeFrom(const CallProcessRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  voicefiles_.MergeFrom(from.voicefiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_terminals()) {
      set_terminals(from.terminals());
    }
    if (from.has_channeltype()) {
      set_channeltype(from.channeltype());
    }
    if (from.has_transflag()) {
      set_transflag(from.transflag());
    }
    if (from.has_caller()) {
      set_caller(from.caller());
    }
    if (from.has_callee()) {
      set_callee(from.callee());
    }
    if (from.has_third()) {
      set_third(from.third());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_recogflag()) {
      set_recogflag(from.recogflag());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_callerappendix()) {
      mutable_callerappendix()->::PBMidLayer::PhoneNumber::MergeFrom(from.callerappendix());
    }
    if (from.has_calleeappendix()) {
      mutable_calleeappendix()->::PBMidLayer::PhoneNumber::MergeFrom(from.calleeappendix());
    }
    if (from.has_thirdappendix()) {
      mutable_thirdappendix()->::PBMidLayer::PhoneNumber::MergeFrom(from.thirdappendix());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_isimport()) {
      set_isimport(from.isimport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallProcessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallProcessRequest::CopyFrom(const CallProcessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallProcessRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_callerappendix()) {
    if (!this->callerappendix().IsInitialized()) return false;
  }
  if (has_calleeappendix()) {
    if (!this->calleeappendix().IsInitialized()) return false;
  }
  if (has_thirdappendix()) {
    if (!this->thirdappendix().IsInitialized()) return false;
  }
  for (int i = 0; i < voicefiles_size(); i++) {
    if (!this->voicefiles(i).IsInitialized()) return false;
  }
  return true;
}

void CallProcessRequest::Swap(CallProcessRequest* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(flag_, other->flag_);
    std::swap(terminals_, other->terminals_);
    std::swap(channeltype_, other->channeltype_);
    std::swap(transflag_, other->transflag_);
    std::swap(caller_, other->caller_);
    std::swap(callee_, other->callee_);
    std::swap(third_, other->third_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(recogflag_, other->recogflag_);
    std::swap(method_, other->method_);
    std::swap(callerappendix_, other->callerappendix_);
    std::swap(calleeappendix_, other->calleeappendix_);
    std::swap(thirdappendix_, other->thirdappendix_);
    std::swap(priority_, other->priority_);
    std::swap(syscode_, other->syscode_);
    std::swap(isimport_, other->isimport_);
    voicefiles_.Swap(&other->voicefiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallProcessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallProcessRequest_descriptor_;
  metadata.reflection = CallProcessRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallProcessResponse::kCallidFieldNumber;
const int CallProcessResponse::kStatusFieldNumber;
const int CallProcessResponse::kFiletagFieldNumber;
const int CallProcessResponse::kRecotypeFieldNumber;
const int CallProcessResponse::kCountFieldNumber;
const int CallProcessResponse::kPrelistFieldNumber;
const int CallProcessResponse::kSpeakerlistFieldNumber;
const int CallProcessResponse::kKeywordlistFieldNumber;
const int CallProcessResponse::kTranslistFieldNumber;
const int CallProcessResponse::kVadFieldNumber;
const int CallProcessResponse::kSpeechsegFieldNumber;
const int CallProcessResponse::kDtmfsFieldNumber;
const int CallProcessResponse::kResultflagFieldNumber;
const int CallProcessResponse::kStarttimeFieldNumber;
const int CallProcessResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

CallProcessResponse::CallProcessResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallProcessResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  prelist_ = const_cast< ::PBMidLayer::PreprocessResult*>(&::PBMidLayer::PreprocessResult::default_instance());
  speakerlist_ = const_cast< ::PBMidLayer::SpeakerResult*>(&::PBMidLayer::SpeakerResult::default_instance());
  keywordlist_ = const_cast< ::PBMidLayer::KeywordResult*>(&::PBMidLayer::KeywordResult::default_instance());
  translist_ = const_cast< ::PBMidLayer::TranscriptResult*>(&::PBMidLayer::TranscriptResult::default_instance());
  vad_ = const_cast< ::PBMidLayer::VADResult*>(&::PBMidLayer::VADResult::default_instance());
  speechseg_ = const_cast< ::PBMidLayer::SpeechSegResult*>(&::PBMidLayer::SpeechSegResult::default_instance());
  dtmfs_ = const_cast< ::PBMidLayer::DTMFResult*>(&::PBMidLayer::DTMFResult::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

CallProcessResponse::CallProcessResponse(const CallProcessResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallProcessResponse::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  filetag_ = 0;
  recotype_ = 0;
  count_ = 0u;
  prelist_ = NULL;
  speakerlist_ = NULL;
  keywordlist_ = NULL;
  translist_ = NULL;
  vad_ = NULL;
  speechseg_ = NULL;
  dtmfs_ = NULL;
  resultflag_ = 7u;
  starttime_ = GOOGLE_ULONGLONG(0);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallProcessResponse::~CallProcessResponse() {
  SharedDtor();
}

void CallProcessResponse::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
    delete status_;
    delete prelist_;
    delete speakerlist_;
    delete keywordlist_;
    delete translist_;
    delete vad_;
    delete speechseg_;
    delete dtmfs_;
    delete syscode_;
  }
}

void CallProcessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallProcessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallProcessResponse_descriptor_;
}

const CallProcessResponse& CallProcessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

CallProcessResponse* CallProcessResponse::default_instance_ = NULL;

CallProcessResponse* CallProcessResponse::New() const {
  return new CallProcessResponse;
}

void CallProcessResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    filetag_ = 0;
    recotype_ = 0;
    count_ = 0u;
    if (has_prelist()) {
      if (prelist_ != NULL) prelist_->::PBMidLayer::PreprocessResult::Clear();
    }
    if (has_speakerlist()) {
      if (speakerlist_ != NULL) speakerlist_->::PBMidLayer::SpeakerResult::Clear();
    }
    if (has_keywordlist()) {
      if (keywordlist_ != NULL) keywordlist_->::PBMidLayer::KeywordResult::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_translist()) {
      if (translist_ != NULL) translist_->::PBMidLayer::TranscriptResult::Clear();
    }
    if (has_vad()) {
      if (vad_ != NULL) vad_->::PBMidLayer::VADResult::Clear();
    }
    if (has_speechseg()) {
      if (speechseg_ != NULL) speechseg_->::PBMidLayer::SpeechSegResult::Clear();
    }
    if (has_dtmfs()) {
      if (dtmfs_ != NULL) dtmfs_->::PBMidLayer::DTMFResult::Clear();
    }
    resultflag_ = 7u;
    starttime_ = GOOGLE_ULONGLONG(0);
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallProcessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filetag;
        break;
      }

      // required .PBMidLayer.AudioFileTag filetag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recotype;
        break;
      }

      // optional .PBMidLayer.RecognitionType recotype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recotype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::RecognitionType_IsValid(value)) {
            set_recotype(static_cast< ::PBMidLayer::RecognitionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prelist;
        break;
      }

      // optional .PBMidLayer.PreprocessResult prelist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_speakerlist;
        break;
      }

      // optional .PBMidLayer.SpeakerResult speakerlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speakerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speakerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_keywordlist;
        break;
      }

      // optional .PBMidLayer.KeywordResult keywordlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywordlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keywordlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_translist;
        break;
      }

      // optional .PBMidLayer.TranscriptResult translist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_vad;
        break;
      }

      // optional .PBMidLayer.VADResult vad = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_speechseg;
        break;
      }

      // optional .PBMidLayer.SpeechSegResult speechseg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechseg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speechseg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dtmfs;
        break;
      }

      // optional .PBMidLayer.DTMFResult dtmfs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtmfs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dtmfs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_resultflag;
        break;
      }

      // optional uint32 resultflag = 13 [default = 7];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultflag_)));
          set_has_resultflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallProcessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  // required .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filetag(), output);
  }

  // optional .PBMidLayer.RecognitionType recotype = 4;
  if (has_recotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->recotype(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional .PBMidLayer.PreprocessResult prelist = 6;
  if (has_prelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->prelist(), output);
  }

  // optional .PBMidLayer.SpeakerResult speakerlist = 7;
  if (has_speakerlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->speakerlist(), output);
  }

  // optional .PBMidLayer.KeywordResult keywordlist = 8;
  if (has_keywordlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->keywordlist(), output);
  }

  // optional .PBMidLayer.TranscriptResult translist = 9;
  if (has_translist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->translist(), output);
  }

  // optional .PBMidLayer.VADResult vad = 10;
  if (has_vad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vad(), output);
  }

  // optional .PBMidLayer.SpeechSegResult speechseg = 11;
  if (has_speechseg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->speechseg(), output);
  }

  // optional .PBMidLayer.DTMFResult dtmfs = 12;
  if (has_dtmfs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dtmfs(), output);
  }

  // optional uint32 resultflag = 13 [default = 7];
  if (has_resultflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->resultflag(), output);
  }

  // optional uint64 starttime = 14;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->starttime(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 15;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallProcessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  // required .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filetag(), target);
  }

  // optional .PBMidLayer.RecognitionType recotype = 4;
  if (has_recotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->recotype(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional .PBMidLayer.PreprocessResult prelist = 6;
  if (has_prelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->prelist(), target);
  }

  // optional .PBMidLayer.SpeakerResult speakerlist = 7;
  if (has_speakerlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->speakerlist(), target);
  }

  // optional .PBMidLayer.KeywordResult keywordlist = 8;
  if (has_keywordlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->keywordlist(), target);
  }

  // optional .PBMidLayer.TranscriptResult translist = 9;
  if (has_translist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->translist(), target);
  }

  // optional .PBMidLayer.VADResult vad = 10;
  if (has_vad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vad(), target);
  }

  // optional .PBMidLayer.SpeechSegResult speechseg = 11;
  if (has_speechseg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->speechseg(), target);
  }

  // optional .PBMidLayer.DTMFResult dtmfs = 12;
  if (has_dtmfs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dtmfs(), target);
  }

  // optional uint32 resultflag = 13 [default = 7];
  if (has_resultflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->resultflag(), target);
  }

  // optional uint64 starttime = 14;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->starttime(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 15;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallProcessResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBMidLayer.OperationStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required .PBMidLayer.AudioFileTag filetag = 3;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

    // optional .PBMidLayer.RecognitionType recotype = 4;
    if (has_recotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recotype());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .PBMidLayer.PreprocessResult prelist = 6;
    if (has_prelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prelist());
    }

    // optional .PBMidLayer.SpeakerResult speakerlist = 7;
    if (has_speakerlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speakerlist());
    }

    // optional .PBMidLayer.KeywordResult keywordlist = 8;
    if (has_keywordlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keywordlist());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBMidLayer.TranscriptResult translist = 9;
    if (has_translist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translist());
    }

    // optional .PBMidLayer.VADResult vad = 10;
    if (has_vad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vad());
    }

    // optional .PBMidLayer.SpeechSegResult speechseg = 11;
    if (has_speechseg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speechseg());
    }

    // optional .PBMidLayer.DTMFResult dtmfs = 12;
    if (has_dtmfs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dtmfs());
    }

    // optional uint32 resultflag = 13 [default = 7];
    if (has_resultflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultflag());
    }

    // optional uint64 starttime = 14;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional .PBMidLayer.SystemCode syscode = 15;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallProcessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallProcessResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallProcessResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallProcessResponse::MergeFrom(const CallProcessResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
    if (from.has_recotype()) {
      set_recotype(from.recotype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_prelist()) {
      mutable_prelist()->::PBMidLayer::PreprocessResult::MergeFrom(from.prelist());
    }
    if (from.has_speakerlist()) {
      mutable_speakerlist()->::PBMidLayer::SpeakerResult::MergeFrom(from.speakerlist());
    }
    if (from.has_keywordlist()) {
      mutable_keywordlist()->::PBMidLayer::KeywordResult::MergeFrom(from.keywordlist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_translist()) {
      mutable_translist()->::PBMidLayer::TranscriptResult::MergeFrom(from.translist());
    }
    if (from.has_vad()) {
      mutable_vad()->::PBMidLayer::VADResult::MergeFrom(from.vad());
    }
    if (from.has_speechseg()) {
      mutable_speechseg()->::PBMidLayer::SpeechSegResult::MergeFrom(from.speechseg());
    }
    if (from.has_dtmfs()) {
      mutable_dtmfs()->::PBMidLayer::DTMFResult::MergeFrom(from.dtmfs());
    }
    if (from.has_resultflag()) {
      set_resultflag(from.resultflag());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallProcessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallProcessResponse::CopyFrom(const CallProcessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallProcessResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_prelist()) {
    if (!this->prelist().IsInitialized()) return false;
  }
  if (has_speakerlist()) {
    if (!this->speakerlist().IsInitialized()) return false;
  }
  if (has_keywordlist()) {
    if (!this->keywordlist().IsInitialized()) return false;
  }
  if (has_translist()) {
    if (!this->translist().IsInitialized()) return false;
  }
  if (has_vad()) {
    if (!this->vad().IsInitialized()) return false;
  }
  if (has_speechseg()) {
    if (!this->speechseg().IsInitialized()) return false;
  }
  if (has_dtmfs()) {
    if (!this->dtmfs().IsInitialized()) return false;
  }
  return true;
}

void CallProcessResponse::Swap(CallProcessResponse* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(status_, other->status_);
    std::swap(filetag_, other->filetag_);
    std::swap(recotype_, other->recotype_);
    std::swap(count_, other->count_);
    std::swap(prelist_, other->prelist_);
    std::swap(speakerlist_, other->speakerlist_);
    std::swap(keywordlist_, other->keywordlist_);
    std::swap(translist_, other->translist_);
    std::swap(vad_, other->vad_);
    std::swap(speechseg_, other->speechseg_);
    std::swap(dtmfs_, other->dtmfs_);
    std::swap(resultflag_, other->resultflag_);
    std::swap(starttime_, other->starttime_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallProcessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallProcessResponse_descriptor_;
  metadata.reflection = CallProcessResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistorySearchRequest::kTaskidFieldNumber;
const int HistorySearchRequest::kPackageseqFieldNumber;
const int HistorySearchRequest::kEndflagFieldNumber;
const int HistorySearchRequest::kRecordsFieldNumber;
const int HistorySearchRequest::kAttributeFieldNumber;
const int HistorySearchRequest::kCalllistFieldNumber;
const int HistorySearchRequest::kSyscodeFieldNumber;
#endif  // !_MSC_VER

HistorySearchRequest::HistorySearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistorySearchRequest::InitAsDefaultInstance() {
  attribute_ = const_cast< ::PBMidLayer::TaskAttribute*>(&::PBMidLayer::TaskAttribute::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

HistorySearchRequest::HistorySearchRequest(const HistorySearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistorySearchRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packageseq_ = 0;
  endflag_ = 0;
  records_ = 0;
  attribute_ = NULL;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistorySearchRequest::~HistorySearchRequest() {
  SharedDtor();
}

void HistorySearchRequest::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete attribute_;
    delete syscode_;
  }
}

void HistorySearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistorySearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistorySearchRequest_descriptor_;
}

const HistorySearchRequest& HistorySearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

HistorySearchRequest* HistorySearchRequest::default_instance_ = NULL;

HistorySearchRequest* HistorySearchRequest::New() const {
  return new HistorySearchRequest;
}

void HistorySearchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    packageseq_ = 0;
    endflag_ = 0;
    records_ = 0;
    if (has_attribute()) {
      if (attribute_ != NULL) attribute_->::PBMidLayer::TaskAttribute::Clear();
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  calllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistorySearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packageseq;
        break;
      }

      // required int32 packageseq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packageseq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packageseq_)));
          set_has_packageseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endflag;
        break;
      }

      // required int32 endflag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endflag_)));
          set_has_endflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_records;
        break;
      }

      // required int32 records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &records_)));
          set_has_records();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }

      // optional .PBMidLayer.TaskAttribute attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_calllist;
        break;
      }

      // repeated string calllist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_calllist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->calllist(this->calllist_size() - 1).data(),
            this->calllist(this->calllist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_calllist;
        if (input->ExpectTag(58)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistorySearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required int32 packageseq = 2;
  if (has_packageseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packageseq(), output);
  }

  // required int32 endflag = 3;
  if (has_endflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endflag(), output);
  }

  // required int32 records = 4;
  if (has_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->records(), output);
  }

  // optional .PBMidLayer.TaskAttribute attribute = 5;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(), output);
  }

  // repeated string calllist = 6;
  for (int i = 0; i < this->calllist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->calllist(i).data(), this->calllist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->calllist(i), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistorySearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required int32 packageseq = 2;
  if (has_packageseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packageseq(), target);
  }

  // required int32 endflag = 3;
  if (has_endflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endflag(), target);
  }

  // required int32 records = 4;
  if (has_records()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->records(), target);
  }

  // optional .PBMidLayer.TaskAttribute attribute = 5;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(), target);
  }

  // repeated string calllist = 6;
  for (int i = 0; i < this->calllist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->calllist(i).data(), this->calllist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->calllist(i), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistorySearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required int32 packageseq = 2;
    if (has_packageseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packageseq());
    }

    // required int32 endflag = 3;
    if (has_endflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endflag());
    }

    // required int32 records = 4;
    if (has_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->records());
    }

    // optional .PBMidLayer.TaskAttribute attribute = 5;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attribute());
    }

    // optional .PBMidLayer.SystemCode syscode = 7;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  // repeated string calllist = 6;
  total_size += 1 * this->calllist_size();
  for (int i = 0; i < this->calllist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->calllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistorySearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistorySearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistorySearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistorySearchRequest::MergeFrom(const HistorySearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  calllist_.MergeFrom(from.calllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_packageseq()) {
      set_packageseq(from.packageseq());
    }
    if (from.has_endflag()) {
      set_endflag(from.endflag());
    }
    if (from.has_records()) {
      set_records(from.records());
    }
    if (from.has_attribute()) {
      mutable_attribute()->::PBMidLayer::TaskAttribute::MergeFrom(from.attribute());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistorySearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistorySearchRequest::CopyFrom(const HistorySearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_attribute()) {
    if (!this->attribute().IsInitialized()) return false;
  }
  return true;
}

void HistorySearchRequest::Swap(HistorySearchRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(packageseq_, other->packageseq_);
    std::swap(endflag_, other->endflag_);
    std::swap(records_, other->records_);
    std::swap(attribute_, other->attribute_);
    calllist_.Swap(&other->calllist_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistorySearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistorySearchRequest_descriptor_;
  metadata.reflection = HistorySearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskAttribute::kTotalFieldNumber;
const int TaskAttribute::kPriorityFieldNumber;
const int TaskAttribute::kConditionFieldNumber;
const int TaskAttribute::kObjectidsFieldNumber;
const int TaskAttribute::kLanguagenameFieldNumber;
const int TaskAttribute::kKeywordsFieldNumber;
const int TaskAttribute::kVoiceFieldNumber;
#endif  // !_MSC_VER

TaskAttribute::TaskAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskAttribute::InitAsDefaultInstance() {
}

TaskAttribute::TaskAttribute(const TaskAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskAttribute::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0u;
  priority_ = 0;
  condition_ = 0;
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskAttribute::~TaskAttribute() {
  SharedDtor();
}

void TaskAttribute::SharedDtor() {
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (voice_ != &::google::protobuf::internal::kEmptyString) {
    delete voice_;
  }
  if (this != default_instance_) {
  }
}

void TaskAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskAttribute_descriptor_;
}

const TaskAttribute& TaskAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

TaskAttribute* TaskAttribute::default_instance_ = NULL;

TaskAttribute* TaskAttribute::New() const {
  return new TaskAttribute;
}

void TaskAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0u;
    priority_ = 0;
    condition_ = 0;
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::kEmptyString) {
        voice_->clear();
      }
    }
  }
  objectids_.Clear();
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_priority;
        break;
      }

      // required .PBMidLayer.PriorityType priority = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::PriorityType_IsValid(value)) {
            set_priority(static_cast< ::PBMidLayer::PriorityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // required .PBMidLayer.SearchCondition condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SearchCondition_IsValid(value)) {
            set_condition(static_cast< ::PBMidLayer::SearchCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_objectids;
        break;
      }

      // repeated string objectids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_objectids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectids(this->objectids_size() - 1).data(),
            this->objectids(this->objectids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_objectids;
        if (input->ExpectTag(42)) goto parse_languagename;
        break;
      }

      // optional string languagename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keywords;
        if (input->ExpectTag(58)) goto parse_voice;
        break;
      }

      // optional bytes voice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total(), output);
  }

  // required .PBMidLayer.PriorityType priority = 2;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->priority(), output);
  }

  // required .PBMidLayer.SearchCondition condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->condition(), output);
  }

  // repeated string objectids = 4;
  for (int i = 0; i < this->objectids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->objectids(i).data(), this->objectids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->objectids(i), output);
  }

  // optional string languagename = 5;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->languagename(), output);
  }

  // repeated string keywords = 6;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->keywords(i), output);
  }

  // optional bytes voice = 7;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->voice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total(), target);
  }

  // required .PBMidLayer.PriorityType priority = 2;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->priority(), target);
  }

  // required .PBMidLayer.SearchCondition condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->condition(), target);
  }

  // repeated string objectids = 4;
  for (int i = 0; i < this->objectids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectids(i).data(), this->objectids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->objectids(i), target);
  }

  // optional string languagename = 5;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->languagename(), target);
  }

  // repeated string keywords = 6;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->keywords(i), target);
  }

  // optional bytes voice = 7;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->voice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // required .PBMidLayer.PriorityType priority = 2;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

    // required .PBMidLayer.SearchCondition condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->condition());
    }

    // optional string languagename = 5;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // optional bytes voice = 7;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

  }
  // repeated string objectids = 4;
  total_size += 1 * this->objectids_size();
  for (int i = 0; i < this->objectids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->objectids(i));
  }

  // repeated string keywords = 6;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskAttribute::MergeFrom(const TaskAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectids_.MergeFrom(from.objectids_);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskAttribute::CopyFrom(const TaskAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TaskAttribute::Swap(TaskAttribute* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(priority_, other->priority_);
    std::swap(condition_, other->condition_);
    objectids_.Swap(&other->objectids_);
    std::swap(languagename_, other->languagename_);
    keywords_.Swap(&other->keywords_);
    std::swap(voice_, other->voice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskAttribute_descriptor_;
  metadata.reflection = TaskAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistorySearchResponse::kTaskidFieldNumber;
const int HistorySearchResponse::kStatusFieldNumber;
const int HistorySearchResponse::kConditionFieldNumber;
const int HistorySearchResponse::kCountFieldNumber;
const int HistorySearchResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

HistorySearchResponse::HistorySearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistorySearchResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

HistorySearchResponse::HistorySearchResponse(const HistorySearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistorySearchResponse::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  condition_ = 0;
  count_ = 0u;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistorySearchResponse::~HistorySearchResponse() {
  SharedDtor();
}

void HistorySearchResponse::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void HistorySearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistorySearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistorySearchResponse_descriptor_;
}

const HistorySearchResponse& HistorySearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

HistorySearchResponse* HistorySearchResponse::default_instance_ = NULL;

HistorySearchResponse* HistorySearchResponse::New() const {
  return new HistorySearchResponse;
}

void HistorySearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    condition_ = 0;
    count_ = 0u;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistorySearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // required .PBMidLayer.SearchCondition condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SearchCondition_IsValid(value)) {
            set_condition(static_cast< ::PBMidLayer::SearchCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistorySearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  // required .PBMidLayer.SearchCondition condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->condition(), output);
  }

  // required uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistorySearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  // required .PBMidLayer.SearchCondition condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->condition(), target);
  }

  // required uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistorySearchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.OperationStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required .PBMidLayer.SearchCondition condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->condition());
    }

    // required uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .PBMidLayer.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistorySearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistorySearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistorySearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistorySearchResponse::MergeFrom(const HistorySearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistorySearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistorySearchResponse::CopyFrom(const HistorySearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void HistorySearchResponse::Swap(HistorySearchResponse* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(status_, other->status_);
    std::swap(condition_, other->condition_);
    std::swap(count_, other->count_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistorySearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistorySearchResponse_descriptor_;
  metadata.reflection = HistorySearchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryTransRequest::kTaskidFieldNumber;
const int HistoryTransRequest::kConditionFieldNumber;
const int HistoryTransRequest::kBeginFieldNumber;
const int HistoryTransRequest::kEndFieldNumber;
const int HistoryTransRequest::kSyscodeFieldNumber;
#endif  // !_MSC_VER

HistoryTransRequest::HistoryTransRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryTransRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

HistoryTransRequest::HistoryTransRequest(const HistoryTransRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryTransRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  condition_ = 0;
  begin_ = 0u;
  end_ = 0u;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryTransRequest::~HistoryTransRequest() {
  SharedDtor();
}

void HistoryTransRequest::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void HistoryTransRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryTransRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryTransRequest_descriptor_;
}

const HistoryTransRequest& HistoryTransRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

HistoryTransRequest* HistoryTransRequest::default_instance_ = NULL;

HistoryTransRequest* HistoryTransRequest::New() const {
  return new HistoryTransRequest;
}

void HistoryTransRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    condition_ = 0;
    begin_ = 0u;
    end_ = 0u;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryTransRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_condition;
        break;
      }

      // required .PBMidLayer.SearchCondition condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SearchCondition_IsValid(value)) {
            set_condition(static_cast< ::PBMidLayer::SearchCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin;
        break;
      }

      // required uint32 begin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }

      // required uint32 end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryTransRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.SearchCondition condition = 2;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->condition(), output);
  }

  // required uint32 begin = 3;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin(), output);
  }

  // required uint32 end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryTransRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.SearchCondition condition = 2;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->condition(), target);
  }

  // required uint32 begin = 3;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin(), target);
  }

  // required uint32 end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryTransRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.SearchCondition condition = 2;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->condition());
    }

    // required uint32 begin = 3;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin());
    }

    // required uint32 end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

    // optional .PBMidLayer.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryTransRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryTransRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryTransRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryTransRequest::MergeFrom(const HistoryTransRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryTransRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryTransRequest::CopyFrom(const HistoryTransRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryTransRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HistoryTransRequest::Swap(HistoryTransRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(condition_, other->condition_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryTransRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryTransRequest_descriptor_;
  metadata.reflection = HistoryTransRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryTransResponse::kTaskidFieldNumber;
const int HistoryTransResponse::kStatusFieldNumber;
const int HistoryTransResponse::kCountFieldNumber;
const int HistoryTransResponse::kPrelistFieldNumber;
const int HistoryTransResponse::kSpeakerlistFieldNumber;
const int HistoryTransResponse::kKeywordlistFieldNumber;
const int HistoryTransResponse::kTranslistFieldNumber;
const int HistoryTransResponse::kVadFieldNumber;
const int HistoryTransResponse::kSpeechsegFieldNumber;
const int HistoryTransResponse::kDtmfsFieldNumber;
const int HistoryTransResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

HistoryTransResponse::HistoryTransResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryTransResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

HistoryTransResponse::HistoryTransResponse(const HistoryTransResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryTransResponse::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  count_ = 0u;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryTransResponse::~HistoryTransResponse() {
  SharedDtor();
}

void HistoryTransResponse::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void HistoryTransResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryTransResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryTransResponse_descriptor_;
}

const HistoryTransResponse& HistoryTransResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

HistoryTransResponse* HistoryTransResponse::default_instance_ = NULL;

HistoryTransResponse* HistoryTransResponse::New() const {
  return new HistoryTransResponse;
}

void HistoryTransResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    count_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  prelist_.Clear();
  speakerlist_.Clear();
  keywordlist_.Clear();
  translist_.Clear();
  vad_.Clear();
  speechseg_.Clear();
  dtmfs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryTransResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prelist;
        break;
      }

      // repeated .PBMidLayer.PreprocessResult prelist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prelist;
        if (input->ExpectTag(42)) goto parse_speakerlist;
        break;
      }

      // repeated .PBMidLayer.SpeakerResult speakerlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speakerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speakerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_speakerlist;
        if (input->ExpectTag(50)) goto parse_keywordlist;
        break;
      }

      // repeated .PBMidLayer.KeywordResult keywordlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywordlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keywordlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keywordlist;
        if (input->ExpectTag(58)) goto parse_translist;
        break;
      }

      // repeated .PBMidLayer.TranscriptResult translist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_translist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_translist;
        if (input->ExpectTag(66)) goto parse_vad;
        break;
      }

      // repeated .PBMidLayer.VADResult vad = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vad;
        if (input->ExpectTag(74)) goto parse_speechseg;
        break;
      }

      // repeated .PBMidLayer.SpeechSegResult speechseg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechseg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speechseg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_speechseg;
        if (input->ExpectTag(82)) goto parse_dtmfs;
        break;
      }

      // repeated .PBMidLayer.DTMFResult dtmfs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtmfs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dtmfs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dtmfs;
        if (input->ExpectTag(90)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryTransResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // repeated .PBMidLayer.PreprocessResult prelist = 4;
  for (int i = 0; i < this->prelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prelist(i), output);
  }

  // repeated .PBMidLayer.SpeakerResult speakerlist = 5;
  for (int i = 0; i < this->speakerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->speakerlist(i), output);
  }

  // repeated .PBMidLayer.KeywordResult keywordlist = 6;
  for (int i = 0; i < this->keywordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->keywordlist(i), output);
  }

  // repeated .PBMidLayer.TranscriptResult translist = 7;
  for (int i = 0; i < this->translist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->translist(i), output);
  }

  // repeated .PBMidLayer.VADResult vad = 8;
  for (int i = 0; i < this->vad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vad(i), output);
  }

  // repeated .PBMidLayer.SpeechSegResult speechseg = 9;
  for (int i = 0; i < this->speechseg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->speechseg(i), output);
  }

  // repeated .PBMidLayer.DTMFResult dtmfs = 10;
  for (int i = 0; i < this->dtmfs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->dtmfs(i), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 11;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryTransResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // repeated .PBMidLayer.PreprocessResult prelist = 4;
  for (int i = 0; i < this->prelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prelist(i), target);
  }

  // repeated .PBMidLayer.SpeakerResult speakerlist = 5;
  for (int i = 0; i < this->speakerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->speakerlist(i), target);
  }

  // repeated .PBMidLayer.KeywordResult keywordlist = 6;
  for (int i = 0; i < this->keywordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->keywordlist(i), target);
  }

  // repeated .PBMidLayer.TranscriptResult translist = 7;
  for (int i = 0; i < this->translist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->translist(i), target);
  }

  // repeated .PBMidLayer.VADResult vad = 8;
  for (int i = 0; i < this->vad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vad(i), target);
  }

  // repeated .PBMidLayer.SpeechSegResult speechseg = 9;
  for (int i = 0; i < this->speechseg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->speechseg(i), target);
  }

  // repeated .PBMidLayer.DTMFResult dtmfs = 10;
  for (int i = 0; i < this->dtmfs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->dtmfs(i), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 11;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryTransResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.OperationStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .PBMidLayer.SystemCode syscode = 11;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  // repeated .PBMidLayer.PreprocessResult prelist = 4;
  total_size += 1 * this->prelist_size();
  for (int i = 0; i < this->prelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prelist(i));
  }

  // repeated .PBMidLayer.SpeakerResult speakerlist = 5;
  total_size += 1 * this->speakerlist_size();
  for (int i = 0; i < this->speakerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speakerlist(i));
  }

  // repeated .PBMidLayer.KeywordResult keywordlist = 6;
  total_size += 1 * this->keywordlist_size();
  for (int i = 0; i < this->keywordlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keywordlist(i));
  }

  // repeated .PBMidLayer.TranscriptResult translist = 7;
  total_size += 1 * this->translist_size();
  for (int i = 0; i < this->translist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->translist(i));
  }

  // repeated .PBMidLayer.VADResult vad = 8;
  total_size += 1 * this->vad_size();
  for (int i = 0; i < this->vad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vad(i));
  }

  // repeated .PBMidLayer.SpeechSegResult speechseg = 9;
  total_size += 1 * this->speechseg_size();
  for (int i = 0; i < this->speechseg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speechseg(i));
  }

  // repeated .PBMidLayer.DTMFResult dtmfs = 10;
  total_size += 1 * this->dtmfs_size();
  for (int i = 0; i < this->dtmfs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dtmfs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryTransResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryTransResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryTransResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryTransResponse::MergeFrom(const HistoryTransResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  prelist_.MergeFrom(from.prelist_);
  speakerlist_.MergeFrom(from.speakerlist_);
  keywordlist_.MergeFrom(from.keywordlist_);
  translist_.MergeFrom(from.translist_);
  vad_.MergeFrom(from.vad_);
  speechseg_.MergeFrom(from.speechseg_);
  dtmfs_.MergeFrom(from.dtmfs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryTransResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryTransResponse::CopyFrom(const HistoryTransResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryTransResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < prelist_size(); i++) {
    if (!this->prelist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < speakerlist_size(); i++) {
    if (!this->speakerlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < keywordlist_size(); i++) {
    if (!this->keywordlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < translist_size(); i++) {
    if (!this->translist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vad_size(); i++) {
    if (!this->vad(i).IsInitialized()) return false;
  }
  for (int i = 0; i < speechseg_size(); i++) {
    if (!this->speechseg(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dtmfs_size(); i++) {
    if (!this->dtmfs(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryTransResponse::Swap(HistoryTransResponse* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(status_, other->status_);
    std::swap(count_, other->count_);
    prelist_.Swap(&other->prelist_);
    speakerlist_.Swap(&other->speakerlist_);
    keywordlist_.Swap(&other->keywordlist_);
    translist_.Swap(&other->translist_);
    vad_.Swap(&other->vad_);
    speechseg_.Swap(&other->speechseg_);
    dtmfs_.Swap(&other->dtmfs_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryTransResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryTransResponse_descriptor_;
  metadata.reflection = HistoryTransResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLocationNotify::kCallidFieldNumber;
const int FileLocationNotify::kFiletagFieldNumber;
const int FileLocationNotify::kPathFieldNumber;
const int FileLocationNotify::kCodeFieldNumber;
const int FileLocationNotify::kSyscodeFieldNumber;
#endif  // !_MSC_VER

FileLocationNotify::FileLocationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLocationNotify::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

FileLocationNotify::FileLocationNotify(const FileLocationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLocationNotify::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = 0;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLocationNotify::~FileLocationNotify() {
  SharedDtor();
}

void FileLocationNotify::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void FileLocationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLocationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLocationNotify_descriptor_;
}

const FileLocationNotify& FileLocationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

FileLocationNotify* FileLocationNotify::default_instance_ = NULL;

FileLocationNotify* FileLocationNotify::New() const {
  return new FileLocationNotify;
}

void FileLocationNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    code_ = 0;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLocationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filetag;
        break;
      }

      // required .PBMidLayer.AudioFileTag filetag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // required string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // required .PBMidLayer.AudioEncodingTag code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioEncodingTag_IsValid(value)) {
            set_code(static_cast< ::PBMidLayer::AudioEncodingTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLocationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetag(), output);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // required .PBMidLayer.AudioEncodingTag code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->code(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLocationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetag(), target);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // required .PBMidLayer.AudioEncodingTag code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->code(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLocationNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBMidLayer.AudioFileTag filetag = 2;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

    // required string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required .PBMidLayer.AudioEncodingTag code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional .PBMidLayer.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLocationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLocationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLocationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLocationNotify::MergeFrom(const FileLocationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLocationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLocationNotify::CopyFrom(const FileLocationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLocationNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FileLocationNotify::Swap(FileLocationNotify* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(path_, other->path_);
    std::swap(code_, other->code_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLocationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLocationNotify_descriptor_;
  metadata.reflection = FileLocationNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetQueryRequest::kTaskidFieldNumber;
const int TargetQueryRequest::kTargetFieldNumber;
const int TargetQueryRequest::kStarttimeFieldNumber;
const int TargetQueryRequest::kEndtimeFieldNumber;
const int TargetQueryRequest::kSyscodeFieldNumber;
#endif  // !_MSC_VER

TargetQueryRequest::TargetQueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetQueryRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

TargetQueryRequest::TargetQueryRequest(const TargetQueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetQueryRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetQueryRequest::~TargetQueryRequest() {
  SharedDtor();
}

void TargetQueryRequest::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void TargetQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetQueryRequest_descriptor_;
}

const TargetQueryRequest& TargetQueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

TargetQueryRequest* TargetQueryRequest::default_instance_ = NULL;

TargetQueryRequest* TargetQueryRequest::New() const {
  return new TargetQueryRequest;
}

void TargetQueryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    starttime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // required string target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // required uint64 starttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // required uint64 endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target(), output);
  }

  // required uint64 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->starttime(), output);
  }

  // required uint64 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->endtime(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetQueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // required uint64 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->starttime(), target);
  }

  // required uint64 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->endtime(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetQueryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required string target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // required uint64 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // required uint64 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional .PBMidLayer.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetQueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetQueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetQueryRequest::MergeFrom(const TargetQueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetQueryRequest::CopyFrom(const TargetQueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetQueryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TargetQueryRequest::Swap(TargetQueryRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(target_, other->target_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetQueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetQueryRequest_descriptor_;
  metadata.reflection = TargetQueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetQueryResponse::kTaskidFieldNumber;
const int TargetQueryResponse::kStatusFieldNumber;
const int TargetQueryResponse::kPackageseqFieldNumber;
const int TargetQueryResponse::kEndflagFieldNumber;
const int TargetQueryResponse::kRecordsFieldNumber;
const int TargetQueryResponse::kCalllistFieldNumber;
const int TargetQueryResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

TargetQueryResponse::TargetQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetQueryResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

TargetQueryResponse::TargetQueryResponse(const TargetQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  packageseq_ = 0;
  endflag_ = 0;
  records_ = 0;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetQueryResponse::~TargetQueryResponse() {
  SharedDtor();
}

void TargetQueryResponse::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void TargetQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetQueryResponse_descriptor_;
}

const TargetQueryResponse& TargetQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

TargetQueryResponse* TargetQueryResponse::default_instance_ = NULL;

TargetQueryResponse* TargetQueryResponse::New() const {
  return new TargetQueryResponse;
}

void TargetQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    packageseq_ = 0;
    endflag_ = 0;
    records_ = 0;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  calllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_packageseq;
        break;
      }

      // optional int32 packageseq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packageseq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packageseq_)));
          set_has_packageseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endflag;
        break;
      }

      // optional int32 endflag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endflag_)));
          set_has_endflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_records;
        break;
      }

      // optional int32 records = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &records_)));
          set_has_records();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_calllist;
        break;
      }

      // repeated string calllist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_calllist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->calllist(this->calllist_size() - 1).data(),
            this->calllist(this->calllist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_calllist;
        if (input->ExpectTag(58)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  // optional int32 packageseq = 3;
  if (has_packageseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->packageseq(), output);
  }

  // optional int32 endflag = 4;
  if (has_endflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endflag(), output);
  }

  // optional int32 records = 5;
  if (has_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->records(), output);
  }

  // repeated string calllist = 6;
  for (int i = 0; i < this->calllist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->calllist(i).data(), this->calllist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->calllist(i), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.OperationStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  // optional int32 packageseq = 3;
  if (has_packageseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->packageseq(), target);
  }

  // optional int32 endflag = 4;
  if (has_endflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endflag(), target);
  }

  // optional int32 records = 5;
  if (has_records()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->records(), target);
  }

  // repeated string calllist = 6;
  for (int i = 0; i < this->calllist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->calllist(i).data(), this->calllist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->calllist(i), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetQueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.OperationStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional int32 packageseq = 3;
    if (has_packageseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packageseq());
    }

    // optional int32 endflag = 4;
    if (has_endflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endflag());
    }

    // optional int32 records = 5;
    if (has_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->records());
    }

    // optional .PBMidLayer.SystemCode syscode = 7;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  // repeated string calllist = 6;
  total_size += 1 * this->calllist_size();
  for (int i = 0; i < this->calllist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->calllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetQueryResponse::MergeFrom(const TargetQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  calllist_.MergeFrom(from.calllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_packageseq()) {
      set_packageseq(from.packageseq());
    }
    if (from.has_endflag()) {
      set_endflag(from.endflag());
    }
    if (from.has_records()) {
      set_records(from.records());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetQueryResponse::CopyFrom(const TargetQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetQueryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void TargetQueryResponse::Swap(TargetQueryResponse* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(status_, other->status_);
    std::swap(packageseq_, other->packageseq_);
    std::swap(endflag_, other->endflag_);
    std::swap(records_, other->records_);
    calllist_.Swap(&other->calllist_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetQueryResponse_descriptor_;
  metadata.reflection = TargetQueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRuleRequest::kOpertypeFieldNumber;
const int SetRuleRequest::kOperationFieldNumber;
const int SetRuleRequest::kSpeakerFieldNumber;
const int SetRuleRequest::kKeywordFieldNumber;
const int SetRuleRequest::kSpeechsegFieldNumber;
const int SetRuleRequest::kSyscodeFieldNumber;
#endif  // !_MSC_VER

SetRuleRequest::SetRuleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetRuleRequest::InitAsDefaultInstance() {
  speaker_ = const_cast< ::PBMidLayer::SpeakerRule*>(&::PBMidLayer::SpeakerRule::default_instance());
  keyword_ = const_cast< ::PBMidLayer::KeywordRule*>(&::PBMidLayer::KeywordRule::default_instance());
  speechseg_ = const_cast< ::PBMidLayer::SpeechSegRule*>(&::PBMidLayer::SpeechSegRule::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

SetRuleRequest::SetRuleRequest(const SetRuleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetRuleRequest::SharedCtor() {
  _cached_size_ = 0;
  opertype_ = 0;
  operation_ = 0;
  speaker_ = NULL;
  keyword_ = NULL;
  speechseg_ = NULL;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRuleRequest::~SetRuleRequest() {
  SharedDtor();
}

void SetRuleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete speaker_;
    delete keyword_;
    delete speechseg_;
    delete syscode_;
  }
}

void SetRuleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRuleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRuleRequest_descriptor_;
}

const SetRuleRequest& SetRuleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SetRuleRequest* SetRuleRequest::default_instance_ = NULL;

SetRuleRequest* SetRuleRequest::New() const {
  return new SetRuleRequest;
}

void SetRuleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opertype_ = 0;
    operation_ = 0;
    if (has_speaker()) {
      if (speaker_ != NULL) speaker_->::PBMidLayer::SpeakerRule::Clear();
    }
    if (has_keyword()) {
      if (keyword_ != NULL) keyword_->::PBMidLayer::KeywordRule::Clear();
    }
    if (has_speechseg()) {
      if (speechseg_ != NULL) speechseg_->::PBMidLayer::SpeechSegRule::Clear();
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRuleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationType opertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::OperationType_IsValid(value)) {
            set_opertype(static_cast< ::PBMidLayer::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required .PBMidLayer.RuleType operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::RuleType_IsValid(value)) {
            set_operation(static_cast< ::PBMidLayer::RuleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_speaker;
        break;
      }

      // optional .PBMidLayer.SpeakerRule speaker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speaker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speaker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyword;
        break;
      }

      // optional .PBMidLayer.KeywordRule keyword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keyword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_speechseg;
        break;
      }

      // optional .PBMidLayer.SpeechSegRule speechseg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechseg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speechseg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetRuleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationType opertype = 1;
  if (has_opertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opertype(), output);
  }

  // required .PBMidLayer.RuleType operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // optional .PBMidLayer.SpeakerRule speaker = 3;
  if (has_speaker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speaker(), output);
  }

  // optional .PBMidLayer.KeywordRule keyword = 4;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->keyword(), output);
  }

  // optional .PBMidLayer.SpeechSegRule speechseg = 5;
  if (has_speechseg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->speechseg(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 6;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetRuleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationType opertype = 1;
  if (has_opertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opertype(), target);
  }

  // required .PBMidLayer.RuleType operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }

  // optional .PBMidLayer.SpeakerRule speaker = 3;
  if (has_speaker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->speaker(), target);
  }

  // optional .PBMidLayer.KeywordRule keyword = 4;
  if (has_keyword()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->keyword(), target);
  }

  // optional .PBMidLayer.SpeechSegRule speechseg = 5;
  if (has_speechseg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->speechseg(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 6;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetRuleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationType opertype = 1;
    if (has_opertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opertype());
    }

    // required .PBMidLayer.RuleType operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional .PBMidLayer.SpeakerRule speaker = 3;
    if (has_speaker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speaker());
    }

    // optional .PBMidLayer.KeywordRule keyword = 4;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyword());
    }

    // optional .PBMidLayer.SpeechSegRule speechseg = 5;
    if (has_speechseg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speechseg());
    }

    // optional .PBMidLayer.SystemCode syscode = 6;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRuleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRuleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRuleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRuleRequest::MergeFrom(const SetRuleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opertype()) {
      set_opertype(from.opertype());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_speaker()) {
      mutable_speaker()->::PBMidLayer::SpeakerRule::MergeFrom(from.speaker());
    }
    if (from.has_keyword()) {
      mutable_keyword()->::PBMidLayer::KeywordRule::MergeFrom(from.keyword());
    }
    if (from.has_speechseg()) {
      mutable_speechseg()->::PBMidLayer::SpeechSegRule::MergeFrom(from.speechseg());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRuleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRuleRequest::CopyFrom(const SetRuleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRuleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_speaker()) {
    if (!this->speaker().IsInitialized()) return false;
  }
  if (has_keyword()) {
    if (!this->keyword().IsInitialized()) return false;
  }
  if (has_speechseg()) {
    if (!this->speechseg().IsInitialized()) return false;
  }
  return true;
}

void SetRuleRequest::Swap(SetRuleRequest* other) {
  if (other != this) {
    std::swap(opertype_, other->opertype_);
    std::swap(operation_, other->operation_);
    std::swap(speaker_, other->speaker_);
    std::swap(keyword_, other->keyword_);
    std::swap(speechseg_, other->speechseg_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRuleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRuleRequest_descriptor_;
  metadata.reflection = SetRuleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRuleResponse::kStatusFieldNumber;
const int SetRuleResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

SetRuleResponse::SetRuleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetRuleResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

SetRuleResponse::SetRuleResponse(const SetRuleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetRuleResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRuleResponse::~SetRuleResponse() {
  SharedDtor();
}

void SetRuleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void SetRuleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRuleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRuleResponse_descriptor_;
}

const SetRuleResponse& SetRuleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SetRuleResponse* SetRuleResponse::default_instance_ = NULL;

SetRuleResponse* SetRuleResponse::New() const {
  return new SetRuleResponse;
}

void SetRuleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRuleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetRuleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetRuleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetRuleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRuleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRuleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRuleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRuleResponse::MergeFrom(const SetRuleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRuleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRuleResponse::CopyFrom(const SetRuleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRuleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void SetRuleResponse::Swap(SetRuleResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRuleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRuleResponse_descriptor_;
  metadata.reflection = SetRuleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRuleRequest::kOperationFieldNumber;
const int QueryRuleRequest::kObjectidFieldNumber;
const int QueryRuleRequest::kLanguagenameFieldNumber;
const int QueryRuleRequest::kKeywordFieldNumber;
const int QueryRuleRequest::kSpeechseglangFieldNumber;
const int QueryRuleRequest::kSpeechsegidFieldNumber;
const int QueryRuleRequest::kSyscodeFieldNumber;
#endif  // !_MSC_VER

QueryRuleRequest::QueryRuleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryRuleRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

QueryRuleRequest::QueryRuleRequest(const QueryRuleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRuleRequest::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 0;
  objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speechseglang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speechsegid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRuleRequest::~QueryRuleRequest() {
  SharedDtor();
}

void QueryRuleRequest::SharedDtor() {
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    delete objectid_;
  }
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (speechseglang_ != &::google::protobuf::internal::kEmptyString) {
    delete speechseglang_;
  }
  if (speechsegid_ != &::google::protobuf::internal::kEmptyString) {
    delete speechsegid_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void QueryRuleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRuleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRuleRequest_descriptor_;
}

const QueryRuleRequest& QueryRuleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

QueryRuleRequest* QueryRuleRequest::default_instance_ = NULL;

QueryRuleRequest* QueryRuleRequest::New() const {
  return new QueryRuleRequest;
}

void QueryRuleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 0;
    if (has_objectid()) {
      if (objectid_ != &::google::protobuf::internal::kEmptyString) {
        objectid_->clear();
      }
    }
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::kEmptyString) {
        keyword_->clear();
      }
    }
    if (has_speechseglang()) {
      if (speechseglang_ != &::google::protobuf::internal::kEmptyString) {
        speechseglang_->clear();
      }
    }
    if (has_speechsegid()) {
      if (speechsegid_ != &::google::protobuf::internal::kEmptyString) {
        speechsegid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRuleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.RuleType operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::RuleType_IsValid(value)) {
            set_operation(static_cast< ::PBMidLayer::RuleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objectid;
        break;
      }

      // optional string objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_languagename;
        break;
      }

      // optional string languagename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyword;
        break;
      }

      // optional string keyword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_speechseglang;
        break;
      }

      // optional string speechseglang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechseglang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechseglang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speechseglang().data(), this->speechseglang().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_speechsegid;
        break;
      }

      // optional string speechsegid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechsegid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechsegid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speechsegid().data(), this->speechsegid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRuleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.RuleType operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional string objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->objectid(), output);
  }

  // optional string languagename = 3;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->languagename(), output);
  }

  // optional string keyword = 4;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keyword(), output);
  }

  // optional string speechseglang = 5;
  if (has_speechseglang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechseglang().data(), this->speechseglang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->speechseglang(), output);
  }

  // optional string speechsegid = 6;
  if (has_speechsegid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegid().data(), this->speechsegid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->speechsegid(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryRuleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.RuleType operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional string objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->objectid(), target);
  }

  // optional string languagename = 3;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->languagename(), target);
  }

  // optional string keyword = 4;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keyword(), target);
  }

  // optional string speechseglang = 5;
  if (has_speechseglang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechseglang().data(), this->speechseglang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->speechseglang(), target);
  }

  // optional string speechsegid = 6;
  if (has_speechsegid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegid().data(), this->speechsegid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->speechsegid(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryRuleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.RuleType operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional string objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // optional string languagename = 3;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // optional string keyword = 4;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // optional string speechseglang = 5;
    if (has_speechseglang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speechseglang());
    }

    // optional string speechsegid = 6;
    if (has_speechsegid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speechsegid());
    }

    // optional .PBMidLayer.SystemCode syscode = 7;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRuleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRuleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRuleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRuleRequest::MergeFrom(const QueryRuleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_speechseglang()) {
      set_speechseglang(from.speechseglang());
    }
    if (from.has_speechsegid()) {
      set_speechsegid(from.speechsegid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRuleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRuleRequest::CopyFrom(const QueryRuleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRuleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryRuleRequest::Swap(QueryRuleRequest* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(objectid_, other->objectid_);
    std::swap(languagename_, other->languagename_);
    std::swap(keyword_, other->keyword_);
    std::swap(speechseglang_, other->speechseglang_);
    std::swap(speechsegid_, other->speechsegid_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRuleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRuleRequest_descriptor_;
  metadata.reflection = QueryRuleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRuleResponse::kStatusFieldNumber;
const int QueryRuleResponse::kCountFieldNumber;
const int QueryRuleResponse::kSpeakerlistFieldNumber;
const int QueryRuleResponse::kKeywordlistFieldNumber;
const int QueryRuleResponse::kSpeechsegFieldNumber;
const int QueryRuleResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

QueryRuleResponse::QueryRuleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryRuleResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

QueryRuleResponse::QueryRuleResponse(const QueryRuleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRuleResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  count_ = 0u;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRuleResponse::~QueryRuleResponse() {
  SharedDtor();
}

void QueryRuleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void QueryRuleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRuleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRuleResponse_descriptor_;
}

const QueryRuleResponse& QueryRuleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

QueryRuleResponse* QueryRuleResponse::default_instance_ = NULL;

QueryRuleResponse* QueryRuleResponse::New() const {
  return new QueryRuleResponse;
}

void QueryRuleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    count_ = 0u;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  speakerlist_.Clear();
  keywordlist_.Clear();
  speechseg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRuleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_speakerlist;
        break;
      }

      // repeated .PBMidLayer.SpeakerRule speakerlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speakerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speakerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_speakerlist;
        if (input->ExpectTag(34)) goto parse_keywordlist;
        break;
      }

      // repeated .PBMidLayer.KeywordRule keywordlist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywordlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keywordlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keywordlist;
        if (input->ExpectTag(42)) goto parse_speechseg;
        break;
      }

      // repeated .PBMidLayer.SpeechSegRule speechseg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechseg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speechseg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_speechseg;
        if (input->ExpectTag(50)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRuleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .PBMidLayer.SpeakerRule speakerlist = 3;
  for (int i = 0; i < this->speakerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speakerlist(i), output);
  }

  // repeated .PBMidLayer.KeywordRule keywordlist = 4;
  for (int i = 0; i < this->keywordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->keywordlist(i), output);
  }

  // repeated .PBMidLayer.SpeechSegRule speechseg = 5;
  for (int i = 0; i < this->speechseg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->speechseg(i), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 6;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryRuleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .PBMidLayer.SpeakerRule speakerlist = 3;
  for (int i = 0; i < this->speakerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->speakerlist(i), target);
  }

  // repeated .PBMidLayer.KeywordRule keywordlist = 4;
  for (int i = 0; i < this->keywordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->keywordlist(i), target);
  }

  // repeated .PBMidLayer.SpeechSegRule speechseg = 5;
  for (int i = 0; i < this->speechseg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->speechseg(i), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 6;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryRuleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .PBMidLayer.SystemCode syscode = 6;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  // repeated .PBMidLayer.SpeakerRule speakerlist = 3;
  total_size += 1 * this->speakerlist_size();
  for (int i = 0; i < this->speakerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speakerlist(i));
  }

  // repeated .PBMidLayer.KeywordRule keywordlist = 4;
  total_size += 1 * this->keywordlist_size();
  for (int i = 0; i < this->keywordlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keywordlist(i));
  }

  // repeated .PBMidLayer.SpeechSegRule speechseg = 5;
  total_size += 1 * this->speechseg_size();
  for (int i = 0; i < this->speechseg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speechseg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRuleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRuleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRuleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRuleResponse::MergeFrom(const QueryRuleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  speakerlist_.MergeFrom(from.speakerlist_);
  keywordlist_.MergeFrom(from.keywordlist_);
  speechseg_.MergeFrom(from.speechseg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRuleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRuleResponse::CopyFrom(const QueryRuleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRuleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < speakerlist_size(); i++) {
    if (!this->speakerlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < keywordlist_size(); i++) {
    if (!this->keywordlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < speechseg_size(); i++) {
    if (!this->speechseg(i).IsInitialized()) return false;
  }
  return true;
}

void QueryRuleResponse::Swap(QueryRuleResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(count_, other->count_);
    speakerlist_.Swap(&other->speakerlist_);
    keywordlist_.Swap(&other->keywordlist_);
    speechseg_.Swap(&other->speechseg_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRuleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRuleResponse_descriptor_;
  metadata.reflection = QueryRuleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSysParaRequest::kTypeFieldNumber;
const int SetSysParaRequest::kLanguagethresholdFieldNumber;
const int SetSysParaRequest::kSpeakerthresholdFieldNumber;
const int SetSysParaRequest::kKeywordthresholdFieldNumber;
const int SetSysParaRequest::kLanguagecountFieldNumber;
const int SetSysParaRequest::kSpeakercountFieldNumber;
const int SetSysParaRequest::kSyscodeFieldNumber;
#endif  // !_MSC_VER

SetSysParaRequest::SetSysParaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSysParaRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

SetSysParaRequest::SetSysParaRequest(const SetSysParaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSysParaRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  languagethreshold_ = 0;
  speakerthreshold_ = 0;
  keywordthreshold_ = 0;
  languagecount_ = 0;
  speakercount_ = 0;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSysParaRequest::~SetSysParaRequest() {
  SharedDtor();
}

void SetSysParaRequest::SharedDtor() {
  if (this != default_instance_) {
    delete syscode_;
  }
}

void SetSysParaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSysParaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSysParaRequest_descriptor_;
}

const SetSysParaRequest& SetSysParaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SetSysParaRequest* SetSysParaRequest::default_instance_ = NULL;

SetSysParaRequest* SetSysParaRequest::New() const {
  return new SetSysParaRequest;
}

void SetSysParaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    languagethreshold_ = 0;
    speakerthreshold_ = 0;
    keywordthreshold_ = 0;
    languagecount_ = 0;
    speakercount_ = 0;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSysParaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.SystemParaType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SystemParaType_IsValid(value)) {
            set_type(static_cast< ::PBMidLayer::SystemParaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_languagethreshold;
        break;
      }

      // optional float languagethreshold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_languagethreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &languagethreshold_)));
          set_has_languagethreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speakerthreshold;
        break;
      }

      // optional float speakerthreshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speakerthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speakerthreshold_)));
          set_has_speakerthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_keywordthreshold;
        break;
      }

      // optional float keywordthreshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_keywordthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &keywordthreshold_)));
          set_has_keywordthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_languagecount;
        break;
      }

      // optional int32 languagecount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_languagecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &languagecount_)));
          set_has_languagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speakercount;
        break;
      }

      // optional int32 speakercount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speakercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speakercount_)));
          set_has_speakercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSysParaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.SystemParaType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float languagethreshold = 2;
  if (has_languagethreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->languagethreshold(), output);
  }

  // optional float speakerthreshold = 3;
  if (has_speakerthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speakerthreshold(), output);
  }

  // optional float keywordthreshold = 4;
  if (has_keywordthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->keywordthreshold(), output);
  }

  // optional int32 languagecount = 5;
  if (has_languagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->languagecount(), output);
  }

  // optional int32 speakercount = 6;
  if (has_speakercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speakercount(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSysParaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.SystemParaType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float languagethreshold = 2;
  if (has_languagethreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->languagethreshold(), target);
  }

  // optional float speakerthreshold = 3;
  if (has_speakerthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speakerthreshold(), target);
  }

  // optional float keywordthreshold = 4;
  if (has_keywordthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->keywordthreshold(), target);
  }

  // optional int32 languagecount = 5;
  if (has_languagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->languagecount(), target);
  }

  // optional int32 speakercount = 6;
  if (has_speakercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speakercount(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSysParaRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.SystemParaType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float languagethreshold = 2;
    if (has_languagethreshold()) {
      total_size += 1 + 4;
    }

    // optional float speakerthreshold = 3;
    if (has_speakerthreshold()) {
      total_size += 1 + 4;
    }

    // optional float keywordthreshold = 4;
    if (has_keywordthreshold()) {
      total_size += 1 + 4;
    }

    // optional int32 languagecount = 5;
    if (has_languagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->languagecount());
    }

    // optional int32 speakercount = 6;
    if (has_speakercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speakercount());
    }

    // optional .PBMidLayer.SystemCode syscode = 7;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSysParaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSysParaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSysParaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSysParaRequest::MergeFrom(const SetSysParaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_languagethreshold()) {
      set_languagethreshold(from.languagethreshold());
    }
    if (from.has_speakerthreshold()) {
      set_speakerthreshold(from.speakerthreshold());
    }
    if (from.has_keywordthreshold()) {
      set_keywordthreshold(from.keywordthreshold());
    }
    if (from.has_languagecount()) {
      set_languagecount(from.languagecount());
    }
    if (from.has_speakercount()) {
      set_speakercount(from.speakercount());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSysParaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSysParaRequest::CopyFrom(const SetSysParaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSysParaRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetSysParaRequest::Swap(SetSysParaRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(languagethreshold_, other->languagethreshold_);
    std::swap(speakerthreshold_, other->speakerthreshold_);
    std::swap(keywordthreshold_, other->keywordthreshold_);
    std::swap(languagecount_, other->languagecount_);
    std::swap(speakercount_, other->speakercount_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSysParaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSysParaRequest_descriptor_;
  metadata.reflection = SetSysParaRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSysParaResponse::kStatusFieldNumber;
const int SetSysParaResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

SetSysParaResponse::SetSysParaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSysParaResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

SetSysParaResponse::SetSysParaResponse(const SetSysParaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSysParaResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSysParaResponse::~SetSysParaResponse() {
  SharedDtor();
}

void SetSysParaResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void SetSysParaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSysParaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSysParaResponse_descriptor_;
}

const SetSysParaResponse& SetSysParaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SetSysParaResponse* SetSysParaResponse::default_instance_ = NULL;

SetSysParaResponse* SetSysParaResponse::New() const {
  return new SetSysParaResponse;
}

void SetSysParaResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSysParaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSysParaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSysParaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSysParaResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSysParaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSysParaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSysParaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSysParaResponse::MergeFrom(const SetSysParaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSysParaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSysParaResponse::CopyFrom(const SetSysParaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSysParaResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void SetSysParaResponse::Swap(SetSysParaResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSysParaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSysParaResponse_descriptor_;
  metadata.reflection = SetSysParaResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySysParaRequest::kSyscodeFieldNumber;
#endif  // !_MSC_VER

QuerySysParaRequest::QuerySysParaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuerySysParaRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

QuerySysParaRequest::QuerySysParaRequest(const QuerySysParaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuerySysParaRequest::SharedCtor() {
  _cached_size_ = 0;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySysParaRequest::~QuerySysParaRequest() {
  SharedDtor();
}

void QuerySysParaRequest::SharedDtor() {
  if (this != default_instance_) {
    delete syscode_;
  }
}

void QuerySysParaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySysParaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySysParaRequest_descriptor_;
}

const QuerySysParaRequest& QuerySysParaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

QuerySysParaRequest* QuerySysParaRequest::default_instance_ = NULL;

QuerySysParaRequest* QuerySysParaRequest::New() const {
  return new QuerySysParaRequest;
}

void QuerySysParaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySysParaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBMidLayer.SystemCode syscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuerySysParaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBMidLayer.SystemCode syscode = 1;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuerySysParaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBMidLayer.SystemCode syscode = 1;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuerySysParaRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBMidLayer.SystemCode syscode = 1;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySysParaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySysParaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySysParaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySysParaRequest::MergeFrom(const QuerySysParaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySysParaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySysParaRequest::CopyFrom(const QuerySysParaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySysParaRequest::IsInitialized() const {

  return true;
}

void QuerySysParaRequest::Swap(QuerySysParaRequest* other) {
  if (other != this) {
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySysParaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySysParaRequest_descriptor_;
  metadata.reflection = QuerySysParaRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySysParaResponse::kStatusFieldNumber;
const int QuerySysParaResponse::kLanguagethresholdFieldNumber;
const int QuerySysParaResponse::kSpeakerthresholdFieldNumber;
const int QuerySysParaResponse::kKeywordthresholdFieldNumber;
const int QuerySysParaResponse::kLanguagecountFieldNumber;
const int QuerySysParaResponse::kSpeakercountFieldNumber;
const int QuerySysParaResponse::kSupportlangsFieldNumber;
const int QuerySysParaResponse::kLanglistFieldNumber;
const int QuerySysParaResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

QuerySysParaResponse::QuerySysParaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuerySysParaResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

QuerySysParaResponse::QuerySysParaResponse(const QuerySysParaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuerySysParaResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  languagethreshold_ = 0;
  speakerthreshold_ = 0;
  keywordthreshold_ = 0;
  languagecount_ = 0;
  speakercount_ = 0;
  supportlangs_ = 0u;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySysParaResponse::~QuerySysParaResponse() {
  SharedDtor();
}

void QuerySysParaResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void QuerySysParaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySysParaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySysParaResponse_descriptor_;
}

const QuerySysParaResponse& QuerySysParaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

QuerySysParaResponse* QuerySysParaResponse::default_instance_ = NULL;

QuerySysParaResponse* QuerySysParaResponse::New() const {
  return new QuerySysParaResponse;
}

void QuerySysParaResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    languagethreshold_ = 0;
    speakerthreshold_ = 0;
    keywordthreshold_ = 0;
    languagecount_ = 0;
    speakercount_ = 0;
    supportlangs_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  langlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySysParaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_languagethreshold;
        break;
      }

      // optional float languagethreshold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_languagethreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &languagethreshold_)));
          set_has_languagethreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speakerthreshold;
        break;
      }

      // optional float speakerthreshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speakerthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speakerthreshold_)));
          set_has_speakerthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_keywordthreshold;
        break;
      }

      // optional float keywordthreshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_keywordthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &keywordthreshold_)));
          set_has_keywordthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_languagecount;
        break;
      }

      // optional int32 languagecount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_languagecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &languagecount_)));
          set_has_languagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speakercount;
        break;
      }

      // optional int32 speakercount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speakercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speakercount_)));
          set_has_speakercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_supportlangs;
        break;
      }

      // required uint32 supportlangs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supportlangs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supportlangs_)));
          set_has_supportlangs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_langlist;
        break;
      }

      // repeated .PBMidLayer.LanguageInfo langlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_langlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_langlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_langlist;
        if (input->ExpectTag(74)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuerySysParaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // optional float languagethreshold = 2;
  if (has_languagethreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->languagethreshold(), output);
  }

  // optional float speakerthreshold = 3;
  if (has_speakerthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speakerthreshold(), output);
  }

  // optional float keywordthreshold = 4;
  if (has_keywordthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->keywordthreshold(), output);
  }

  // optional int32 languagecount = 5;
  if (has_languagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->languagecount(), output);
  }

  // optional int32 speakercount = 6;
  if (has_speakercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speakercount(), output);
  }

  // required uint32 supportlangs = 7;
  if (has_supportlangs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->supportlangs(), output);
  }

  // repeated .PBMidLayer.LanguageInfo langlist = 8;
  for (int i = 0; i < this->langlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->langlist(i), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 9;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuerySysParaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // optional float languagethreshold = 2;
  if (has_languagethreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->languagethreshold(), target);
  }

  // optional float speakerthreshold = 3;
  if (has_speakerthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speakerthreshold(), target);
  }

  // optional float keywordthreshold = 4;
  if (has_keywordthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->keywordthreshold(), target);
  }

  // optional int32 languagecount = 5;
  if (has_languagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->languagecount(), target);
  }

  // optional int32 speakercount = 6;
  if (has_speakercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speakercount(), target);
  }

  // required uint32 supportlangs = 7;
  if (has_supportlangs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->supportlangs(), target);
  }

  // repeated .PBMidLayer.LanguageInfo langlist = 8;
  for (int i = 0; i < this->langlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->langlist(i), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 9;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuerySysParaResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional float languagethreshold = 2;
    if (has_languagethreshold()) {
      total_size += 1 + 4;
    }

    // optional float speakerthreshold = 3;
    if (has_speakerthreshold()) {
      total_size += 1 + 4;
    }

    // optional float keywordthreshold = 4;
    if (has_keywordthreshold()) {
      total_size += 1 + 4;
    }

    // optional int32 languagecount = 5;
    if (has_languagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->languagecount());
    }

    // optional int32 speakercount = 6;
    if (has_speakercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speakercount());
    }

    // required uint32 supportlangs = 7;
    if (has_supportlangs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supportlangs());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBMidLayer.SystemCode syscode = 9;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  // repeated .PBMidLayer.LanguageInfo langlist = 8;
  total_size += 1 * this->langlist_size();
  for (int i = 0; i < this->langlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->langlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySysParaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySysParaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySysParaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySysParaResponse::MergeFrom(const QuerySysParaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  langlist_.MergeFrom(from.langlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_languagethreshold()) {
      set_languagethreshold(from.languagethreshold());
    }
    if (from.has_speakerthreshold()) {
      set_speakerthreshold(from.speakerthreshold());
    }
    if (from.has_keywordthreshold()) {
      set_keywordthreshold(from.keywordthreshold());
    }
    if (from.has_languagecount()) {
      set_languagecount(from.languagecount());
    }
    if (from.has_speakercount()) {
      set_speakercount(from.speakercount());
    }
    if (from.has_supportlangs()) {
      set_supportlangs(from.supportlangs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySysParaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySysParaResponse::CopyFrom(const QuerySysParaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySysParaResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < langlist_size(); i++) {
    if (!this->langlist(i).IsInitialized()) return false;
  }
  return true;
}

void QuerySysParaResponse::Swap(QuerySysParaResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(languagethreshold_, other->languagethreshold_);
    std::swap(speakerthreshold_, other->speakerthreshold_);
    std::swap(keywordthreshold_, other->keywordthreshold_);
    std::swap(languagecount_, other->languagecount_);
    std::swap(speakercount_, other->speakercount_);
    std::swap(supportlangs_, other->supportlangs_);
    langlist_.Swap(&other->langlist_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySysParaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySysParaResponse_descriptor_;
  metadata.reflection = QuerySysParaResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmNotify::kAlarmtimeFieldNumber;
const int AlarmNotify::kLevelFieldNumber;
const int AlarmNotify::kContentFieldNumber;
const int AlarmNotify::kModulenameFieldNumber;
const int AlarmNotify::kSyscodeFieldNumber;
#endif  // !_MSC_VER

AlarmNotify::AlarmNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlarmNotify::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

AlarmNotify::AlarmNotify(const AlarmNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlarmNotify::SharedCtor() {
  _cached_size_ = 0;
  alarmtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmNotify::~AlarmNotify() {
  SharedDtor();
}

void AlarmNotify::SharedDtor() {
  if (alarmtime_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmtime_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (modulename_ != &::google::protobuf::internal::kEmptyString) {
    delete modulename_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void AlarmNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmNotify_descriptor_;
}

const AlarmNotify& AlarmNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

AlarmNotify* AlarmNotify::default_instance_ = NULL;

AlarmNotify* AlarmNotify::New() const {
  return new AlarmNotify;
}

void AlarmNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarmtime()) {
      if (alarmtime_ != &::google::protobuf::internal::kEmptyString) {
        alarmtime_->clear();
      }
    }
    level_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_modulename()) {
      if (modulename_ != &::google::protobuf::internal::kEmptyString) {
        modulename_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string alarmtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmtime().data(), this->alarmtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required .PBMidLayer.AlarmLevel level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AlarmLevel_IsValid(value)) {
            set_level(static_cast< ::PBMidLayer::AlarmLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_modulename;
        break;
      }

      // required string modulename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modulename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modulename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modulename().data(), this->modulename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlarmNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string alarmtime = 1;
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtime().data(), this->alarmtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alarmtime(), output);
  }

  // required .PBMidLayer.AlarmLevel level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // required string modulename = 4;
  if (has_modulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulename().data(), this->modulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->modulename(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlarmNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string alarmtime = 1;
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtime().data(), this->alarmtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alarmtime(), target);
  }

  // required .PBMidLayer.AlarmLevel level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // required string modulename = 4;
  if (has_modulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulename().data(), this->modulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->modulename(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlarmNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string alarmtime = 1;
    if (has_alarmtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmtime());
    }

    // required .PBMidLayer.AlarmLevel level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string modulename = 4;
    if (has_modulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modulename());
    }

    // optional .PBMidLayer.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmNotify::MergeFrom(const AlarmNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarmtime()) {
      set_alarmtime(from.alarmtime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_modulename()) {
      set_modulename(from.modulename());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmNotify::CopyFrom(const AlarmNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AlarmNotify::Swap(AlarmNotify* other) {
  if (other != this) {
    std::swap(alarmtime_, other->alarmtime_);
    std::swap(level_, other->level_);
    std::swap(content_, other->content_);
    std::swap(modulename_, other->modulename_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmNotify_descriptor_;
  metadata.reflection = AlarmNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusNotify::kModulenameFieldNumber;
const int StatusNotify::kIpFieldNumber;
const int StatusNotify::kCpuusageFieldNumber;
const int StatusNotify::kTotalmemoryFieldNumber;
const int StatusNotify::kMemoryusedFieldNumber;
const int StatusNotify::kCurrenttasksFieldNumber;
const int StatusNotify::kRecordtimeFieldNumber;
const int StatusNotify::kSyscodeFieldNumber;
const int StatusNotify::kStatesFieldNumber;
#endif  // !_MSC_VER

StatusNotify::StatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusNotify::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

StatusNotify::StatusNotify(const StatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusNotify::SharedCtor() {
  _cached_size_ = 0;
  modulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpuusage_ = 0;
  totalmemory_ = 0;
  memoryused_ = 0;
  currenttasks_ = 0;
  recordtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusNotify::~StatusNotify() {
  SharedDtor();
}

void StatusNotify::SharedDtor() {
  if (modulename_ != &::google::protobuf::internal::kEmptyString) {
    delete modulename_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (recordtime_ != &::google::protobuf::internal::kEmptyString) {
    delete recordtime_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void StatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusNotify_descriptor_;
}

const StatusNotify& StatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

StatusNotify* StatusNotify::default_instance_ = NULL;

StatusNotify* StatusNotify::New() const {
  return new StatusNotify;
}

void StatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_modulename()) {
      if (modulename_ != &::google::protobuf::internal::kEmptyString) {
        modulename_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    cpuusage_ = 0;
    totalmemory_ = 0;
    memoryused_ = 0;
    currenttasks_ = 0;
    if (has_recordtime()) {
      if (recordtime_ != &::google::protobuf::internal::kEmptyString) {
        recordtime_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string modulename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modulename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modulename().data(), this->modulename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_cpuusage;
        break;
      }

      // required float cpuusage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuusage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuusage_)));
          set_has_cpuusage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalmemory;
        break;
      }

      // required int32 totalmemory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalmemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmemory_)));
          set_has_totalmemory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memoryused;
        break;
      }

      // required int32 memoryused = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memoryused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memoryused_)));
          set_has_memoryused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currenttasks;
        break;
      }

      // required int32 currenttasks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currenttasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenttasks_)));
          set_has_currenttasks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recordtime;
        break;
      }

      // required string recordtime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordtime().data(), this->recordtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_states;
        break;
      }

      // repeated .PBMidLayer.SystemStateItem states = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_states()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_states;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string modulename = 1;
  if (has_modulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulename().data(), this->modulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->modulename(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required float cpuusage = 3;
  if (has_cpuusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cpuusage(), output);
  }

  // required int32 totalmemory = 4;
  if (has_totalmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalmemory(), output);
  }

  // required int32 memoryused = 5;
  if (has_memoryused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memoryused(), output);
  }

  // required int32 currenttasks = 6;
  if (has_currenttasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currenttasks(), output);
  }

  // required string recordtime = 7;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordtime().data(), this->recordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->recordtime(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 8;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->syscode(), output);
  }

  // repeated .PBMidLayer.SystemStateItem states = 9;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string modulename = 1;
  if (has_modulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulename().data(), this->modulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modulename(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required float cpuusage = 3;
  if (has_cpuusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cpuusage(), target);
  }

  // required int32 totalmemory = 4;
  if (has_totalmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalmemory(), target);
  }

  // required int32 memoryused = 5;
  if (has_memoryused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memoryused(), target);
  }

  // required int32 currenttasks = 6;
  if (has_currenttasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currenttasks(), target);
  }

  // required string recordtime = 7;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordtime().data(), this->recordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->recordtime(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 8;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->syscode(), target);
  }

  // repeated .PBMidLayer.SystemStateItem states = 9;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string modulename = 1;
    if (has_modulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modulename());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required float cpuusage = 3;
    if (has_cpuusage()) {
      total_size += 1 + 4;
    }

    // required int32 totalmemory = 4;
    if (has_totalmemory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmemory());
    }

    // required int32 memoryused = 5;
    if (has_memoryused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memoryused());
    }

    // required int32 currenttasks = 6;
    if (has_currenttasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttasks());
    }

    // required string recordtime = 7;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordtime());
    }

    // optional .PBMidLayer.SystemCode syscode = 8;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  // repeated .PBMidLayer.SystemStateItem states = 9;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusNotify::MergeFrom(const StatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modulename()) {
      set_modulename(from.modulename());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_cpuusage()) {
      set_cpuusage(from.cpuusage());
    }
    if (from.has_totalmemory()) {
      set_totalmemory(from.totalmemory());
    }
    if (from.has_memoryused()) {
      set_memoryused(from.memoryused());
    }
    if (from.has_currenttasks()) {
      set_currenttasks(from.currenttasks());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusNotify::CopyFrom(const StatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < states_size(); i++) {
    if (!this->states(i).IsInitialized()) return false;
  }
  return true;
}

void StatusNotify::Swap(StatusNotify* other) {
  if (other != this) {
    std::swap(modulename_, other->modulename_);
    std::swap(ip_, other->ip_);
    std::swap(cpuusage_, other->cpuusage_);
    std::swap(totalmemory_, other->totalmemory_);
    std::swap(memoryused_, other->memoryused_);
    std::swap(currenttasks_, other->currenttasks_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(syscode_, other->syscode_);
    states_.Swap(&other->states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusNotify_descriptor_;
  metadata.reflection = StatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectManageRequest::kObjectidFieldNumber;
const int ObjectManageRequest::kOpertypeFieldNumber;
const int ObjectManageRequest::kCountFieldNumber;
const int ObjectManageRequest::kListFieldNumber;
const int ObjectManageRequest::kObjectnameFieldNumber;
const int ObjectManageRequest::kIsautotrainFieldNumber;
const int ObjectManageRequest::kSyscodeFieldNumber;
const int ObjectManageRequest::kGenderFieldNumber;
#endif  // !_MSC_VER

ObjectManageRequest::ObjectManageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectManageRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

ObjectManageRequest::ObjectManageRequest(const ObjectManageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectManageRequest::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opertype_ = 0;
  count_ = 0u;
  objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isautotrain_ = false;
  syscode_ = NULL;
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectManageRequest::~ObjectManageRequest() {
  SharedDtor();
}

void ObjectManageRequest::SharedDtor() {
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    delete objectid_;
  }
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete objectname_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void ObjectManageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectManageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectManageRequest_descriptor_;
}

const ObjectManageRequest& ObjectManageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

ObjectManageRequest* ObjectManageRequest::default_instance_ = NULL;

ObjectManageRequest* ObjectManageRequest::New() const {
  return new ObjectManageRequest;
}

void ObjectManageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_objectid()) {
      if (objectid_ != &::google::protobuf::internal::kEmptyString) {
        objectid_->clear();
      }
    }
    opertype_ = 0;
    count_ = 0u;
    if (has_objectname()) {
      if (objectname_ != &::google::protobuf::internal::kEmptyString) {
        objectname_->clear();
      }
    }
    isautotrain_ = false;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    gender_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectManageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opertype;
        break;
      }

      // required .PBMidLayer.OperationType opertype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::OperationType_IsValid(value)) {
            set_opertype(static_cast< ::PBMidLayer::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list;
        break;
      }

      // repeated .PBMidLayer.TrainInfo list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list;
        if (input->ExpectTag(42)) goto parse_objectname;
        break;
      }

      // optional string objectname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectname().data(), this->objectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isautotrain;
        break;
      }

      // optional bool isautotrain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isautotrain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautotrain_)));
          set_has_isautotrain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gender;
        break;
      }

      // optional .PBMidLayer.GenderType gender = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::GenderType_IsValid(value)) {
            set_gender(static_cast< ::PBMidLayer::GenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectManageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->objectid(), output);
  }

  // required .PBMidLayer.OperationType opertype = 2;
  if (has_opertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->opertype(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // repeated .PBMidLayer.TrainInfo list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list(i), output);
  }

  // optional string objectname = 5;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->objectname(), output);
  }

  // optional bool isautotrain = 6;
  if (has_isautotrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isautotrain(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->syscode(), output);
  }

  // optional .PBMidLayer.GenderType gender = 8;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->gender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectManageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objectid(), target);
  }

  // required .PBMidLayer.OperationType opertype = 2;
  if (has_opertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->opertype(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // repeated .PBMidLayer.TrainInfo list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list(i), target);
  }

  // optional string objectname = 5;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->objectname(), target);
  }

  // optional bool isautotrain = 6;
  if (has_isautotrain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isautotrain(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 7;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->syscode(), target);
  }

  // optional .PBMidLayer.GenderType gender = 8;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->gender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectManageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // required .PBMidLayer.OperationType opertype = 2;
    if (has_opertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opertype());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string objectname = 5;
    if (has_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectname());
    }

    // optional bool isautotrain = 6;
    if (has_isautotrain()) {
      total_size += 1 + 1;
    }

    // optional .PBMidLayer.SystemCode syscode = 7;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // optional .PBMidLayer.GenderType gender = 8;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

  }
  // repeated .PBMidLayer.TrainInfo list = 4;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectManageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectManageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectManageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectManageRequest::MergeFrom(const ObjectManageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_opertype()) {
      set_opertype(from.opertype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_objectname()) {
      set_objectname(from.objectname());
    }
    if (from.has_isautotrain()) {
      set_isautotrain(from.isautotrain());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectManageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectManageRequest::CopyFrom(const ObjectManageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectManageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectManageRequest::Swap(ObjectManageRequest* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(opertype_, other->opertype_);
    std::swap(count_, other->count_);
    list_.Swap(&other->list_);
    std::swap(objectname_, other->objectname_);
    std::swap(isautotrain_, other->isautotrain_);
    std::swap(syscode_, other->syscode_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectManageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectManageRequest_descriptor_;
  metadata.reflection = ObjectManageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectManageNotify::kStatusFieldNumber;
const int ObjectManageNotify::kObjectidFieldNumber;
const int ObjectManageNotify::kSyscodeFieldNumber;
#endif  // !_MSC_VER

ObjectManageNotify::ObjectManageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectManageNotify::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

ObjectManageNotify::ObjectManageNotify(const ObjectManageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectManageNotify::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectManageNotify::~ObjectManageNotify() {
  SharedDtor();
}

void ObjectManageNotify::SharedDtor() {
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    delete objectid_;
  }
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void ObjectManageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectManageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectManageNotify_descriptor_;
}

const ObjectManageNotify& ObjectManageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

ObjectManageNotify* ObjectManageNotify::default_instance_ = NULL;

ObjectManageNotify* ObjectManageNotify::New() const {
  return new ObjectManageNotify;
}

void ObjectManageNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    if (has_objectid()) {
      if (objectid_ != &::google::protobuf::internal::kEmptyString) {
        objectid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectManageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objectid;
        break;
      }

      // optional string objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectManageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // optional string objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->objectid(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 3;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectManageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // optional string objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->objectid(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 3;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectManageNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional string objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // optional .PBMidLayer.SystemCode syscode = 3;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectManageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectManageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectManageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectManageNotify::MergeFrom(const ObjectManageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectManageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectManageNotify::CopyFrom(const ObjectManageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectManageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ObjectManageNotify::Swap(ObjectManageNotify* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(objectid_, other->objectid_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectManageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectManageNotify_descriptor_;
  metadata.reflection = ObjectManageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectManageResponse::kStatusFieldNumber;
const int ObjectManageResponse::kObjectidFieldNumber;
const int ObjectManageResponse::kSyscodeFieldNumber;
#endif  // !_MSC_VER

ObjectManageResponse::ObjectManageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectManageResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

ObjectManageResponse::ObjectManageResponse(const ObjectManageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectManageResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectManageResponse::~ObjectManageResponse() {
  SharedDtor();
}

void ObjectManageResponse::SharedDtor() {
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    delete objectid_;
  }
  if (this != default_instance_) {
    delete status_;
    delete syscode_;
  }
}

void ObjectManageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectManageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectManageResponse_descriptor_;
}

const ObjectManageResponse& ObjectManageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

ObjectManageResponse* ObjectManageResponse::default_instance_ = NULL;

ObjectManageResponse* ObjectManageResponse::New() const {
  return new ObjectManageResponse;
}

void ObjectManageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    if (has_objectid()) {
      if (objectid_ != &::google::protobuf::internal::kEmptyString) {
        objectid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectManageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objectid;
        break;
      }

      // optional string objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectManageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // optional string objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->objectid(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 3;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectManageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // optional string objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->objectid(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 3;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectManageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional string objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // optional .PBMidLayer.SystemCode syscode = 3;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectManageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectManageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectManageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectManageResponse::MergeFrom(const ObjectManageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectManageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectManageResponse::CopyFrom(const ObjectManageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectManageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ObjectManageResponse::Swap(ObjectManageResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(objectid_, other->objectid_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectManageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectManageResponse_descriptor_;
  metadata.reflection = ObjectManageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedbackNotify::kCallidFieldNumber;
const int FeedbackNotify::kFiletagFieldNumber;
const int FeedbackNotify::kTypeFieldNumber;
const int FeedbackNotify::kResultFieldNumber;
const int FeedbackNotify::kErrorppFieldNumber;
const int FeedbackNotify::kRightppFieldNumber;
const int FeedbackNotify::kErrorspFieldNumber;
const int FeedbackNotify::kRightspFieldNumber;
const int FeedbackNotify::kErrorkwFieldNumber;
const int FeedbackNotify::kRightkwFieldNumber;
const int FeedbackNotify::kErrortsFieldNumber;
const int FeedbackNotify::kRighttsFieldNumber;
const int FeedbackNotify::kRightvadFieldNumber;
const int FeedbackNotify::kErrorvadFieldNumber;
const int FeedbackNotify::kRightssFieldNumber;
const int FeedbackNotify::kErrorssFieldNumber;
const int FeedbackNotify::kRightdtmfFieldNumber;
const int FeedbackNotify::kErrordtmfFieldNumber;
const int FeedbackNotify::kSyscodeFieldNumber;
#endif  // !_MSC_VER

FeedbackNotify::FeedbackNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedbackNotify::InitAsDefaultInstance() {
  errorpp_ = const_cast< ::PBMidLayer::PreprocessResult*>(&::PBMidLayer::PreprocessResult::default_instance());
  rightpp_ = const_cast< ::PBMidLayer::PreprocessResult*>(&::PBMidLayer::PreprocessResult::default_instance());
  errorsp_ = const_cast< ::PBMidLayer::SpeakerResult*>(&::PBMidLayer::SpeakerResult::default_instance());
  rightsp_ = const_cast< ::PBMidLayer::SpeakerResult*>(&::PBMidLayer::SpeakerResult::default_instance());
  errorkw_ = const_cast< ::PBMidLayer::KeywordResult*>(&::PBMidLayer::KeywordResult::default_instance());
  rightkw_ = const_cast< ::PBMidLayer::KeywordResult*>(&::PBMidLayer::KeywordResult::default_instance());
  errorts_ = const_cast< ::PBMidLayer::TranscriptResult*>(&::PBMidLayer::TranscriptResult::default_instance());
  rightts_ = const_cast< ::PBMidLayer::TranscriptResult*>(&::PBMidLayer::TranscriptResult::default_instance());
  rightvad_ = const_cast< ::PBMidLayer::VADResult*>(&::PBMidLayer::VADResult::default_instance());
  errorvad_ = const_cast< ::PBMidLayer::VADResult*>(&::PBMidLayer::VADResult::default_instance());
  rightss_ = const_cast< ::PBMidLayer::SpeechSegResult*>(&::PBMidLayer::SpeechSegResult::default_instance());
  errorss_ = const_cast< ::PBMidLayer::SpeechSegResult*>(&::PBMidLayer::SpeechSegResult::default_instance());
  rightdtmf_ = const_cast< ::PBMidLayer::DTMFResult*>(&::PBMidLayer::DTMFResult::default_instance());
  errordtmf_ = const_cast< ::PBMidLayer::DTMFResult*>(&::PBMidLayer::DTMFResult::default_instance());
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

FeedbackNotify::FeedbackNotify(const FeedbackNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedbackNotify::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  type_ = 0;
  result_ = 0;
  errorpp_ = NULL;
  rightpp_ = NULL;
  errorsp_ = NULL;
  rightsp_ = NULL;
  errorkw_ = NULL;
  rightkw_ = NULL;
  errorts_ = NULL;
  rightts_ = NULL;
  rightvad_ = NULL;
  errorvad_ = NULL;
  rightss_ = NULL;
  errorss_ = NULL;
  rightdtmf_ = NULL;
  errordtmf_ = NULL;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedbackNotify::~FeedbackNotify() {
  SharedDtor();
}

void FeedbackNotify::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
    delete errorpp_;
    delete rightpp_;
    delete errorsp_;
    delete rightsp_;
    delete errorkw_;
    delete rightkw_;
    delete errorts_;
    delete rightts_;
    delete rightvad_;
    delete errorvad_;
    delete rightss_;
    delete errorss_;
    delete rightdtmf_;
    delete errordtmf_;
    delete syscode_;
  }
}

void FeedbackNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedbackNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedbackNotify_descriptor_;
}

const FeedbackNotify& FeedbackNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

FeedbackNotify* FeedbackNotify::default_instance_ = NULL;

FeedbackNotify* FeedbackNotify::New() const {
  return new FeedbackNotify;
}

void FeedbackNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
    type_ = 0;
    result_ = 0;
    if (has_errorpp()) {
      if (errorpp_ != NULL) errorpp_->::PBMidLayer::PreprocessResult::Clear();
    }
    if (has_rightpp()) {
      if (rightpp_ != NULL) rightpp_->::PBMidLayer::PreprocessResult::Clear();
    }
    if (has_errorsp()) {
      if (errorsp_ != NULL) errorsp_->::PBMidLayer::SpeakerResult::Clear();
    }
    if (has_rightsp()) {
      if (rightsp_ != NULL) rightsp_->::PBMidLayer::SpeakerResult::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_errorkw()) {
      if (errorkw_ != NULL) errorkw_->::PBMidLayer::KeywordResult::Clear();
    }
    if (has_rightkw()) {
      if (rightkw_ != NULL) rightkw_->::PBMidLayer::KeywordResult::Clear();
    }
    if (has_errorts()) {
      if (errorts_ != NULL) errorts_->::PBMidLayer::TranscriptResult::Clear();
    }
    if (has_rightts()) {
      if (rightts_ != NULL) rightts_->::PBMidLayer::TranscriptResult::Clear();
    }
    if (has_rightvad()) {
      if (rightvad_ != NULL) rightvad_->::PBMidLayer::VADResult::Clear();
    }
    if (has_errorvad()) {
      if (errorvad_ != NULL) errorvad_->::PBMidLayer::VADResult::Clear();
    }
    if (has_rightss()) {
      if (rightss_ != NULL) rightss_->::PBMidLayer::SpeechSegResult::Clear();
    }
    if (has_errorss()) {
      if (errorss_ != NULL) errorss_->::PBMidLayer::SpeechSegResult::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_rightdtmf()) {
      if (rightdtmf_ != NULL) rightdtmf_->::PBMidLayer::DTMFResult::Clear();
    }
    if (has_errordtmf()) {
      if (errordtmf_ != NULL) errordtmf_->::PBMidLayer::DTMFResult::Clear();
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedbackNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filetag;
        break;
      }

      // required .PBMidLayer.AudioFileTag filetag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_errorpp;
        break;
      }

      // optional .PBMidLayer.PreprocessResult errorpp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorpp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rightpp;
        break;
      }

      // optional .PBMidLayer.PreprocessResult rightpp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightpp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_errorsp;
        break;
      }

      // optional .PBMidLayer.SpeakerResult errorsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rightsp;
        break;
      }

      // optional .PBMidLayer.SpeakerResult rightsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_errorkw;
        break;
      }

      // optional .PBMidLayer.KeywordResult errorkw = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorkw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorkw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_rightkw;
        break;
      }

      // optional .PBMidLayer.KeywordResult rightkw = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightkw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightkw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_errorts;
        break;
      }

      // optional .PBMidLayer.TranscriptResult errorts = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rightts;
        break;
      }

      // optional .PBMidLayer.TranscriptResult rightts = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_rightvad;
        break;
      }

      // optional .PBMidLayer.VADResult rightvad = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightvad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightvad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_errorvad;
        break;
      }

      // optional .PBMidLayer.VADResult errorvad = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorvad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorvad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_rightss;
        break;
      }

      // optional .PBMidLayer.SpeechSegResult rightss = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_errorss;
        break;
      }

      // optional .PBMidLayer.SpeechSegResult errorss = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_rightdtmf;
        break;
      }

      // optional .PBMidLayer.DTMFResult rightdtmf = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightdtmf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightdtmf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_errordtmf;
        break;
      }

      // optional .PBMidLayer.DTMFResult errordtmf = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errordtmf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errordtmf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_syscode;
        break;
      }

      // optional .PBMidLayer.SystemCode syscode = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedbackNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetag(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  // optional .PBMidLayer.PreprocessResult errorpp = 5;
  if (has_errorpp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->errorpp(), output);
  }

  // optional .PBMidLayer.PreprocessResult rightpp = 6;
  if (has_rightpp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rightpp(), output);
  }

  // optional .PBMidLayer.SpeakerResult errorsp = 7;
  if (has_errorsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->errorsp(), output);
  }

  // optional .PBMidLayer.SpeakerResult rightsp = 8;
  if (has_rightsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rightsp(), output);
  }

  // optional .PBMidLayer.KeywordResult errorkw = 9;
  if (has_errorkw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->errorkw(), output);
  }

  // optional .PBMidLayer.KeywordResult rightkw = 10;
  if (has_rightkw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rightkw(), output);
  }

  // optional .PBMidLayer.TranscriptResult errorts = 11;
  if (has_errorts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->errorts(), output);
  }

  // optional .PBMidLayer.TranscriptResult rightts = 12;
  if (has_rightts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->rightts(), output);
  }

  // optional .PBMidLayer.VADResult rightvad = 13;
  if (has_rightvad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rightvad(), output);
  }

  // optional .PBMidLayer.VADResult errorvad = 14;
  if (has_errorvad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->errorvad(), output);
  }

  // optional .PBMidLayer.SpeechSegResult rightss = 15;
  if (has_rightss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->rightss(), output);
  }

  // optional .PBMidLayer.SpeechSegResult errorss = 16;
  if (has_errorss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->errorss(), output);
  }

  // optional .PBMidLayer.DTMFResult rightdtmf = 17;
  if (has_rightdtmf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->rightdtmf(), output);
  }

  // optional .PBMidLayer.DTMFResult errordtmf = 18;
  if (has_errordtmf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->errordtmf(), output);
  }

  // optional .PBMidLayer.SystemCode syscode = 19;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedbackNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetag(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  // optional .PBMidLayer.PreprocessResult errorpp = 5;
  if (has_errorpp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->errorpp(), target);
  }

  // optional .PBMidLayer.PreprocessResult rightpp = 6;
  if (has_rightpp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rightpp(), target);
  }

  // optional .PBMidLayer.SpeakerResult errorsp = 7;
  if (has_errorsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->errorsp(), target);
  }

  // optional .PBMidLayer.SpeakerResult rightsp = 8;
  if (has_rightsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rightsp(), target);
  }

  // optional .PBMidLayer.KeywordResult errorkw = 9;
  if (has_errorkw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->errorkw(), target);
  }

  // optional .PBMidLayer.KeywordResult rightkw = 10;
  if (has_rightkw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rightkw(), target);
  }

  // optional .PBMidLayer.TranscriptResult errorts = 11;
  if (has_errorts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->errorts(), target);
  }

  // optional .PBMidLayer.TranscriptResult rightts = 12;
  if (has_rightts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->rightts(), target);
  }

  // optional .PBMidLayer.VADResult rightvad = 13;
  if (has_rightvad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->rightvad(), target);
  }

  // optional .PBMidLayer.VADResult errorvad = 14;
  if (has_errorvad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->errorvad(), target);
  }

  // optional .PBMidLayer.SpeechSegResult rightss = 15;
  if (has_rightss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->rightss(), target);
  }

  // optional .PBMidLayer.SpeechSegResult errorss = 16;
  if (has_errorss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->errorss(), target);
  }

  // optional .PBMidLayer.DTMFResult rightdtmf = 17;
  if (has_rightdtmf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->rightdtmf(), target);
  }

  // optional .PBMidLayer.DTMFResult errordtmf = 18;
  if (has_errordtmf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->errordtmf(), target);
  }

  // optional .PBMidLayer.SystemCode syscode = 19;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedbackNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBMidLayer.AudioFileTag filetag = 2;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .PBMidLayer.PreprocessResult errorpp = 5;
    if (has_errorpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorpp());
    }

    // optional .PBMidLayer.PreprocessResult rightpp = 6;
    if (has_rightpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightpp());
    }

    // optional .PBMidLayer.SpeakerResult errorsp = 7;
    if (has_errorsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorsp());
    }

    // optional .PBMidLayer.SpeakerResult rightsp = 8;
    if (has_rightsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBMidLayer.KeywordResult errorkw = 9;
    if (has_errorkw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorkw());
    }

    // optional .PBMidLayer.KeywordResult rightkw = 10;
    if (has_rightkw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightkw());
    }

    // optional .PBMidLayer.TranscriptResult errorts = 11;
    if (has_errorts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorts());
    }

    // optional .PBMidLayer.TranscriptResult rightts = 12;
    if (has_rightts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightts());
    }

    // optional .PBMidLayer.VADResult rightvad = 13;
    if (has_rightvad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightvad());
    }

    // optional .PBMidLayer.VADResult errorvad = 14;
    if (has_errorvad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorvad());
    }

    // optional .PBMidLayer.SpeechSegResult rightss = 15;
    if (has_rightss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightss());
    }

    // optional .PBMidLayer.SpeechSegResult errorss = 16;
    if (has_errorss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorss());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBMidLayer.DTMFResult rightdtmf = 17;
    if (has_rightdtmf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightdtmf());
    }

    // optional .PBMidLayer.DTMFResult errordtmf = 18;
    if (has_errordtmf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errordtmf());
    }

    // optional .PBMidLayer.SystemCode syscode = 19;
    if (has_syscode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedbackNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedbackNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedbackNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedbackNotify::MergeFrom(const FeedbackNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_errorpp()) {
      mutable_errorpp()->::PBMidLayer::PreprocessResult::MergeFrom(from.errorpp());
    }
    if (from.has_rightpp()) {
      mutable_rightpp()->::PBMidLayer::PreprocessResult::MergeFrom(from.rightpp());
    }
    if (from.has_errorsp()) {
      mutable_errorsp()->::PBMidLayer::SpeakerResult::MergeFrom(from.errorsp());
    }
    if (from.has_rightsp()) {
      mutable_rightsp()->::PBMidLayer::SpeakerResult::MergeFrom(from.rightsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errorkw()) {
      mutable_errorkw()->::PBMidLayer::KeywordResult::MergeFrom(from.errorkw());
    }
    if (from.has_rightkw()) {
      mutable_rightkw()->::PBMidLayer::KeywordResult::MergeFrom(from.rightkw());
    }
    if (from.has_errorts()) {
      mutable_errorts()->::PBMidLayer::TranscriptResult::MergeFrom(from.errorts());
    }
    if (from.has_rightts()) {
      mutable_rightts()->::PBMidLayer::TranscriptResult::MergeFrom(from.rightts());
    }
    if (from.has_rightvad()) {
      mutable_rightvad()->::PBMidLayer::VADResult::MergeFrom(from.rightvad());
    }
    if (from.has_errorvad()) {
      mutable_errorvad()->::PBMidLayer::VADResult::MergeFrom(from.errorvad());
    }
    if (from.has_rightss()) {
      mutable_rightss()->::PBMidLayer::SpeechSegResult::MergeFrom(from.rightss());
    }
    if (from.has_errorss()) {
      mutable_errorss()->::PBMidLayer::SpeechSegResult::MergeFrom(from.errorss());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rightdtmf()) {
      mutable_rightdtmf()->::PBMidLayer::DTMFResult::MergeFrom(from.rightdtmf());
    }
    if (from.has_errordtmf()) {
      mutable_errordtmf()->::PBMidLayer::DTMFResult::MergeFrom(from.errordtmf());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedbackNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedbackNotify::CopyFrom(const FeedbackNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_errorpp()) {
    if (!this->errorpp().IsInitialized()) return false;
  }
  if (has_rightpp()) {
    if (!this->rightpp().IsInitialized()) return false;
  }
  if (has_errorsp()) {
    if (!this->errorsp().IsInitialized()) return false;
  }
  if (has_rightsp()) {
    if (!this->rightsp().IsInitialized()) return false;
  }
  if (has_errorkw()) {
    if (!this->errorkw().IsInitialized()) return false;
  }
  if (has_rightkw()) {
    if (!this->rightkw().IsInitialized()) return false;
  }
  if (has_errorts()) {
    if (!this->errorts().IsInitialized()) return false;
  }
  if (has_rightts()) {
    if (!this->rightts().IsInitialized()) return false;
  }
  if (has_rightvad()) {
    if (!this->rightvad().IsInitialized()) return false;
  }
  if (has_errorvad()) {
    if (!this->errorvad().IsInitialized()) return false;
  }
  if (has_rightss()) {
    if (!this->rightss().IsInitialized()) return false;
  }
  if (has_errorss()) {
    if (!this->errorss().IsInitialized()) return false;
  }
  if (has_rightdtmf()) {
    if (!this->rightdtmf().IsInitialized()) return false;
  }
  if (has_errordtmf()) {
    if (!this->errordtmf().IsInitialized()) return false;
  }
  return true;
}

void FeedbackNotify::Swap(FeedbackNotify* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(errorpp_, other->errorpp_);
    std::swap(rightpp_, other->rightpp_);
    std::swap(errorsp_, other->errorsp_);
    std::swap(rightsp_, other->rightsp_);
    std::swap(errorkw_, other->errorkw_);
    std::swap(rightkw_, other->rightkw_);
    std::swap(errorts_, other->errorts_);
    std::swap(rightts_, other->rightts_);
    std::swap(rightvad_, other->rightvad_);
    std::swap(errorvad_, other->errorvad_);
    std::swap(rightss_, other->rightss_);
    std::swap(errorss_, other->errorss_);
    std::swap(rightdtmf_, other->rightdtmf_);
    std::swap(errordtmf_, other->errordtmf_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedbackNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedbackNotify_descriptor_;
  metadata.reflection = FeedbackNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchRequest::kTaskidFieldNumber;
const int SearchRequest::kSyscodeFieldNumber;
const int SearchRequest::kMaxresultFieldNumber;
const int SearchRequest::kTasktypeFieldNumber;
const int SearchRequest::kGenderFieldNumber;
const int SearchRequest::kStarttimeFieldNumber;
const int SearchRequest::kEndtimeFieldNumber;
const int SearchRequest::kTelpatternFieldNumber;
const int SearchRequest::kLangFieldNumber;
const int SearchRequest::kKeywordsFieldNumber;
const int SearchRequest::kSpeechsegFieldNumber;
const int SearchRequest::kSpeakersFieldNumber;
const int SearchRequest::kVoiceFieldNumber;
const int SearchRequest::kCalllistFieldNumber;
#endif  // !_MSC_VER

SearchRequest::SearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  maxresult_ = 0;
  tasktype_ = 0;
  gender_ = 0;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRequest::~SearchRequest() {
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    delete lang_;
  }
  if (voice_ != &::google::protobuf::internal::kEmptyString) {
    delete voice_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_descriptor_;
}

const SearchRequest& SearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchRequest* SearchRequest::default_instance_ = NULL;

SearchRequest* SearchRequest::New() const {
  return new SearchRequest;
}

void SearchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    maxresult_ = 0;
    tasktype_ = 0;
    gender_ = 0;
    starttime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::kEmptyString) {
        lang_->clear();
      }
    }
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::kEmptyString) {
        voice_->clear();
      }
    }
  }
  telpattern_.Clear();
  keywords_.Clear();
  speechseg_.Clear();
  speakers_.Clear();
  calllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxresult;
        break;
      }

      // required int32 maxresult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresult_)));
          set_has_maxresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tasktype;
        break;
      }

      // required .PBMidLayer.SearchTaskType tasktype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SearchTaskType_IsValid(value)) {
            set_tasktype(static_cast< ::PBMidLayer::SearchTaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional .PBMidLayer.GenderType gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::GenderType_IsValid(value)) {
            set_gender(static_cast< ::PBMidLayer::GenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_telpattern;
        break;
      }

      // repeated .PBMidLayer.PhoneNumber telpattern = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telpattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_telpattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_telpattern;
        if (input->ExpectTag(74)) goto parse_lang;
        break;
      }

      // optional string lang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_keywords;
        break;
      }

      // repeated .PBMidLayer.KeywordRule keywords = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keywords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_keywords;
        if (input->ExpectTag(90)) goto parse_speechseg;
        break;
      }

      // repeated .PBMidLayer.SpeechSegRule speechseg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechseg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speechseg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_speechseg;
        if (input->ExpectTag(98)) goto parse_speakers;
        break;
      }

      // repeated .PBMidLayer.SpeakerRule speakers = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speakers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speakers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_speakers;
        if (input->ExpectTag(106)) goto parse_voice;
        break;
      }

      // optional bytes voice = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_calllist;
        break;
      }

      // repeated string calllist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_calllist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->calllist(this->calllist_size() - 1).data(),
            this->calllist(this->calllist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_calllist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required int32 maxresult = 3;
  if (has_maxresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxresult(), output);
  }

  // required .PBMidLayer.SearchTaskType tasktype = 4;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tasktype(), output);
  }

  // optional .PBMidLayer.GenderType gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->starttime(), output);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->endtime(), output);
  }

  // repeated .PBMidLayer.PhoneNumber telpattern = 8;
  for (int i = 0; i < this->telpattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->telpattern(i), output);
  }

  // optional string lang = 9;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lang(), output);
  }

  // repeated .PBMidLayer.KeywordRule keywords = 10;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->keywords(i), output);
  }

  // repeated .PBMidLayer.SpeechSegRule speechseg = 11;
  for (int i = 0; i < this->speechseg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->speechseg(i), output);
  }

  // repeated .PBMidLayer.SpeakerRule speakers = 12;
  for (int i = 0; i < this->speakers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->speakers(i), output);
  }

  // optional bytes voice = 13;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->voice(), output);
  }

  // repeated string calllist = 14;
  for (int i = 0; i < this->calllist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->calllist(i).data(), this->calllist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->calllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required int32 maxresult = 3;
  if (has_maxresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxresult(), target);
  }

  // required .PBMidLayer.SearchTaskType tasktype = 4;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tasktype(), target);
  }

  // optional .PBMidLayer.GenderType gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->starttime(), target);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->endtime(), target);
  }

  // repeated .PBMidLayer.PhoneNumber telpattern = 8;
  for (int i = 0; i < this->telpattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->telpattern(i), target);
  }

  // optional string lang = 9;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lang(), target);
  }

  // repeated .PBMidLayer.KeywordRule keywords = 10;
  for (int i = 0; i < this->keywords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->keywords(i), target);
  }

  // repeated .PBMidLayer.SpeechSegRule speechseg = 11;
  for (int i = 0; i < this->speechseg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->speechseg(i), target);
  }

  // repeated .PBMidLayer.SpeakerRule speakers = 12;
  for (int i = 0; i < this->speakers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->speakers(i), target);
  }

  // optional bytes voice = 13;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->voice(), target);
  }

  // repeated string calllist = 14;
  for (int i = 0; i < this->calllist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->calllist(i).data(), this->calllist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->calllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required int32 maxresult = 3;
    if (has_maxresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresult());
    }

    // required .PBMidLayer.SearchTaskType tasktype = 4;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());
    }

    // optional .PBMidLayer.GenderType gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional uint64 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string lang = 9;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // optional bytes voice = 13;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

  }
  // repeated .PBMidLayer.PhoneNumber telpattern = 8;
  total_size += 1 * this->telpattern_size();
  for (int i = 0; i < this->telpattern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->telpattern(i));
  }

  // repeated .PBMidLayer.KeywordRule keywords = 10;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keywords(i));
  }

  // repeated .PBMidLayer.SpeechSegRule speechseg = 11;
  total_size += 1 * this->speechseg_size();
  for (int i = 0; i < this->speechseg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speechseg(i));
  }

  // repeated .PBMidLayer.SpeakerRule speakers = 12;
  total_size += 1 * this->speakers_size();
  for (int i = 0; i < this->speakers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speakers(i));
  }

  // repeated string calllist = 14;
  total_size += 1 * this->calllist_size();
  for (int i = 0; i < this->calllist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->calllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  telpattern_.MergeFrom(from.telpattern_);
  keywords_.MergeFrom(from.keywords_);
  speechseg_.MergeFrom(from.speechseg_);
  speakers_.MergeFrom(from.speakers_);
  calllist_.MergeFrom(from.calllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_maxresult()) {
      set_maxresult(from.maxresult());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < telpattern_size(); i++) {
    if (!this->telpattern(i).IsInitialized()) return false;
  }
  for (int i = 0; i < keywords_size(); i++) {
    if (!this->keywords(i).IsInitialized()) return false;
  }
  for (int i = 0; i < speechseg_size(); i++) {
    if (!this->speechseg(i).IsInitialized()) return false;
  }
  for (int i = 0; i < speakers_size(); i++) {
    if (!this->speakers(i).IsInitialized()) return false;
  }
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(maxresult_, other->maxresult_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(gender_, other->gender_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    telpattern_.Swap(&other->telpattern_);
    std::swap(lang_, other->lang_);
    keywords_.Swap(&other->keywords_);
    speechseg_.Swap(&other->speechseg_);
    speakers_.Swap(&other->speakers_);
    std::swap(voice_, other->voice_);
    calllist_.Swap(&other->calllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchRequest_descriptor_;
  metadata.reflection = SearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchAbortRequest::kTaskidFieldNumber;
const int SearchAbortRequest::kSyscodeFieldNumber;
const int SearchAbortRequest::kAborttaskidFieldNumber;
#endif  // !_MSC_VER

SearchAbortRequest::SearchAbortRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchAbortRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

SearchAbortRequest::SearchAbortRequest(const SearchAbortRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchAbortRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  aborttaskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchAbortRequest::~SearchAbortRequest() {
  SharedDtor();
}

void SearchAbortRequest::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (aborttaskid_ != &::google::protobuf::internal::kEmptyString) {
    delete aborttaskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void SearchAbortRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchAbortRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchAbortRequest_descriptor_;
}

const SearchAbortRequest& SearchAbortRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchAbortRequest* SearchAbortRequest::default_instance_ = NULL;

SearchAbortRequest* SearchAbortRequest::New() const {
  return new SearchAbortRequest;
}

void SearchAbortRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_aborttaskid()) {
      if (aborttaskid_ != &::google::protobuf::internal::kEmptyString) {
        aborttaskid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchAbortRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_aborttaskid;
        break;
      }

      // required string aborttaskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aborttaskid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aborttaskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aborttaskid().data(), this->aborttaskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchAbortRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required string aborttaskid = 3;
  if (has_aborttaskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aborttaskid().data(), this->aborttaskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->aborttaskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchAbortRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required string aborttaskid = 3;
  if (has_aborttaskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aborttaskid().data(), this->aborttaskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aborttaskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchAbortRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required string aborttaskid = 3;
    if (has_aborttaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aborttaskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchAbortRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchAbortRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchAbortRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchAbortRequest::MergeFrom(const SearchAbortRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_aborttaskid()) {
      set_aborttaskid(from.aborttaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchAbortRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchAbortRequest::CopyFrom(const SearchAbortRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchAbortRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SearchAbortRequest::Swap(SearchAbortRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(aborttaskid_, other->aborttaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchAbortRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchAbortRequest_descriptor_;
  metadata.reflection = SearchAbortRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchResultNotify::kTaskidFieldNumber;
const int SearchResultNotify::kSyscodeFieldNumber;
const int SearchResultNotify::kStatusFieldNumber;
const int SearchResultNotify::kTasktypeFieldNumber;
const int SearchResultNotify::kVoicesFieldNumber;
const int SearchResultNotify::kSpeakersFieldNumber;
#endif  // !_MSC_VER

SearchResultNotify::SearchResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchResultNotify::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
}

SearchResultNotify::SearchResultNotify(const SearchResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchResultNotify::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  status_ = NULL;
  tasktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResultNotify::~SearchResultNotify() {
  SharedDtor();
}

void SearchResultNotify::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
    delete status_;
  }
}

void SearchResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResultNotify_descriptor_;
}

const SearchResultNotify& SearchResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchResultNotify* SearchResultNotify::default_instance_ = NULL;

SearchResultNotify* SearchResultNotify::New() const {
  return new SearchResultNotify;
}

void SearchResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    tasktype_ = 0;
  }
  voices_.Clear();
  speakers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tasktype;
        break;
      }

      // optional .PBMidLayer.SearchTaskType tasktype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SearchTaskType_IsValid(value)) {
            set_tasktype(static_cast< ::PBMidLayer::SearchTaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_voices;
        break;
      }

      // repeated .PBMidLayer.SearchFileResult voices = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_voices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_voices;
        if (input->ExpectTag(50)) goto parse_speakers;
        break;
      }

      // repeated .PBMidLayer.SpeakerItem speakers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speakers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speakers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_speakers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  // optional .PBMidLayer.SearchTaskType tasktype = 4;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tasktype(), output);
  }

  // repeated .PBMidLayer.SearchFileResult voices = 5;
  for (int i = 0; i < this->voices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->voices(i), output);
  }

  // repeated .PBMidLayer.SpeakerItem speakers = 6;
  for (int i = 0; i < this->speakers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->speakers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  // optional .PBMidLayer.SearchTaskType tasktype = 4;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tasktype(), target);
  }

  // repeated .PBMidLayer.SearchFileResult voices = 5;
  for (int i = 0; i < this->voices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->voices(i), target);
  }

  // repeated .PBMidLayer.SpeakerItem speakers = 6;
  for (int i = 0; i < this->speakers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->speakers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchResultNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required .PBMidLayer.OperationStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .PBMidLayer.SearchTaskType tasktype = 4;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());
    }

  }
  // repeated .PBMidLayer.SearchFileResult voices = 5;
  total_size += 1 * this->voices_size();
  for (int i = 0; i < this->voices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->voices(i));
  }

  // repeated .PBMidLayer.SpeakerItem speakers = 6;
  total_size += 1 * this->speakers_size();
  for (int i = 0; i < this->speakers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speakers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResultNotify::MergeFrom(const SearchResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  voices_.MergeFrom(from.voices_);
  speakers_.MergeFrom(from.speakers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResultNotify::CopyFrom(const SearchResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResultNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < voices_size(); i++) {
    if (!this->voices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < speakers_size(); i++) {
    if (!this->speakers(i).IsInitialized()) return false;
  }
  return true;
}

void SearchResultNotify::Swap(SearchResultNotify* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(status_, other->status_);
    std::swap(tasktype_, other->tasktype_);
    voices_.Swap(&other->voices_);
    speakers_.Swap(&other->speakers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResultNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResultNotify_descriptor_;
  metadata.reflection = SearchResultNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchResponse::kTaskidFieldNumber;
const int SearchResponse::kSyscodeFieldNumber;
const int SearchResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

SearchResponse::SearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchResponse::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
}

SearchResponse::SearchResponse(const SearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchResponse::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResponse::~SearchResponse() {
  SharedDtor();
}

void SearchResponse::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
    delete status_;
  }
}

void SearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResponse_descriptor_;
}

const SearchResponse& SearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchResponse* SearchResponse::default_instance_ = NULL;

SearchResponse* SearchResponse::New() const {
  return new SearchResponse;
}

void SearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required .PBMidLayer.OperationStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResponse_descriptor_;
  metadata.reflection = SearchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchStateRequest::kOperidFieldNumber;
const int SearchStateRequest::kSyscodeFieldNumber;
const int SearchStateRequest::kRequesttaskidFieldNumber;
#endif  // !_MSC_VER

SearchStateRequest::SearchStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchStateRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

SearchStateRequest::SearchStateRequest(const SearchStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchStateRequest::SharedCtor() {
  _cached_size_ = 0;
  operid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  requesttaskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchStateRequest::~SearchStateRequest() {
  SharedDtor();
}

void SearchStateRequest::SharedDtor() {
  if (operid_ != &::google::protobuf::internal::kEmptyString) {
    delete operid_;
  }
  if (requesttaskid_ != &::google::protobuf::internal::kEmptyString) {
    delete requesttaskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void SearchStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchStateRequest_descriptor_;
}

const SearchStateRequest& SearchStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchStateRequest* SearchStateRequest::default_instance_ = NULL;

SearchStateRequest* SearchStateRequest::New() const {
  return new SearchStateRequest;
}

void SearchStateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operid()) {
      if (operid_ != &::google::protobuf::internal::kEmptyString) {
        operid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_requesttaskid()) {
      if (requesttaskid_ != &::google::protobuf::internal::kEmptyString) {
        requesttaskid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string operid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operid().data(), this->operid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_requesttaskid;
        break;
      }

      // required string requesttaskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requesttaskid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesttaskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requesttaskid().data(), this->requesttaskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->operid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required string requesttaskid = 3;
  if (has_requesttaskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requesttaskid().data(), this->requesttaskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->requesttaskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required string requesttaskid = 3;
  if (has_requesttaskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requesttaskid().data(), this->requesttaskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requesttaskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string operid = 1;
    if (has_operid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required string requesttaskid = 3;
    if (has_requesttaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesttaskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchStateRequest::MergeFrom(const SearchStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operid()) {
      set_operid(from.operid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_requesttaskid()) {
      set_requesttaskid(from.requesttaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchStateRequest::CopyFrom(const SearchStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SearchStateRequest::Swap(SearchStateRequest* other) {
  if (other != this) {
    std::swap(operid_, other->operid_);
    std::swap(syscode_, other->syscode_);
    std::swap(requesttaskid_, other->requesttaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchStateRequest_descriptor_;
  metadata.reflection = SearchStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchStateResponse::kOperidFieldNumber;
const int SearchStateResponse::kSyscodeFieldNumber;
const int SearchStateResponse::kStatusFieldNumber;
const int SearchStateResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SearchStateResponse::SearchStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchStateResponse::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
  state_ = const_cast< ::PBMidLayer::SearchTaskState*>(&::PBMidLayer::SearchTaskState::default_instance());
}

SearchStateResponse::SearchStateResponse(const SearchStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchStateResponse::SharedCtor() {
  _cached_size_ = 0;
  operid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  status_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchStateResponse::~SearchStateResponse() {
  SharedDtor();
}

void SearchStateResponse::SharedDtor() {
  if (operid_ != &::google::protobuf::internal::kEmptyString) {
    delete operid_;
  }
  if (this != default_instance_) {
    delete syscode_;
    delete status_;
    delete state_;
  }
}

void SearchStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchStateResponse_descriptor_;
}

const SearchStateResponse& SearchStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchStateResponse* SearchStateResponse::default_instance_ = NULL;

SearchStateResponse* SearchStateResponse::New() const {
  return new SearchStateResponse;
}

void SearchStateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operid()) {
      if (operid_ != &::google::protobuf::internal::kEmptyString) {
        operid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::PBMidLayer::SearchTaskState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string operid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operid().data(), this->operid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_state;
        break;
      }

      // required .PBMidLayer.SearchTaskState state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->operid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  // required .PBMidLayer.SearchTaskState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  // required .PBMidLayer.SearchTaskState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string operid = 1;
    if (has_operid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required .PBMidLayer.OperationStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required .PBMidLayer.SearchTaskState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchStateResponse::MergeFrom(const SearchStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operid()) {
      set_operid(from.operid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_state()) {
      mutable_state()->::PBMidLayer::SearchTaskState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchStateResponse::CopyFrom(const SearchStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void SearchStateResponse::Swap(SearchStateResponse* other) {
  if (other != this) {
    std::swap(operid_, other->operid_);
    std::swap(syscode_, other->syscode_);
    std::swap(status_, other->status_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchStateResponse_descriptor_;
  metadata.reflection = SearchStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileRequest::kOperidFieldNumber;
const int GetFileRequest::kSyscodeFieldNumber;
const int GetFileRequest::kCallidFieldNumber;
const int GetFileRequest::kFiletagFieldNumber;
#endif  // !_MSC_VER

GetFileRequest::GetFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

GetFileRequest::GetFileRequest(const GetFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileRequest::SharedCtor() {
  _cached_size_ = 0;
  operid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileRequest::~GetFileRequest() {
  SharedDtor();
}

void GetFileRequest::SharedDtor() {
  if (operid_ != &::google::protobuf::internal::kEmptyString) {
    delete operid_;
  }
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void GetFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileRequest_descriptor_;
}

const GetFileRequest& GetFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

GetFileRequest* GetFileRequest::default_instance_ = NULL;

GetFileRequest* GetFileRequest::New() const {
  return new GetFileRequest;
}

void GetFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operid()) {
      if (operid_ != &::google::protobuf::internal::kEmptyString) {
        operid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string operid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operid().data(), this->operid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_callid;
        break;
      }

      // required string callid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filetag;
        break;
      }

      // required .PBMidLayer.AudioFileTag filetag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->operid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->callid(), output);
  }

  // required .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->callid(), target);
  }

  // required .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string operid = 1;
    if (has_operid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required string callid = 3;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBMidLayer.AudioFileTag filetag = 4;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileRequest::MergeFrom(const GetFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operid()) {
      set_operid(from.operid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileRequest::CopyFrom(const GetFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetFileRequest::Swap(GetFileRequest* other) {
  if (other != this) {
    std::swap(operid_, other->operid_);
    std::swap(syscode_, other->syscode_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileRequest_descriptor_;
  metadata.reflection = GetFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileResponse::kOperidFieldNumber;
const int GetFileResponse::kSyscodeFieldNumber;
const int GetFileResponse::kIsdataFieldNumber;
const int GetFileResponse::kFilelocationFieldNumber;
const int GetFileResponse::kFiledataFieldNumber;
#endif  // !_MSC_VER

GetFileResponse::GetFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileResponse::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
  filelocation_ = const_cast< ::PBMidLayer::FileLocationNotify*>(&::PBMidLayer::FileLocationNotify::default_instance());
  filedata_ = const_cast< ::PBMidLayer::FileDataNotify*>(&::PBMidLayer::FileDataNotify::default_instance());
}

GetFileResponse::GetFileResponse(const GetFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileResponse::SharedCtor() {
  _cached_size_ = 0;
  operid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  isdata_ = false;
  filelocation_ = NULL;
  filedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileResponse::~GetFileResponse() {
  SharedDtor();
}

void GetFileResponse::SharedDtor() {
  if (operid_ != &::google::protobuf::internal::kEmptyString) {
    delete operid_;
  }
  if (this != default_instance_) {
    delete syscode_;
    delete filelocation_;
    delete filedata_;
  }
}

void GetFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileResponse_descriptor_;
}

const GetFileResponse& GetFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

GetFileResponse* GetFileResponse::default_instance_ = NULL;

GetFileResponse* GetFileResponse::New() const {
  return new GetFileResponse;
}

void GetFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operid()) {
      if (operid_ != &::google::protobuf::internal::kEmptyString) {
        operid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    isdata_ = false;
    if (has_filelocation()) {
      if (filelocation_ != NULL) filelocation_->::PBMidLayer::FileLocationNotify::Clear();
    }
    if (has_filedata()) {
      if (filedata_ != NULL) filedata_->::PBMidLayer::FileDataNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string operid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operid().data(), this->operid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isdata;
        break;
      }

      // required bool isdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdata_)));
          set_has_isdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filelocation;
        break;
      }

      // optional .PBMidLayer.FileLocationNotify filelocation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filelocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filelocation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filedata;
        break;
      }

      // optional .PBMidLayer.FileDataNotify filedata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->operid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required bool isdata = 3;
  if (has_isdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdata(), output);
  }

  // optional .PBMidLayer.FileLocationNotify filelocation = 4;
  if (has_filelocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->filelocation(), output);
  }

  // optional .PBMidLayer.FileDataNotify filedata = 5;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string operid = 1;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operid().data(), this->operid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required bool isdata = 3;
  if (has_isdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdata(), target);
  }

  // optional .PBMidLayer.FileLocationNotify filelocation = 4;
  if (has_filelocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->filelocation(), target);
  }

  // optional .PBMidLayer.FileDataNotify filedata = 5;
  if (has_filedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string operid = 1;
    if (has_operid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required bool isdata = 3;
    if (has_isdata()) {
      total_size += 1 + 1;
    }

    // optional .PBMidLayer.FileLocationNotify filelocation = 4;
    if (has_filelocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filelocation());
    }

    // optional .PBMidLayer.FileDataNotify filedata = 5;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileResponse::MergeFrom(const GetFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operid()) {
      set_operid(from.operid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_isdata()) {
      set_isdata(from.isdata());
    }
    if (from.has_filelocation()) {
      mutable_filelocation()->::PBMidLayer::FileLocationNotify::MergeFrom(from.filelocation());
    }
    if (from.has_filedata()) {
      mutable_filedata()->::PBMidLayer::FileDataNotify::MergeFrom(from.filedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileResponse::CopyFrom(const GetFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_filelocation()) {
    if (!this->filelocation().IsInitialized()) return false;
  }
  if (has_filedata()) {
    if (!this->filedata().IsInitialized()) return false;
  }
  return true;
}

void GetFileResponse::Swap(GetFileResponse* other) {
  if (other != this) {
    std::swap(operid_, other->operid_);
    std::swap(syscode_, other->syscode_);
    std::swap(isdata_, other->isdata_);
    std::swap(filelocation_, other->filelocation_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileResponse_descriptor_;
  metadata.reflection = GetFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddLangSampRequest::kTaskidFieldNumber;
const int AddLangSampRequest::kSyscodeFieldNumber;
const int AddLangSampRequest::kLangFieldNumber;
const int AddLangSampRequest::kFilesFieldNumber;
#endif  // !_MSC_VER

AddLangSampRequest::AddLangSampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddLangSampRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

AddLangSampRequest::AddLangSampRequest(const AddLangSampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddLangSampRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddLangSampRequest::~AddLangSampRequest() {
  SharedDtor();
}

void AddLangSampRequest::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    delete lang_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void AddLangSampRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddLangSampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddLangSampRequest_descriptor_;
}

const AddLangSampRequest& AddLangSampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

AddLangSampRequest* AddLangSampRequest::default_instance_ = NULL;

AddLangSampRequest* AddLangSampRequest::New() const {
  return new AddLangSampRequest;
}

void AddLangSampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::kEmptyString) {
        lang_->clear();
      }
    }
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddLangSampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lang;
        break;
      }

      // required string lang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_files;
        break;
      }

      // repeated .PBMidLayer.FileLocationNotify files = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddLangSampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lang(), output);
  }

  // repeated .PBMidLayer.FileLocationNotify files = 4;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddLangSampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lang(), target);
  }

  // repeated .PBMidLayer.FileLocationNotify files = 4;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddLangSampRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required string lang = 3;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

  }
  // repeated .PBMidLayer.FileLocationNotify files = 4;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddLangSampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddLangSampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddLangSampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddLangSampRequest::MergeFrom(const AddLangSampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddLangSampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLangSampRequest::CopyFrom(const AddLangSampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLangSampRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < files_size(); i++) {
    if (!this->files(i).IsInitialized()) return false;
  }
  return true;
}

void AddLangSampRequest::Swap(AddLangSampRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(lang_, other->lang_);
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddLangSampRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddLangSampRequest_descriptor_;
  metadata.reflection = AddLangSampRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddLangSampResponse::kTaskidFieldNumber;
const int AddLangSampResponse::kSyscodeFieldNumber;
const int AddLangSampResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

AddLangSampResponse::AddLangSampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddLangSampResponse::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
  status_ = const_cast< ::PBMidLayer::OperationStatus*>(&::PBMidLayer::OperationStatus::default_instance());
}

AddLangSampResponse::AddLangSampResponse(const AddLangSampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddLangSampResponse::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddLangSampResponse::~AddLangSampResponse() {
  SharedDtor();
}

void AddLangSampResponse::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
    delete status_;
  }
}

void AddLangSampResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddLangSampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddLangSampResponse_descriptor_;
}

const AddLangSampResponse& AddLangSampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

AddLangSampResponse* AddLangSampResponse::default_instance_ = NULL;

AddLangSampResponse* AddLangSampResponse::New() const {
  return new AddLangSampResponse;
}

void AddLangSampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBMidLayer::OperationStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddLangSampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // required .PBMidLayer.OperationStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddLangSampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddLangSampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required .PBMidLayer.OperationStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddLangSampResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBMidLayer.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required .PBMidLayer.OperationStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddLangSampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddLangSampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddLangSampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddLangSampResponse::MergeFrom(const AddLangSampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_status()) {
      mutable_status()->::PBMidLayer::OperationStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddLangSampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLangSampResponse::CopyFrom(const AddLangSampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLangSampResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void AddLangSampResponse::Swap(AddLangSampResponse* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddLangSampResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddLangSampResponse_descriptor_;
  metadata.reflection = AddLangSampResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationStatus::kCodeFieldNumber;
const int OperationStatus::kDescriptionFieldNumber;
#endif  // !_MSC_VER

OperationStatus::OperationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationStatus::InitAsDefaultInstance() {
}

OperationStatus::OperationStatus(const OperationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationStatus::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationStatus::~OperationStatus() {
  SharedDtor();
}

void OperationStatus::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void OperationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationStatus_descriptor_;
}

const OperationStatus& OperationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

OperationStatus* OperationStatus::default_instance_ = NULL;

OperationStatus* OperationStatus::New() const {
  return new OperationStatus;
}

void OperationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationStatus::MergeFrom(const OperationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OperationStatus::Swap(OperationStatus* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationStatus_descriptor_;
  metadata.reflection = OperationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreprocessResult::kTypeFieldNumber;
const int PreprocessResult::kLanguagenameFieldNumber;
const int PreprocessResult::kScoreFieldNumber;
const int PreprocessResult::kValidlenFieldNumber;
const int PreprocessResult::kGenderFieldNumber;
const int PreprocessResult::kSpeakernumFieldNumber;
const int PreprocessResult::kCallidFieldNumber;
const int PreprocessResult::kFiletagFieldNumber;
#endif  // !_MSC_VER

PreprocessResult::PreprocessResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreprocessResult::InitAsDefaultInstance() {
}

PreprocessResult::PreprocessResult(const PreprocessResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreprocessResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  validlen_ = 0u;
  gender_ = 0;
  speakernum_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreprocessResult::~PreprocessResult() {
  SharedDtor();
}

void PreprocessResult::SharedDtor() {
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
  }
}

void PreprocessResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreprocessResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreprocessResult_descriptor_;
}

const PreprocessResult& PreprocessResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

PreprocessResult* PreprocessResult::default_instance_ = NULL;

PreprocessResult* PreprocessResult::New() const {
  return new PreprocessResult;
}

void PreprocessResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    score_ = 0;
    validlen_ = 0u;
    gender_ = 0;
    speakernum_ = 0;
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreprocessResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.SpeechType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SpeechType_IsValid(value)) {
            set_type(static_cast< ::PBMidLayer::SpeechType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languagename;
        break;
      }

      // optional string languagename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_validlen;
        break;
      }

      // optional uint32 validlen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validlen_)));
          set_has_validlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional .PBMidLayer.GenderType gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::GenderType_IsValid(value)) {
            set_gender(static_cast< ::PBMidLayer::GenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speakernum;
        break;
      }

      // optional int32 speakernum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speakernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speakernum_)));
          set_has_speakernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_callid;
        break;
      }

      // optional string callid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filetag;
        break;
      }

      // optional .PBMidLayer.AudioFileTag filetag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreprocessResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.SpeechType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string languagename = 2;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->languagename(), output);
  }

  // optional float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // optional uint32 validlen = 4;
  if (has_validlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->validlen(), output);
  }

  // optional .PBMidLayer.GenderType gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }

  // optional int32 speakernum = 6;
  if (has_speakernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speakernum(), output);
  }

  // optional string callid = 7;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->callid(), output);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 8;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreprocessResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.SpeechType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string languagename = 2;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->languagename(), target);
  }

  // optional float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // optional uint32 validlen = 4;
  if (has_validlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->validlen(), target);
  }

  // optional .PBMidLayer.GenderType gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }

  // optional int32 speakernum = 6;
  if (has_speakernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speakernum(), target);
  }

  // optional string callid = 7;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->callid(), target);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 8;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreprocessResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.SpeechType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string languagename = 2;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional uint32 validlen = 4;
    if (has_validlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->validlen());
    }

    // optional .PBMidLayer.GenderType gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional int32 speakernum = 6;
    if (has_speakernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speakernum());
    }

    // optional string callid = 7;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // optional .PBMidLayer.AudioFileTag filetag = 8;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreprocessResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreprocessResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreprocessResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreprocessResult::MergeFrom(const PreprocessResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_validlen()) {
      set_validlen(from.validlen());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_speakernum()) {
      set_speakernum(from.speakernum());
    }
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreprocessResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessResult::CopyFrom(const PreprocessResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PreprocessResult::Swap(PreprocessResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(languagename_, other->languagename_);
    std::swap(score_, other->score_);
    std::swap(validlen_, other->validlen_);
    std::swap(gender_, other->gender_);
    std::swap(speakernum_, other->speakernum_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreprocessResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreprocessResult_descriptor_;
  metadata.reflection = PreprocessResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeakerResult::kSpeakernumFieldNumber;
const int SpeakerResult::kSpeakersFieldNumber;
const int SpeakerResult::kCallidFieldNumber;
const int SpeakerResult::kFiletagFieldNumber;
#endif  // !_MSC_VER

SpeakerResult::SpeakerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeakerResult::InitAsDefaultInstance() {
}

SpeakerResult::SpeakerResult(const SpeakerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeakerResult::SharedCtor() {
  _cached_size_ = 0;
  speakernum_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeakerResult::~SpeakerResult() {
  SharedDtor();
}

void SpeakerResult::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
  }
}

void SpeakerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeakerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeakerResult_descriptor_;
}

const SpeakerResult& SpeakerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SpeakerResult* SpeakerResult::default_instance_ = NULL;

SpeakerResult* SpeakerResult::New() const {
  return new SpeakerResult;
}

void SpeakerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speakernum_ = 0;
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  speakers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeakerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 speakernum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speakernum_)));
          set_has_speakernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_speakers;
        break;
      }

      // repeated .PBMidLayer.SpeakerItem speakers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speakers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speakers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_speakers;
        if (input->ExpectTag(26)) goto parse_callid;
        break;
      }

      // optional string callid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filetag;
        break;
      }

      // optional .PBMidLayer.AudioFileTag filetag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeakerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 speakernum = 1;
  if (has_speakernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->speakernum(), output);
  }

  // repeated .PBMidLayer.SpeakerItem speakers = 2;
  for (int i = 0; i < this->speakers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speakers(i), output);
  }

  // optional string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->callid(), output);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeakerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 speakernum = 1;
  if (has_speakernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->speakernum(), target);
  }

  // repeated .PBMidLayer.SpeakerItem speakers = 2;
  for (int i = 0; i < this->speakers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->speakers(i), target);
  }

  // optional string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->callid(), target);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeakerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 speakernum = 1;
    if (has_speakernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speakernum());
    }

    // optional string callid = 3;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // optional .PBMidLayer.AudioFileTag filetag = 4;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  // repeated .PBMidLayer.SpeakerItem speakers = 2;
  total_size += 1 * this->speakers_size();
  for (int i = 0; i < this->speakers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speakers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeakerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeakerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeakerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeakerResult::MergeFrom(const SpeakerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  speakers_.MergeFrom(from.speakers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speakernum()) {
      set_speakernum(from.speakernum());
    }
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeakerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeakerResult::CopyFrom(const SpeakerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < speakers_size(); i++) {
    if (!this->speakers(i).IsInitialized()) return false;
  }
  return true;
}

void SpeakerResult::Swap(SpeakerResult* other) {
  if (other != this) {
    std::swap(speakernum_, other->speakernum_);
    speakers_.Swap(&other->speakers_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeakerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeakerResult_descriptor_;
  metadata.reflection = SpeakerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeakerItem::kObjectidFieldNumber;
const int SpeakerItem::kScoreFieldNumber;
const int SpeakerItem::kSpyidFieldNumber;
#endif  // !_MSC_VER

SpeakerItem::SpeakerItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeakerItem::InitAsDefaultInstance() {
}

SpeakerItem::SpeakerItem(const SpeakerItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeakerItem::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeakerItem::~SpeakerItem() {
  SharedDtor();
}

void SpeakerItem::SharedDtor() {
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    delete objectid_;
  }
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (this != default_instance_) {
  }
}

void SpeakerItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeakerItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeakerItem_descriptor_;
}

const SpeakerItem& SpeakerItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SpeakerItem* SpeakerItem::default_instance_ = NULL;

SpeakerItem* SpeakerItem::New() const {
  return new SpeakerItem;
}

void SpeakerItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_objectid()) {
      if (objectid_ != &::google::protobuf::internal::kEmptyString) {
        objectid_->clear();
      }
    }
    score_ = 0;
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeakerItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // required float score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spyid;
        break;
      }

      // optional string spyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeakerItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->objectid(), output);
  }

  // required float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // optional string spyid = 3;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->spyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeakerItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objectid(), target);
  }

  // required float score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // optional string spyid = 3;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeakerItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // required float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional string spyid = 3;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeakerItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeakerItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeakerItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeakerItem::MergeFrom(const SpeakerItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeakerItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeakerItem::CopyFrom(const SpeakerItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakerItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpeakerItem::Swap(SpeakerItem* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(score_, other->score_);
    std::swap(spyid_, other->spyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeakerItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeakerItem_descriptor_;
  metadata.reflection = SpeakerItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeywordResult::kKeywordnumFieldNumber;
const int KeywordResult::kKeywordsFieldNumber;
const int KeywordResult::kCallidFieldNumber;
const int KeywordResult::kFiletagFieldNumber;
#endif  // !_MSC_VER

KeywordResult::KeywordResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeywordResult::InitAsDefaultInstance() {
}

KeywordResult::KeywordResult(const KeywordResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeywordResult::SharedCtor() {
  _cached_size_ = 0;
  keywordnum_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeywordResult::~KeywordResult() {
  SharedDtor();
}

void KeywordResult::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
  }
}

void KeywordResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeywordResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeywordResult_descriptor_;
}

const KeywordResult& KeywordResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

KeywordResult* KeywordResult::default_instance_ = NULL;

KeywordResult* KeywordResult::New() const {
  return new KeywordResult;
}

void KeywordResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keywordnum_ = 0;
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeywordResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 keywordnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keywordnum_)));
          set_has_keywordnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keywords;
        break;
      }

      // repeated .PBMidLayer.KeywordSnippet keywords = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keywords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keywords;
        if (input->ExpectTag(26)) goto parse_callid;
        break;
      }

      // optional string callid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filetag;
        break;
      }

      // optional .PBMidLayer.AudioFileTag filetag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeywordResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 keywordnum = 1;
  if (has_keywordnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->keywordnum(), output);
  }

  // repeated .PBMidLayer.KeywordSnippet keywords = 2;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keywords(i), output);
  }

  // optional string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->callid(), output);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeywordResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 keywordnum = 1;
  if (has_keywordnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->keywordnum(), target);
  }

  // repeated .PBMidLayer.KeywordSnippet keywords = 2;
  for (int i = 0; i < this->keywords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->keywords(i), target);
  }

  // optional string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->callid(), target);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeywordResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 keywordnum = 1;
    if (has_keywordnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keywordnum());
    }

    // optional string callid = 3;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // optional .PBMidLayer.AudioFileTag filetag = 4;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  // repeated .PBMidLayer.KeywordSnippet keywords = 2;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeywordResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeywordResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeywordResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeywordResult::MergeFrom(const KeywordResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keywordnum()) {
      set_keywordnum(from.keywordnum());
    }
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeywordResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeywordResult::CopyFrom(const KeywordResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < keywords_size(); i++) {
    if (!this->keywords(i).IsInitialized()) return false;
  }
  return true;
}

void KeywordResult::Swap(KeywordResult* other) {
  if (other != this) {
    std::swap(keywordnum_, other->keywordnum_);
    keywords_.Swap(&other->keywords_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeywordResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeywordResult_descriptor_;
  metadata.reflection = KeywordResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeywordSnippet::kKeywordFieldNumber;
const int KeywordSnippet::kLanguagenameFieldNumber;
const int KeywordSnippet::kScoreFieldNumber;
const int KeywordSnippet::kBegintimeFieldNumber;
const int KeywordSnippet::kEndtimeFieldNumber;
const int KeywordSnippet::kTextFieldNumber;
const int KeywordSnippet::kSpyidFieldNumber;
#endif  // !_MSC_VER

KeywordSnippet::KeywordSnippet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeywordSnippet::InitAsDefaultInstance() {
}

KeywordSnippet::KeywordSnippet(const KeywordSnippet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeywordSnippet::SharedCtor() {
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  begintime_ = 0u;
  endtime_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeywordSnippet::~KeywordSnippet() {
  SharedDtor();
}

void KeywordSnippet::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (this != default_instance_) {
  }
}

void KeywordSnippet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeywordSnippet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeywordSnippet_descriptor_;
}

const KeywordSnippet& KeywordSnippet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

KeywordSnippet* KeywordSnippet::default_instance_ = NULL;

KeywordSnippet* KeywordSnippet::New() const {
  return new KeywordSnippet;
}

void KeywordSnippet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::kEmptyString) {
        keyword_->clear();
      }
    }
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    score_ = 0;
    begintime_ = 0u;
    endtime_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeywordSnippet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languagename;
        break;
      }

      // required string languagename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // required float score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_begintime;
        break;
      }

      // required uint32 begintime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // required uint32 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_spyid;
        break;
      }

      // optional string spyid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeywordSnippet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keyword(), output);
  }

  // required string languagename = 2;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->languagename(), output);
  }

  // required float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // required uint32 begintime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begintime(), output);
  }

  // required uint32 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  // optional string spyid = 7;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->spyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeywordSnippet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyword(), target);
  }

  // required string languagename = 2;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->languagename(), target);
  }

  // required float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // required uint32 begintime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begintime(), target);
  }

  // required uint32 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional string spyid = 7;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->spyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeywordSnippet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // required string languagename = 2;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // required float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // required uint32 begintime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // required uint32 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string spyid = 7;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeywordSnippet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeywordSnippet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeywordSnippet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeywordSnippet::MergeFrom(const KeywordSnippet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeywordSnippet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeywordSnippet::CopyFrom(const KeywordSnippet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordSnippet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void KeywordSnippet::Swap(KeywordSnippet* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(languagename_, other->languagename_);
    std::swap(score_, other->score_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(text_, other->text_);
    std::swap(spyid_, other->spyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeywordSnippet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeywordSnippet_descriptor_;
  metadata.reflection = KeywordSnippet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TranscriptResult::kSegmentnumFieldNumber;
const int TranscriptResult::kSegmentsFieldNumber;
const int TranscriptResult::kCallidFieldNumber;
const int TranscriptResult::kFiletagFieldNumber;
#endif  // !_MSC_VER

TranscriptResult::TranscriptResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TranscriptResult::InitAsDefaultInstance() {
}

TranscriptResult::TranscriptResult(const TranscriptResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TranscriptResult::SharedCtor() {
  _cached_size_ = 0;
  segmentnum_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranscriptResult::~TranscriptResult() {
  SharedDtor();
}

void TranscriptResult::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
  }
}

void TranscriptResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranscriptResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranscriptResult_descriptor_;
}

const TranscriptResult& TranscriptResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

TranscriptResult* TranscriptResult::default_instance_ = NULL;

TranscriptResult* TranscriptResult::New() const {
  return new TranscriptResult;
}

void TranscriptResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentnum_ = 0;
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  segments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranscriptResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 segmentnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segmentnum_)));
          set_has_segmentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_segments;
        break;
      }

      // repeated .PBMidLayer.SegmentTranscript segments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_segments;
        if (input->ExpectTag(26)) goto parse_callid;
        break;
      }

      // optional string callid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filetag;
        break;
      }

      // optional .PBMidLayer.AudioFileTag filetag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranscriptResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 segmentnum = 1;
  if (has_segmentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->segmentnum(), output);
  }

  // repeated .PBMidLayer.SegmentTranscript segments = 2;
  for (int i = 0; i < this->segments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->segments(i), output);
  }

  // optional string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->callid(), output);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TranscriptResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 segmentnum = 1;
  if (has_segmentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->segmentnum(), target);
  }

  // repeated .PBMidLayer.SegmentTranscript segments = 2;
  for (int i = 0; i < this->segments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->segments(i), target);
  }

  // optional string callid = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->callid(), target);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 4;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TranscriptResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 segmentnum = 1;
    if (has_segmentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->segmentnum());
    }

    // optional string callid = 3;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // optional .PBMidLayer.AudioFileTag filetag = 4;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  // repeated .PBMidLayer.SegmentTranscript segments = 2;
  total_size += 1 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranscriptResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranscriptResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranscriptResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranscriptResult::MergeFrom(const TranscriptResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  segments_.MergeFrom(from.segments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentnum()) {
      set_segmentnum(from.segmentnum());
    }
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranscriptResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscriptResult::CopyFrom(const TranscriptResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < segments_size(); i++) {
    if (!this->segments(i).IsInitialized()) return false;
  }
  return true;
}

void TranscriptResult::Swap(TranscriptResult* other) {
  if (other != this) {
    std::swap(segmentnum_, other->segmentnum_);
    segments_.Swap(&other->segments_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranscriptResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranscriptResult_descriptor_;
  metadata.reflection = TranscriptResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentTranscript::kContentFieldNumber;
const int SegmentTranscript::kLanguagenameFieldNumber;
const int SegmentTranscript::kScoreFieldNumber;
const int SegmentTranscript::kBegintimeFieldNumber;
const int SegmentTranscript::kEndtimeFieldNumber;
#endif  // !_MSC_VER

SegmentTranscript::SegmentTranscript()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentTranscript::InitAsDefaultInstance() {
}

SegmentTranscript::SegmentTranscript(const SegmentTranscript& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentTranscript::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  begintime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentTranscript::~SegmentTranscript() {
  SharedDtor();
}

void SegmentTranscript::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (this != default_instance_) {
  }
}

void SegmentTranscript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentTranscript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentTranscript_descriptor_;
}

const SegmentTranscript& SegmentTranscript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SegmentTranscript* SegmentTranscript::default_instance_ = NULL;

SegmentTranscript* SegmentTranscript::New() const {
  return new SegmentTranscript;
}

void SegmentTranscript::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    score_ = 0;
    begintime_ = 0u;
    endtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentTranscript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languagename;
        break;
      }

      // required string languagename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // required float score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_begintime;
        break;
      }

      // required uint32 begintime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // required uint32 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentTranscript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // required string languagename = 2;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->languagename(), output);
  }

  // required float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // required uint32 begintime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begintime(), output);
  }

  // required uint32 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentTranscript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // required string languagename = 2;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->languagename(), target);
  }

  // required float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // required uint32 begintime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begintime(), target);
  }

  // required uint32 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentTranscript::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string languagename = 2;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // required float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // required uint32 begintime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // required uint32 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentTranscript::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentTranscript* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentTranscript*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentTranscript::MergeFrom(const SegmentTranscript& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentTranscript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentTranscript::CopyFrom(const SegmentTranscript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentTranscript::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SegmentTranscript::Swap(SegmentTranscript* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(languagename_, other->languagename_);
    std::swap(score_, other->score_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentTranscript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentTranscript_descriptor_;
  metadata.reflection = SegmentTranscript_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeakerRule::kObjectidFieldNumber;
const int SpeakerRule::kThresholdflagFieldNumber;
const int SpeakerRule::kLowthresholdFieldNumber;
const int SpeakerRule::kHighthresholdFieldNumber;
const int SpeakerRule::kTelruleFieldNumber;
#endif  // !_MSC_VER

SpeakerRule::SpeakerRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeakerRule::InitAsDefaultInstance() {
}

SpeakerRule::SpeakerRule(const SpeakerRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeakerRule::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thresholdflag_ = 0;
  lowthreshold_ = 0;
  highthreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeakerRule::~SpeakerRule() {
  SharedDtor();
}

void SpeakerRule::SharedDtor() {
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    delete objectid_;
  }
  if (this != default_instance_) {
  }
}

void SpeakerRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeakerRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeakerRule_descriptor_;
}

const SpeakerRule& SpeakerRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SpeakerRule* SpeakerRule::default_instance_ = NULL;

SpeakerRule* SpeakerRule::New() const {
  return new SpeakerRule;
}

void SpeakerRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_objectid()) {
      if (objectid_ != &::google::protobuf::internal::kEmptyString) {
        objectid_->clear();
      }
    }
    thresholdflag_ = 0;
    lowthreshold_ = 0;
    highthreshold_ = 0;
  }
  telrule_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeakerRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thresholdflag;
        break;
      }

      // optional int32 thresholdflag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thresholdflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thresholdflag_)));
          set_has_thresholdflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_lowthreshold;
        break;
      }

      // optional float lowthreshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lowthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowthreshold_)));
          set_has_lowthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_highthreshold;
        break;
      }

      // optional float highthreshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_highthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &highthreshold_)));
          set_has_highthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_telrule;
        break;
      }

      // repeated .PBMidLayer.PhoneNumber telrule = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telrule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_telrule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_telrule;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeakerRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->objectid(), output);
  }

  // optional int32 thresholdflag = 2;
  if (has_thresholdflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thresholdflag(), output);
  }

  // optional float lowthreshold = 3;
  if (has_lowthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lowthreshold(), output);
  }

  // optional float highthreshold = 4;
  if (has_highthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->highthreshold(), output);
  }

  // repeated .PBMidLayer.PhoneNumber telrule = 5;
  for (int i = 0; i < this->telrule_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->telrule(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeakerRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objectid(), target);
  }

  // optional int32 thresholdflag = 2;
  if (has_thresholdflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thresholdflag(), target);
  }

  // optional float lowthreshold = 3;
  if (has_lowthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lowthreshold(), target);
  }

  // optional float highthreshold = 4;
  if (has_highthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->highthreshold(), target);
  }

  // repeated .PBMidLayer.PhoneNumber telrule = 5;
  for (int i = 0; i < this->telrule_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->telrule(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeakerRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // optional int32 thresholdflag = 2;
    if (has_thresholdflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thresholdflag());
    }

    // optional float lowthreshold = 3;
    if (has_lowthreshold()) {
      total_size += 1 + 4;
    }

    // optional float highthreshold = 4;
    if (has_highthreshold()) {
      total_size += 1 + 4;
    }

  }
  // repeated .PBMidLayer.PhoneNumber telrule = 5;
  total_size += 1 * this->telrule_size();
  for (int i = 0; i < this->telrule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->telrule(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeakerRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeakerRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeakerRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeakerRule::MergeFrom(const SpeakerRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  telrule_.MergeFrom(from.telrule_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_thresholdflag()) {
      set_thresholdflag(from.thresholdflag());
    }
    if (from.has_lowthreshold()) {
      set_lowthreshold(from.lowthreshold());
    }
    if (from.has_highthreshold()) {
      set_highthreshold(from.highthreshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeakerRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeakerRule::CopyFrom(const SpeakerRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakerRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < telrule_size(); i++) {
    if (!this->telrule(i).IsInitialized()) return false;
  }
  return true;
}

void SpeakerRule::Swap(SpeakerRule* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(thresholdflag_, other->thresholdflag_);
    std::swap(lowthreshold_, other->lowthreshold_);
    std::swap(highthreshold_, other->highthreshold_);
    telrule_.Swap(&other->telrule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeakerRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeakerRule_descriptor_;
  metadata.reflection = SpeakerRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeywordRule::kLanguagenameFieldNumber;
const int KeywordRule::kKeywordFieldNumber;
const int KeywordRule::kThresholdFieldNumber;
const int KeywordRule::kTelruleFieldNumber;
#endif  // !_MSC_VER

KeywordRule::KeywordRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeywordRule::InitAsDefaultInstance() {
}

KeywordRule::KeywordRule(const KeywordRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeywordRule::SharedCtor() {
  _cached_size_ = 0;
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeywordRule::~KeywordRule() {
  SharedDtor();
}

void KeywordRule::SharedDtor() {
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void KeywordRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeywordRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeywordRule_descriptor_;
}

const KeywordRule& KeywordRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

KeywordRule* KeywordRule::default_instance_ = NULL;

KeywordRule* KeywordRule::New() const {
  return new KeywordRule;
}

void KeywordRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::kEmptyString) {
        keyword_->clear();
      }
    }
    threshold_ = 0;
  }
  telrule_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeywordRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string languagename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyword;
        break;
      }

      // required string keyword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_threshold;
        break;
      }

      // optional float threshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_telrule;
        break;
      }

      // repeated .PBMidLayer.PhoneNumber telrule = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telrule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_telrule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_telrule;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeywordRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string languagename = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->languagename(), output);
  }

  // required string keyword = 2;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->keyword(), output);
  }

  // optional float threshold = 3;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->threshold(), output);
  }

  // repeated .PBMidLayer.PhoneNumber telrule = 5;
  for (int i = 0; i < this->telrule_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->telrule(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeywordRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string languagename = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->languagename(), target);
  }

  // required string keyword = 2;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keyword(), target);
  }

  // optional float threshold = 3;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->threshold(), target);
  }

  // repeated .PBMidLayer.PhoneNumber telrule = 5;
  for (int i = 0; i < this->telrule_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->telrule(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeywordRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string languagename = 1;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // required string keyword = 2;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // optional float threshold = 3;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

  }
  // repeated .PBMidLayer.PhoneNumber telrule = 5;
  total_size += 1 * this->telrule_size();
  for (int i = 0; i < this->telrule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->telrule(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeywordRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeywordRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeywordRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeywordRule::MergeFrom(const KeywordRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  telrule_.MergeFrom(from.telrule_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeywordRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeywordRule::CopyFrom(const KeywordRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < telrule_size(); i++) {
    if (!this->telrule(i).IsInitialized()) return false;
  }
  return true;
}

void KeywordRule::Swap(KeywordRule* other) {
  if (other != this) {
    std::swap(languagename_, other->languagename_);
    std::swap(keyword_, other->keyword_);
    std::swap(threshold_, other->threshold_);
    telrule_.Swap(&other->telrule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeywordRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeywordRule_descriptor_;
  metadata.reflection = KeywordRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechSegRule::kLanguagenameFieldNumber;
const int SpeechSegRule::kSpeechsegidFieldNumber;
const int SpeechSegRule::kDataFieldNumber;
const int SpeechSegRule::kSpeechsegnameFieldNumber;
const int SpeechSegRule::kThresholdFieldNumber;
const int SpeechSegRule::kTelruleFieldNumber;
#endif  // !_MSC_VER

SpeechSegRule::SpeechSegRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeechSegRule::InitAsDefaultInstance() {
}

SpeechSegRule::SpeechSegRule(const SpeechSegRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeechSegRule::SharedCtor() {
  _cached_size_ = 0;
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speechsegid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speechsegname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechSegRule::~SpeechSegRule() {
  SharedDtor();
}

void SpeechSegRule::SharedDtor() {
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (speechsegid_ != &::google::protobuf::internal::kEmptyString) {
    delete speechsegid_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (speechsegname_ != &::google::protobuf::internal::kEmptyString) {
    delete speechsegname_;
  }
  if (this != default_instance_) {
  }
}

void SpeechSegRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechSegRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechSegRule_descriptor_;
}

const SpeechSegRule& SpeechSegRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SpeechSegRule* SpeechSegRule::default_instance_ = NULL;

SpeechSegRule* SpeechSegRule::New() const {
  return new SpeechSegRule;
}

void SpeechSegRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    if (has_speechsegid()) {
      if (speechsegid_ != &::google::protobuf::internal::kEmptyString) {
        speechsegid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_speechsegname()) {
      if (speechsegname_ != &::google::protobuf::internal::kEmptyString) {
        speechsegname_->clear();
      }
    }
    threshold_ = 0;
  }
  telrule_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechSegRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string languagename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_speechsegid;
        break;
      }

      // required string speechsegid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechsegid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechsegid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speechsegid().data(), this->speechsegid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_speechsegname;
        break;
      }

      // optional string speechsegname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechsegname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechsegname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speechsegname().data(), this->speechsegname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_threshold;
        break;
      }

      // optional float threshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_telrule;
        break;
      }

      // repeated .PBMidLayer.PhoneNumber telrule = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telrule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_telrule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_telrule;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeechSegRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string languagename = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->languagename(), output);
  }

  // required string speechsegid = 2;
  if (has_speechsegid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegid().data(), this->speechsegid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->speechsegid(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional string speechsegname = 4;
  if (has_speechsegname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegname().data(), this->speechsegname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->speechsegname(), output);
  }

  // optional float threshold = 5;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->threshold(), output);
  }

  // repeated .PBMidLayer.PhoneNumber telrule = 6;
  for (int i = 0; i < this->telrule_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->telrule(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeechSegRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string languagename = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->languagename(), target);
  }

  // required string speechsegid = 2;
  if (has_speechsegid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegid().data(), this->speechsegid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->speechsegid(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional string speechsegname = 4;
  if (has_speechsegname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegname().data(), this->speechsegname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->speechsegname(), target);
  }

  // optional float threshold = 5;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->threshold(), target);
  }

  // repeated .PBMidLayer.PhoneNumber telrule = 6;
  for (int i = 0; i < this->telrule_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->telrule(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeechSegRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string languagename = 1;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // required string speechsegid = 2;
    if (has_speechsegid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speechsegid());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string speechsegname = 4;
    if (has_speechsegname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speechsegname());
    }

    // optional float threshold = 5;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

  }
  // repeated .PBMidLayer.PhoneNumber telrule = 6;
  total_size += 1 * this->telrule_size();
  for (int i = 0; i < this->telrule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->telrule(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechSegRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechSegRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechSegRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechSegRule::MergeFrom(const SpeechSegRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  telrule_.MergeFrom(from.telrule_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_speechsegid()) {
      set_speechsegid(from.speechsegid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_speechsegname()) {
      set_speechsegname(from.speechsegname());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechSegRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechSegRule::CopyFrom(const SpeechSegRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechSegRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < telrule_size(); i++) {
    if (!this->telrule(i).IsInitialized()) return false;
  }
  return true;
}

void SpeechSegRule::Swap(SpeechSegRule* other) {
  if (other != this) {
    std::swap(languagename_, other->languagename_);
    std::swap(speechsegid_, other->speechsegid_);
    std::swap(data_, other->data_);
    std::swap(speechsegname_, other->speechsegname_);
    std::swap(threshold_, other->threshold_);
    telrule_.Swap(&other->telrule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechSegRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechSegRule_descriptor_;
  metadata.reflection = SpeechSegRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LanguageInfo::kLanguagenameFieldNumber;
const int LanguageInfo::kKeywordsupportedFieldNumber;
const int LanguageInfo::kTranssupportedFieldNumber;
#endif  // !_MSC_VER

LanguageInfo::LanguageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LanguageInfo::InitAsDefaultInstance() {
}

LanguageInfo::LanguageInfo(const LanguageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LanguageInfo::SharedCtor() {
  _cached_size_ = 0;
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keywordsupported_ = 0;
  transsupported_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanguageInfo::~LanguageInfo() {
  SharedDtor();
}

void LanguageInfo::SharedDtor() {
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (this != default_instance_) {
  }
}

void LanguageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanguageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanguageInfo_descriptor_;
}

const LanguageInfo& LanguageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

LanguageInfo* LanguageInfo::default_instance_ = NULL;

LanguageInfo* LanguageInfo::New() const {
  return new LanguageInfo;
}

void LanguageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    keywordsupported_ = 0;
    transsupported_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LanguageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string languagename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_keywordsupported;
        break;
      }

      // required int32 keywordsupported = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keywordsupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keywordsupported_)));
          set_has_keywordsupported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transsupported;
        break;
      }

      // required int32 transsupported = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transsupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transsupported_)));
          set_has_transsupported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanguageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string languagename = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->languagename(), output);
  }

  // required int32 keywordsupported = 2;
  if (has_keywordsupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->keywordsupported(), output);
  }

  // required int32 transsupported = 3;
  if (has_transsupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->transsupported(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LanguageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string languagename = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->languagename(), target);
  }

  // required int32 keywordsupported = 2;
  if (has_keywordsupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->keywordsupported(), target);
  }

  // required int32 transsupported = 3;
  if (has_transsupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->transsupported(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LanguageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string languagename = 1;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }

    // required int32 keywordsupported = 2;
    if (has_keywordsupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keywordsupported());
    }

    // required int32 transsupported = 3;
    if (has_transsupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transsupported());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanguageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LanguageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LanguageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LanguageInfo::MergeFrom(const LanguageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_keywordsupported()) {
      set_keywordsupported(from.keywordsupported());
    }
    if (from.has_transsupported()) {
      set_transsupported(from.transsupported());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LanguageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanguageInfo::CopyFrom(const LanguageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LanguageInfo::Swap(LanguageInfo* other) {
  if (other != this) {
    std::swap(languagename_, other->languagename_);
    std::swap(keywordsupported_, other->keywordsupported_);
    std::swap(transsupported_, other->transsupported_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LanguageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LanguageInfo_descriptor_;
  metadata.reflection = LanguageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainInfo::kCodeFieldNumber;
const int TrainInfo::kIsdataFieldNumber;
const int TrainInfo::kVoiceFieldNumber;
const int TrainInfo::kPathFieldNumber;
#endif  // !_MSC_VER

TrainInfo::TrainInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainInfo::InitAsDefaultInstance() {
}

TrainInfo::TrainInfo(const TrainInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainInfo::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  isdata_ = false;
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainInfo::~TrainInfo() {
  SharedDtor();
}

void TrainInfo::SharedDtor() {
  if (voice_ != &::google::protobuf::internal::kEmptyString) {
    delete voice_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void TrainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainInfo_descriptor_;
}

const TrainInfo& TrainInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

TrainInfo* TrainInfo::default_instance_ = NULL;

TrainInfo* TrainInfo::New() const {
  return new TrainInfo;
}

void TrainInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    isdata_ = false;
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::kEmptyString) {
        voice_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.AudioEncodingTag code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioEncodingTag_IsValid(value)) {
            set_code(static_cast< ::PBMidLayer::AudioEncodingTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isdata;
        break;
      }

      // required bool isdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdata_)));
          set_has_isdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // optional bytes voice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }

      // optional string path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.AudioEncodingTag code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // required bool isdata = 2;
  if (has_isdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdata(), output);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->voice(), output);
  }

  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.AudioEncodingTag code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // required bool isdata = 2;
  if (has_isdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdata(), target);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->voice(), target);
  }

  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.AudioEncodingTag code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // required bool isdata = 2;
    if (has_isdata()) {
      total_size += 1 + 1;
    }

    // optional bytes voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainInfo::MergeFrom(const TrainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_isdata()) {
      set_isdata(from.isdata());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainInfo::CopyFrom(const TrainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TrainInfo::Swap(TrainInfo* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(isdata_, other->isdata_);
    std::swap(voice_, other->voice_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainInfo_descriptor_;
  metadata.reflection = TrainInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneNumber::kTelnumberFieldNumber;
const int PhoneNumber::kCountrycodeFieldNumber;
const int PhoneNumber::kProvincecodeFieldNumber;
const int PhoneNumber::kAreacodeFieldNumber;
#endif  // !_MSC_VER

PhoneNumber::PhoneNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PhoneNumber::InitAsDefaultInstance() {
}

PhoneNumber::PhoneNumber(const PhoneNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PhoneNumber::SharedCtor() {
  _cached_size_ = 0;
  telnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  provincecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneNumber::~PhoneNumber() {
  SharedDtor();
}

void PhoneNumber::SharedDtor() {
  if (telnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete telnumber_;
  }
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (provincecode_ != &::google::protobuf::internal::kEmptyString) {
    delete provincecode_;
  }
  if (areacode_ != &::google::protobuf::internal::kEmptyString) {
    delete areacode_;
  }
  if (this != default_instance_) {
  }
}

void PhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneNumber_descriptor_;
}

const PhoneNumber& PhoneNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

PhoneNumber* PhoneNumber::default_instance_ = NULL;

PhoneNumber* PhoneNumber::New() const {
  return new PhoneNumber;
}

void PhoneNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_telnumber()) {
      if (telnumber_ != &::google::protobuf::internal::kEmptyString) {
        telnumber_->clear();
      }
    }
    if (has_countrycode()) {
      if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
        countrycode_->clear();
      }
    }
    if (has_provincecode()) {
      if (provincecode_ != &::google::protobuf::internal::kEmptyString) {
        provincecode_->clear();
      }
    }
    if (has_areacode()) {
      if (areacode_ != &::google::protobuf::internal::kEmptyString) {
        areacode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhoneNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string telnumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->telnumber().data(), this->telnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_countrycode;
        break;
      }

      // optional string countrycode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countrycode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_provincecode;
        break;
      }

      // optional string provincecode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provincecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provincecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->provincecode().data(), this->provincecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_areacode;
        break;
      }

      // optional string areacode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areacode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areacode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->areacode().data(), this->areacode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhoneNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string telnumber = 1;
  if (has_telnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telnumber().data(), this->telnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->telnumber(), output);
  }

  // optional string countrycode = 2;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->countrycode(), output);
  }

  // optional string provincecode = 3;
  if (has_provincecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provincecode().data(), this->provincecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->provincecode(), output);
  }

  // optional string areacode = 4;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areacode().data(), this->areacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->areacode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PhoneNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string telnumber = 1;
  if (has_telnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telnumber().data(), this->telnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->telnumber(), target);
  }

  // optional string countrycode = 2;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countrycode(), target);
  }

  // optional string provincecode = 3;
  if (has_provincecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provincecode().data(), this->provincecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->provincecode(), target);
  }

  // optional string areacode = 4;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areacode().data(), this->areacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->areacode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PhoneNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string telnumber = 1;
    if (has_telnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telnumber());
    }

    // optional string countrycode = 2;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }

    // optional string provincecode = 3;
    if (has_provincecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provincecode());
    }

    // optional string areacode = 4;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areacode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhoneNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhoneNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhoneNumber::MergeFrom(const PhoneNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_telnumber()) {
      set_telnumber(from.telnumber());
    }
    if (from.has_countrycode()) {
      set_countrycode(from.countrycode());
    }
    if (from.has_provincecode()) {
      set_provincecode(from.provincecode());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhoneNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneNumber::CopyFrom(const PhoneNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PhoneNumber::Swap(PhoneNumber* other) {
  if (other != this) {
    std::swap(telnumber_, other->telnumber_);
    std::swap(countrycode_, other->countrycode_);
    std::swap(provincecode_, other->provincecode_);
    std::swap(areacode_, other->areacode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhoneNumber_descriptor_;
  metadata.reflection = PhoneNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchTaskState::kRunstateFieldNumber;
const int SearchTaskState::kQueuetimeFieldNumber;
const int SearchTaskState::kStarttimeFieldNumber;
const int SearchTaskState::kFinishtimeFieldNumber;
const int SearchTaskState::kAborttimeFieldNumber;
const int SearchTaskState::kMsgFieldNumber;
#endif  // !_MSC_VER

SearchTaskState::SearchTaskState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchTaskState::InitAsDefaultInstance() {
}

SearchTaskState::SearchTaskState(const SearchTaskState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchTaskState::SharedCtor() {
  _cached_size_ = 0;
  runstate_ = 0;
  queuetime_ = GOOGLE_ULONGLONG(0);
  starttime_ = GOOGLE_ULONGLONG(0);
  finishtime_ = GOOGLE_ULONGLONG(0);
  aborttime_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchTaskState::~SearchTaskState() {
  SharedDtor();
}

void SearchTaskState::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void SearchTaskState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchTaskState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchTaskState_descriptor_;
}

const SearchTaskState& SearchTaskState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchTaskState* SearchTaskState::default_instance_ = NULL;

SearchTaskState* SearchTaskState::New() const {
  return new SearchTaskState;
}

void SearchTaskState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    runstate_ = 0;
    queuetime_ = GOOGLE_ULONGLONG(0);
    starttime_ = GOOGLE_ULONGLONG(0);
    finishtime_ = GOOGLE_ULONGLONG(0);
    aborttime_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchTaskState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBMidLayer.SearchTaskRunState runstate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::SearchTaskRunState_IsValid(value)) {
            set_runstate(static_cast< ::PBMidLayer::SearchTaskRunState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_queuetime;
        break;
      }

      // required uint64 queuetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queuetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &queuetime_)));
          set_has_queuetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finishtime;
        break;
      }

      // optional uint64 finishtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_aborttime;
        break;
      }

      // optional uint64 aborttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aborttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aborttime_)));
          set_has_aborttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg;
        break;
      }

      // optional string msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchTaskState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBMidLayer.SearchTaskRunState runstate = 1;
  if (has_runstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->runstate(), output);
  }

  // required uint64 queuetime = 2;
  if (has_queuetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->queuetime(), output);
  }

  // optional uint64 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->starttime(), output);
  }

  // optional uint64 finishtime = 4;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->finishtime(), output);
  }

  // optional uint64 aborttime = 5;
  if (has_aborttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->aborttime(), output);
  }

  // optional string msg = 6;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchTaskState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBMidLayer.SearchTaskRunState runstate = 1;
  if (has_runstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->runstate(), target);
  }

  // required uint64 queuetime = 2;
  if (has_queuetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->queuetime(), target);
  }

  // optional uint64 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->starttime(), target);
  }

  // optional uint64 finishtime = 4;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->finishtime(), target);
  }

  // optional uint64 aborttime = 5;
  if (has_aborttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->aborttime(), target);
  }

  // optional string msg = 6;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchTaskState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBMidLayer.SearchTaskRunState runstate = 1;
    if (has_runstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->runstate());
    }

    // required uint64 queuetime = 2;
    if (has_queuetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->queuetime());
    }

    // optional uint64 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 finishtime = 4;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finishtime());
    }

    // optional uint64 aborttime = 5;
    if (has_aborttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aborttime());
    }

    // optional string msg = 6;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchTaskState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchTaskState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchTaskState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchTaskState::MergeFrom(const SearchTaskState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_runstate()) {
      set_runstate(from.runstate());
    }
    if (from.has_queuetime()) {
      set_queuetime(from.queuetime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_aborttime()) {
      set_aborttime(from.aborttime());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchTaskState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchTaskState::CopyFrom(const SearchTaskState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchTaskState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SearchTaskState::Swap(SearchTaskState* other) {
  if (other != this) {
    std::swap(runstate_, other->runstate_);
    std::swap(queuetime_, other->queuetime_);
    std::swap(starttime_, other->starttime_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(aborttime_, other->aborttime_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchTaskState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchTaskState_descriptor_;
  metadata.reflection = SearchTaskState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemCode::kSpyidFieldNumber;
const int SystemCode::kSridFieldNumber;
const int SystemCode::kDatasourceFieldNumber;
#endif  // !_MSC_VER

SystemCode::SystemCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemCode::InitAsDefaultInstance() {
}

SystemCode::SystemCode(const SystemCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemCode::SharedCtor() {
  _cached_size_ = 0;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemCode::~SystemCode() {
  SharedDtor();
}

void SystemCode::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
  }
}

void SystemCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemCode_descriptor_;
}

const SystemCode& SystemCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SystemCode* SystemCode::default_instance_ = NULL;

SystemCode* SystemCode::New() const {
  return new SystemCode;
}

void SystemCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  datasource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string spyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srid;
        break;
      }

      // optional string srid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasource;
        break;
      }

      // repeated string datasource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_datasource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasource(this->datasource_size() - 1).data(),
            this->datasource(this->datasource_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasource;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->spyid(), output);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srid(), output);
  }

  // repeated string datasource = 3;
  for (int i = 0; i < this->datasource_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->datasource(i).data(), this->datasource(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->datasource(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spyid(), target);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->srid(), target);
  }

  // repeated string datasource = 3;
  for (int i = 0; i < this->datasource_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasource(i).data(), this->datasource(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->datasource(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string spyid = 1;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 2;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  // repeated string datasource = 3;
  total_size += 1 * this->datasource_size();
  for (int i = 0; i < this->datasource_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->datasource(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemCode::MergeFrom(const SystemCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasource_.MergeFrom(from.datasource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemCode::CopyFrom(const SystemCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemCode::IsInitialized() const {

  return true;
}

void SystemCode::Swap(SystemCode* other) {
  if (other != this) {
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    datasource_.Swap(&other->datasource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemCode_descriptor_;
  metadata.reflection = SystemCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchFileResult::kCallidFieldNumber;
const int SearchFileResult::kFiletagFieldNumber;
const int SearchFileResult::kScoreFieldNumber;
const int SearchFileResult::kSpeakersFieldNumber;
const int SearchFileResult::kKeywordsFieldNumber;
const int SearchFileResult::kSpeechsegsFieldNumber;
const int SearchFileResult::kDatasourceFieldNumber;
#endif  // !_MSC_VER

SearchFileResult::SearchFileResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchFileResult::InitAsDefaultInstance() {
}

SearchFileResult::SearchFileResult(const SearchFileResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchFileResult::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  score_ = 0;
  datasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchFileResult::~SearchFileResult() {
  SharedDtor();
}

void SearchFileResult::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (datasource_ != &::google::protobuf::internal::kEmptyString) {
    delete datasource_;
  }
  if (this != default_instance_) {
  }
}

void SearchFileResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchFileResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchFileResult_descriptor_;
}

const SearchFileResult& SearchFileResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SearchFileResult* SearchFileResult::default_instance_ = NULL;

SearchFileResult* SearchFileResult::New() const {
  return new SearchFileResult;
}

void SearchFileResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
    score_ = 0;
    if (has_datasource()) {
      if (datasource_ != &::google::protobuf::internal::kEmptyString) {
        datasource_->clear();
      }
    }
  }
  speakers_.Clear();
  keywords_.Clear();
  speechsegs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchFileResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filetag;
        break;
      }

      // required .PBMidLayer.AudioFileTag filetag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_speakers;
        break;
      }

      // repeated .PBMidLayer.SpeakerItem speakers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speakers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speakers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_speakers;
        if (input->ExpectTag(42)) goto parse_keywords;
        break;
      }

      // repeated .PBMidLayer.KeywordSnippet keywords = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keywords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        if (input->ExpectTag(50)) goto parse_speechsegs;
        break;
      }

      // repeated .PBMidLayer.SpeechSegItem speechsegs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechsegs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speechsegs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_speechsegs;
        if (input->ExpectTag(58)) goto parse_datasource;
        break;
      }

      // required string datasource = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasource().data(), this->datasource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchFileResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetag(), output);
  }

  // optional float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // repeated .PBMidLayer.SpeakerItem speakers = 4;
  for (int i = 0; i < this->speakers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speakers(i), output);
  }

  // repeated .PBMidLayer.KeywordSnippet keywords = 5;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->keywords(i), output);
  }

  // repeated .PBMidLayer.SpeechSegItem speechsegs = 6;
  for (int i = 0; i < this->speechsegs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->speechsegs(i), output);
  }

  // required string datasource = 7;
  if (has_datasource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasource().data(), this->datasource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->datasource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchFileResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetag(), target);
  }

  // optional float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // repeated .PBMidLayer.SpeakerItem speakers = 4;
  for (int i = 0; i < this->speakers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->speakers(i), target);
  }

  // repeated .PBMidLayer.KeywordSnippet keywords = 5;
  for (int i = 0; i < this->keywords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->keywords(i), target);
  }

  // repeated .PBMidLayer.SpeechSegItem speechsegs = 6;
  for (int i = 0; i < this->speechsegs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->speechsegs(i), target);
  }

  // required string datasource = 7;
  if (has_datasource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasource().data(), this->datasource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->datasource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchFileResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBMidLayer.AudioFileTag filetag = 2;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // required string datasource = 7;
    if (has_datasource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasource());
    }

  }
  // repeated .PBMidLayer.SpeakerItem speakers = 4;
  total_size += 1 * this->speakers_size();
  for (int i = 0; i < this->speakers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speakers(i));
  }

  // repeated .PBMidLayer.KeywordSnippet keywords = 5;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keywords(i));
  }

  // repeated .PBMidLayer.SpeechSegItem speechsegs = 6;
  total_size += 1 * this->speechsegs_size();
  for (int i = 0; i < this->speechsegs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speechsegs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFileResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchFileResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchFileResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchFileResult::MergeFrom(const SearchFileResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  speakers_.MergeFrom(from.speakers_);
  keywords_.MergeFrom(from.keywords_);
  speechsegs_.MergeFrom(from.speechsegs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_datasource()) {
      set_datasource(from.datasource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchFileResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFileResult::CopyFrom(const SearchFileResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFileResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  for (int i = 0; i < speakers_size(); i++) {
    if (!this->speakers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < keywords_size(); i++) {
    if (!this->keywords(i).IsInitialized()) return false;
  }
  for (int i = 0; i < speechsegs_size(); i++) {
    if (!this->speechsegs(i).IsInitialized()) return false;
  }
  return true;
}

void SearchFileResult::Swap(SearchFileResult* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(score_, other->score_);
    speakers_.Swap(&other->speakers_);
    keywords_.Swap(&other->keywords_);
    speechsegs_.Swap(&other->speechsegs_);
    std::swap(datasource_, other->datasource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchFileResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchFileResult_descriptor_;
  metadata.reflection = SearchFileResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechSegResult::kSpeechsegsFieldNumber;
const int SpeechSegResult::kCallidFieldNumber;
const int SpeechSegResult::kFiletagFieldNumber;
#endif  // !_MSC_VER

SpeechSegResult::SpeechSegResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeechSegResult::InitAsDefaultInstance() {
}

SpeechSegResult::SpeechSegResult(const SpeechSegResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeechSegResult::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechSegResult::~SpeechSegResult() {
  SharedDtor();
}

void SpeechSegResult::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
  }
}

void SpeechSegResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechSegResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechSegResult_descriptor_;
}

const SpeechSegResult& SpeechSegResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SpeechSegResult* SpeechSegResult::default_instance_ = NULL;

SpeechSegResult* SpeechSegResult::New() const {
  return new SpeechSegResult;
}

void SpeechSegResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  speechsegs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechSegResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBMidLayer.SpeechSegItem speechsegs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speechsegs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speechsegs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_speechsegs;
        if (input->ExpectTag(18)) goto parse_callid;
        break;
      }

      // optional string callid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filetag;
        break;
      }

      // optional .PBMidLayer.AudioFileTag filetag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeechSegResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBMidLayer.SpeechSegItem speechsegs = 1;
  for (int i = 0; i < this->speechsegs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->speechsegs(i), output);
  }

  // optional string callid = 2;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->callid(), output);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeechSegResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBMidLayer.SpeechSegItem speechsegs = 1;
  for (int i = 0; i < this->speechsegs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->speechsegs(i), target);
  }

  // optional string callid = 2;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->callid(), target);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeechSegResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string callid = 2;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // optional .PBMidLayer.AudioFileTag filetag = 3;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  // repeated .PBMidLayer.SpeechSegItem speechsegs = 1;
  total_size += 1 * this->speechsegs_size();
  for (int i = 0; i < this->speechsegs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speechsegs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechSegResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechSegResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechSegResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechSegResult::MergeFrom(const SpeechSegResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  speechsegs_.MergeFrom(from.speechsegs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechSegResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechSegResult::CopyFrom(const SpeechSegResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechSegResult::IsInitialized() const {

  for (int i = 0; i < speechsegs_size(); i++) {
    if (!this->speechsegs(i).IsInitialized()) return false;
  }
  return true;
}

void SpeechSegResult::Swap(SpeechSegResult* other) {
  if (other != this) {
    speechsegs_.Swap(&other->speechsegs_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechSegResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechSegResult_descriptor_;
  metadata.reflection = SpeechSegResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechSegItem::kSpeechsegcodeFieldNumber;
const int SpeechSegItem::kBeginFieldNumber;
const int SpeechSegItem::kEndFieldNumber;
const int SpeechSegItem::kHitbeginFieldNumber;
const int SpeechSegItem::kHitendFieldNumber;
const int SpeechSegItem::kScoreFieldNumber;
const int SpeechSegItem::kSpyidFieldNumber;
#endif  // !_MSC_VER

SpeechSegItem::SpeechSegItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeechSegItem::InitAsDefaultInstance() {
}

SpeechSegItem::SpeechSegItem(const SpeechSegItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeechSegItem::SharedCtor() {
  _cached_size_ = 0;
  speechsegcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_ = 0;
  end_ = 0;
  hitbegin_ = 0;
  hitend_ = 0;
  score_ = 0;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechSegItem::~SpeechSegItem() {
  SharedDtor();
}

void SpeechSegItem::SharedDtor() {
  if (speechsegcode_ != &::google::protobuf::internal::kEmptyString) {
    delete speechsegcode_;
  }
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (this != default_instance_) {
  }
}

void SpeechSegItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechSegItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechSegItem_descriptor_;
}

const SpeechSegItem& SpeechSegItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SpeechSegItem* SpeechSegItem::default_instance_ = NULL;

SpeechSegItem* SpeechSegItem::New() const {
  return new SpeechSegItem;
}

void SpeechSegItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_speechsegcode()) {
      if (speechsegcode_ != &::google::protobuf::internal::kEmptyString) {
        speechsegcode_->clear();
      }
    }
    begin_ = 0;
    end_ = 0;
    hitbegin_ = 0;
    hitend_ = 0;
    score_ = 0;
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechSegItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string speechsegcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechsegcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speechsegcode().data(), this->speechsegcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin;
        break;
      }

      // required int32 begin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // required int32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hitbegin;
        break;
      }

      // required int32 hitbegin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitbegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitbegin_)));
          set_has_hitbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hitend;
        break;
      }

      // required int32 hitend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitend_)));
          set_has_hitend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_score;
        break;
      }

      // required float score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_spyid;
        break;
      }

      // optional string spyid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeechSegItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string speechsegcode = 1;
  if (has_speechsegcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegcode().data(), this->speechsegcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->speechsegcode(), output);
  }

  // required int32 begin = 2;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin(), output);
  }

  // required int32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  // required int32 hitbegin = 4;
  if (has_hitbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hitbegin(), output);
  }

  // required int32 hitend = 5;
  if (has_hitend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hitend(), output);
  }

  // required float score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->score(), output);
  }

  // optional string spyid = 7;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->spyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeechSegItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string speechsegcode = 1;
  if (has_speechsegcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speechsegcode().data(), this->speechsegcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->speechsegcode(), target);
  }

  // required int32 begin = 2;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin(), target);
  }

  // required int32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end(), target);
  }

  // required int32 hitbegin = 4;
  if (has_hitbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hitbegin(), target);
  }

  // required int32 hitend = 5;
  if (has_hitend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hitend(), target);
  }

  // required float score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->score(), target);
  }

  // optional string spyid = 7;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->spyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeechSegItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string speechsegcode = 1;
    if (has_speechsegcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speechsegcode());
    }

    // required int32 begin = 2;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }

    // required int32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // required int32 hitbegin = 4;
    if (has_hitbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitbegin());
    }

    // required int32 hitend = 5;
    if (has_hitend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitend());
    }

    // required float score = 6;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional string spyid = 7;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechSegItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechSegItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechSegItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechSegItem::MergeFrom(const SpeechSegItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speechsegcode()) {
      set_speechsegcode(from.speechsegcode());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_hitbegin()) {
      set_hitbegin(from.hitbegin());
    }
    if (from.has_hitend()) {
      set_hitend(from.hitend());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechSegItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechSegItem::CopyFrom(const SpeechSegItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechSegItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SpeechSegItem::Swap(SpeechSegItem* other) {
  if (other != this) {
    std::swap(speechsegcode_, other->speechsegcode_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(hitbegin_, other->hitbegin_);
    std::swap(hitend_, other->hitend_);
    std::swap(score_, other->score_);
    std::swap(spyid_, other->spyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechSegItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechSegItem_descriptor_;
  metadata.reflection = SpeechSegItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VADResult::kVadsFieldNumber;
const int VADResult::kCallidFieldNumber;
const int VADResult::kFiletagFieldNumber;
#endif  // !_MSC_VER

VADResult::VADResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VADResult::InitAsDefaultInstance() {
}

VADResult::VADResult(const VADResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VADResult::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VADResult::~VADResult() {
  SharedDtor();
}

void VADResult::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
  }
}

void VADResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VADResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VADResult_descriptor_;
}

const VADResult& VADResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

VADResult* VADResult::default_instance_ = NULL;

VADResult* VADResult::New() const {
  return new VADResult;
}

void VADResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  vads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VADResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBMidLayer.VADItem vads = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vads;
        if (input->ExpectTag(18)) goto parse_callid;
        break;
      }

      // optional string callid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filetag;
        break;
      }

      // optional .PBMidLayer.AudioFileTag filetag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VADResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBMidLayer.VADItem vads = 1;
  for (int i = 0; i < this->vads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vads(i), output);
  }

  // optional string callid = 2;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->callid(), output);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VADResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBMidLayer.VADItem vads = 1;
  for (int i = 0; i < this->vads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vads(i), target);
  }

  // optional string callid = 2;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->callid(), target);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VADResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string callid = 2;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // optional .PBMidLayer.AudioFileTag filetag = 3;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  // repeated .PBMidLayer.VADItem vads = 1;
  total_size += 1 * this->vads_size();
  for (int i = 0; i < this->vads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VADResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VADResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VADResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VADResult::MergeFrom(const VADResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  vads_.MergeFrom(from.vads_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VADResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VADResult::CopyFrom(const VADResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VADResult::IsInitialized() const {

  for (int i = 0; i < vads_size(); i++) {
    if (!this->vads(i).IsInitialized()) return false;
  }
  return true;
}

void VADResult::Swap(VADResult* other) {
  if (other != this) {
    vads_.Swap(&other->vads_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VADResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VADResult_descriptor_;
  metadata.reflection = VADResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VADItem::kBeginFieldNumber;
const int VADItem::kEndFieldNumber;
const int VADItem::kSpkFieldNumber;
#endif  // !_MSC_VER

VADItem::VADItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VADItem::InitAsDefaultInstance() {
}

VADItem::VADItem(const VADItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VADItem::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  end_ = 0;
  spk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VADItem::~VADItem() {
  SharedDtor();
}

void VADItem::SharedDtor() {
  if (spk_ != &::google::protobuf::internal::kEmptyString) {
    delete spk_;
  }
  if (this != default_instance_) {
  }
}

void VADItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VADItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VADItem_descriptor_;
}

const VADItem& VADItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

VADItem* VADItem::default_instance_ = NULL;

VADItem* VADItem::New() const {
  return new VADItem;
}

void VADItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
    end_ = 0;
    if (has_spk()) {
      if (spk_ != &::google::protobuf::internal::kEmptyString) {
        spk_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VADItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spk;
        break;
      }

      // optional string spk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spk().data(), this->spk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VADItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  // optional string spk = 3;
  if (has_spk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spk().data(), this->spk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->spk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VADItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  // optional string spk = 3;
  if (has_spk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spk().data(), this->spk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VADItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }

    // required int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // optional string spk = 3;
    if (has_spk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VADItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VADItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VADItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VADItem::MergeFrom(const VADItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_spk()) {
      set_spk(from.spk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VADItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VADItem::CopyFrom(const VADItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VADItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VADItem::Swap(VADItem* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(spk_, other->spk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VADItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VADItem_descriptor_;
  metadata.reflection = VADItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DTMFResult::kDtmsFieldNumber;
const int DTMFResult::kCallidFieldNumber;
const int DTMFResult::kFiletagFieldNumber;
#endif  // !_MSC_VER

DTMFResult::DTMFResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DTMFResult::InitAsDefaultInstance() {
}

DTMFResult::DTMFResult(const DTMFResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DTMFResult::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTMFResult::~DTMFResult() {
  SharedDtor();
}

void DTMFResult::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (this != default_instance_) {
  }
}

void DTMFResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DTMFResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DTMFResult_descriptor_;
}

const DTMFResult& DTMFResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

DTMFResult* DTMFResult::default_instance_ = NULL;

DTMFResult* DTMFResult::New() const {
  return new DTMFResult;
}

void DTMFResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
  }
  dtms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DTMFResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBMidLayer.DTMFItem dtms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dtms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dtms;
        if (input->ExpectTag(18)) goto parse_callid;
        break;
      }

      // optional string callid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filetag;
        break;
      }

      // optional .PBMidLayer.AudioFileTag filetag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DTMFResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBMidLayer.DTMFItem dtms = 1;
  for (int i = 0; i < this->dtms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dtms(i), output);
  }

  // optional string callid = 2;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->callid(), output);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DTMFResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBMidLayer.DTMFItem dtms = 1;
  for (int i = 0; i < this->dtms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dtms(i), target);
  }

  // optional string callid = 2;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->callid(), target);
  }

  // optional .PBMidLayer.AudioFileTag filetag = 3;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DTMFResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string callid = 2;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // optional .PBMidLayer.AudioFileTag filetag = 3;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

  }
  // repeated .PBMidLayer.DTMFItem dtms = 1;
  total_size += 1 * this->dtms_size();
  for (int i = 0; i < this->dtms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dtms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTMFResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DTMFResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DTMFResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DTMFResult::MergeFrom(const DTMFResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dtms_.MergeFrom(from.dtms_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DTMFResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DTMFResult::CopyFrom(const DTMFResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTMFResult::IsInitialized() const {

  for (int i = 0; i < dtms_size(); i++) {
    if (!this->dtms(i).IsInitialized()) return false;
  }
  return true;
}

void DTMFResult::Swap(DTMFResult* other) {
  if (other != this) {
    dtms_.Swap(&other->dtms_);
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DTMFResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DTMFResult_descriptor_;
  metadata.reflection = DTMFResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DTMFItem::kCodeFieldNumber;
const int DTMFItem::kBeginFieldNumber;
const int DTMFItem::kEndFieldNumber;
#endif  // !_MSC_VER

DTMFItem::DTMFItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DTMFItem::InitAsDefaultInstance() {
}

DTMFItem::DTMFItem(const DTMFItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DTMFItem::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  begin_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTMFItem::~DTMFItem() {
  SharedDtor();
}

void DTMFItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DTMFItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DTMFItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DTMFItem_descriptor_;
}

const DTMFItem& DTMFItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

DTMFItem* DTMFItem::default_instance_ = NULL;

DTMFItem* DTMFItem::New() const {
  return new DTMFItem;
}

void DTMFItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    begin_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DTMFItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin;
        break;
      }

      // required int32 begin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // required int32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DTMFItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required int32 begin = 2;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin(), output);
  }

  // required int32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DTMFItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required int32 begin = 2;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin(), target);
  }

  // required int32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DTMFItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required int32 begin = 2;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }

    // required int32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTMFItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DTMFItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DTMFItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DTMFItem::MergeFrom(const DTMFItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DTMFItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DTMFItem::CopyFrom(const DTMFItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTMFItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DTMFItem::Swap(DTMFItem* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DTMFItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DTMFItem_descriptor_;
  metadata.reflection = DTMFItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemStateItem::kStatenameFieldNumber;
const int SystemStateItem::kStatevalueFieldNumber;
const int SystemStateItem::kRemarkFieldNumber;
#endif  // !_MSC_VER

SystemStateItem::SystemStateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemStateItem::InitAsDefaultInstance() {
}

SystemStateItem::SystemStateItem(const SystemStateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemStateItem::SharedCtor() {
  _cached_size_ = 0;
  statename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  statevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemStateItem::~SystemStateItem() {
  SharedDtor();
}

void SystemStateItem::SharedDtor() {
  if (statename_ != &::google::protobuf::internal::kEmptyString) {
    delete statename_;
  }
  if (statevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete statevalue_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void SystemStateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemStateItem_descriptor_;
}

const SystemStateItem& SystemStateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

SystemStateItem* SystemStateItem::default_instance_ = NULL;

SystemStateItem* SystemStateItem::New() const {
  return new SystemStateItem;
}

void SystemStateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_statename()) {
      if (statename_ != &::google::protobuf::internal::kEmptyString) {
        statename_->clear();
      }
    }
    if (has_statevalue()) {
      if (statevalue_ != &::google::protobuf::internal::kEmptyString) {
        statevalue_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemStateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string statename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statename().data(), this->statename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_statevalue;
        break;
      }

      // required string statevalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statevalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statevalue().data(), this->statevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemStateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string statename = 1;
  if (has_statename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statename().data(), this->statename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->statename(), output);
  }

  // required string statevalue = 2;
  if (has_statevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statevalue().data(), this->statevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->statevalue(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemStateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string statename = 1;
  if (has_statename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statename().data(), this->statename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->statename(), target);
  }

  // required string statevalue = 2;
  if (has_statevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statevalue().data(), this->statevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->statevalue(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemStateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string statename = 1;
    if (has_statename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statename());
    }

    // required string statevalue = 2;
    if (has_statevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statevalue());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemStateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemStateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemStateItem::MergeFrom(const SystemStateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statename()) {
      set_statename(from.statename());
    }
    if (from.has_statevalue()) {
      set_statevalue(from.statevalue());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemStateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStateItem::CopyFrom(const SystemStateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SystemStateItem::Swap(SystemStateItem* other) {
  if (other != this) {
    std::swap(statename_, other->statename_);
    std::swap(statevalue_, other->statevalue_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemStateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemStateItem_descriptor_;
  metadata.reflection = SystemStateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileDataNotify::kCallidFieldNumber;
const int FileDataNotify::kFiletagFieldNumber;
const int FileDataNotify::kCodeFieldNumber;
const int FileDataNotify::kVoiceFieldNumber;
const int FileDataNotify::kSyscodeFieldNumber;
#endif  // !_MSC_VER

FileDataNotify::FileDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileDataNotify::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBMidLayer::SystemCode*>(&::PBMidLayer::SystemCode::default_instance());
}

FileDataNotify::FileDataNotify(const FileDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileDataNotify::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  code_ = 0;
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileDataNotify::~FileDataNotify() {
  SharedDtor();
}

void FileDataNotify::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (voice_ != &::google::protobuf::internal::kEmptyString) {
    delete voice_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void FileDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileDataNotify_descriptor_;
}

const FileDataNotify& FileDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMidLayer_2eproto();
  return *default_instance_;
}

FileDataNotify* FileDataNotify::default_instance_ = NULL;

FileDataNotify* FileDataNotify::New() const {
  return new FileDataNotify;
}

void FileDataNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
    code_ = 0;
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::kEmptyString) {
        voice_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBMidLayer::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filetag;
        break;
      }

      // required .PBMidLayer.AudioFileTag filetag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBMidLayer::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required .PBMidLayer.AudioEncodingTag code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBMidLayer::AudioEncodingTag_IsValid(value)) {
            set_code(static_cast< ::PBMidLayer::AudioEncodingTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_voice;
        break;
      }

      // required bytes voice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // required .PBMidLayer.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetag(), output);
  }

  // required .PBMidLayer.AudioEncodingTag code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->code(), output);
  }

  // required bytes voice = 4;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->voice(), output);
  }

  // required .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBMidLayer.AudioFileTag filetag = 2;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetag(), target);
  }

  // required .PBMidLayer.AudioEncodingTag code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->code(), target);
  }

  // required bytes voice = 4;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->voice(), target);
  }

  // required .PBMidLayer.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileDataNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBMidLayer.AudioFileTag filetag = 2;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

    // required .PBMidLayer.AudioEncodingTag code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // required bytes voice = 4;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // required .PBMidLayer.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileDataNotify::MergeFrom(const FileDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBMidLayer::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDataNotify::CopyFrom(const FileDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDataNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FileDataNotify::Swap(FileDataNotify* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(code_, other->code_);
    std::swap(voice_, other->voice_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileDataNotify_descriptor_;
  metadata.reflection = FileDataNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBMidLayer

// @@protoc_insertion_point(global_scope)
