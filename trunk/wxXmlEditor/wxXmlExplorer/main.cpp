/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"

#include <string>
using namespace std;

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainFrame( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////

MainFrame::MainFrame(wxWindow *parent) : MainFrameBase( parent )
{
	// add style wxSTB_ELLIPSIZE_MIDDLE to status bar for wxFB do not support this.
	// note that on pre-xp system only 127 chars on status bar. not sure on other msw.
	m_statusBar->SetWindowStyleFlag(m_statusBar->GetWindowStyleFlag() | wxSTB_ELLIPSIZE_MIDDLE);
}

MainFrame::~MainFrame()
{
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
	Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
	Destroy();
}

#include "..\wxXmlCommon\wxXmlCommon.h"
using namespace tinyxml2;
using namespace wxXmlCommon;

void MainFrame::OnMenuFileOpen(wxCommandEvent& event)
{
	if (!m_strXmlFileName.empty())
	{
		if (wxMessageBox(_("A file already loaded! Open another one?"), _("Please confirm"),
			wxICON_QUESTION | wxYES_NO, this) == wxNO )
			return;
		//else: proceed asking to the user the new file to open
	}
	wxFileDialog openFileDialog(this, _("Open XML file"), "", "",
					"VC Project files|*.vcproj; *.xml|XML files|*.xml|All Files|*.*", 
					wxFD_OPEN|wxFD_FILE_MUST_EXIST);
	if (openFileDialog.ShowModal() == wxID_CANCEL)
		return; // the user changed idea...
	// proceed loading the file chosen by the user;
	// this can be done with e.g. wxWidgets input streams:
	m_strXmlFileName = openFileDialog.GetPath();

	size_t nPos = m_strXmlFileName.rfind(_T("\\"));

	wxString strTemp = m_strXmlFileName.Right(m_strXmlFileName.Len() - nPos - 1);

	m_statusBar->SetStatusText(_T("file: ") + strTemp);


	TiDocument xmlDoc;
	if (xmlDoc.LoadFile(m_strXmlFileName.mb_str()))
	{				
		m_statusBar->SetStatusText(wxString::Format("xml load failed: %d: %s", xmlDoc.ErrorID(), m_strXmlFileName));
		return;
	}
	TiElement* peRoot = xmlDoc.RootElement();
	if (!peRoot)
	{
		return;
	}
	m_treeXml->DeleteAllItems();

	bool bUtf8 = false;
	if (GetDocEncoding(xmlDoc) == TiEncUTF8)
	{
		bUtf8 = true;
	}

	wxTreeItemId idRoot = AddElmtToTree(m_treeXml, wxTreeItemId(), peRoot, bUtf8);

	m_treeXml->Expand(idRoot);
}


void MainFrame::OnMenuFileExpand( wxCommandEvent& event )
{
	wxTreeItemId idSel = m_treeXml->GetSelection();
	if (!idSel.IsOk())
	{
		idSel = m_treeXml->GetRootItem();
		if (!idSel.IsOk())
		{
			return;
		}
	}
	m_treeXml->IsExpanded(idSel) ? 
		m_treeXml->CollapseAllChildren(idSel) :
		m_treeXml->ExpandAllChildren(idSel);

	if (!m_treeXml->IsVisible(idSel))
	{
		m_treeXml->ScrollTo(idSel);
	}
}


#include <deque>
using namespace std;
void MainFrame::m_xmlTreeCtrlOnTreeSelChanged( wxTreeEvent& event )
{
	deque<wxTreeItemId> dqIds;
	wxTreeItemId idSel = m_treeXml->GetSelection();
	while (idSel.IsOk())
	{
		dqIds.push_back(idSel);
		idSel = m_treeXml->GetItemParent(idSel);
	}

	deque<wxString> dqNodes;
	deque<wxString> dqAttrs;
	bool bAttr = false;
	for (int ii = (int)dqIds.size() - 1; ii >= 0; --ii)
	{
		wxString strNode = m_treeXml->GetItemText(dqIds[ii]);
		if (strNode == "*Attributes")
		{
			bAttr = true;
			dqNodes = dqAttrs;
			dqAttrs.clear();
			continue;
		}
		dqAttrs.push_back(strNode);
	}
	if (!bAttr)
	{
		dqNodes = dqAttrs;
		dqAttrs.clear();
	}


	// real path
	wxString str;
	// path with name attr
	wxString str2;
	str += "PATH: ";
	str2 = str;
	for (int ii = 0, iLoop = dqNodes.size(); ii < iLoop; ++ii)
	{
		wxString strNodeTemp1 = dqNodes[ii];
		wxString strNodeTemp2 = dqNodes[ii];
		int nPos1 = dqNodes[ii].Find(" [");
		if (wxNOT_FOUND != nPos1)
		{
			strNodeTemp1 = strNodeTemp1.Left(nPos1);
			strNodeTemp2.Replace("[", "[Name = ");
		}
		str += ("/" + strNodeTemp1);
		str2 += ("/" + strNodeTemp2);
	}

	int nAttr = (int)dqAttrs.size();
	switch (nAttr)
	{
	case 1:
		str += (" (" + dqAttrs[0] + ")");
		str2 += (" (" + dqAttrs[0] + ")");
		break;
	case 2:
		str += (" (" + dqAttrs[0] + " = " + dqAttrs[1] + ")");
		str2 += (" (" + dqAttrs[0] + " = " + dqAttrs[1] + ")");
		break;

	default:
		break;
	}

	m_statusBar->SetStatusText(str);
	m_textMessage->Clear();
	m_textMessage->AppendText(str + "\r" + str2);
}

void MainFrame::m_xmlTreeCtrlOnTreeKeyDown( wxTreeEvent& event )
{
	switch (event.GetKeyCode())
	{
	case WXK_F2:		
		{
			wxTreeEvent evt(event);
			evt.SetEventType(wxEVT_TREE_BEGIN_LABEL_EDIT);
			m_treeXml->GetEventHandler()->QueueEvent(evt.Clone());
		}
		break;
	default:
		event.Skip();
		break;
	}
}