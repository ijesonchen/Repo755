/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainFrame( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////
#include "..\wxXmlCommon\wxXmlCommon.h"
using namespace tinyxml2;
using namespace wxXmlCommon;

#include <wx/stdpaths.h>
#include <wx/fileconf.h>

#include <deque>
using namespace std;

// xml base path and node
const wxString g_strConfigPath = "/VisualStudioProject/Configurations/Configuration";
const wxString g_strAttrName = "Name";
// select top 3 item in list.
int g_nDefaultSelCnt = 0;
int g_nCfgItemCnt = 0;


// used to store xml item node info. 
// relative path, attrname and attr default value, and index in list ctrl.
class ConfigAttr
{
public:
	// relative path
	wxString m_strPath;
	wxString m_strAttrName;
	wxString m_strAttrDefault;
	int m_nItemIdx;

	ConfigAttr(){};

	ConfigAttr(const char* path, const char* attrName, int nItemIdx, const char* arrtDefault = "")
		: m_strPath(path)
		, m_strAttrName(attrName)
		, m_nItemIdx(nItemIdx)
		, m_strAttrDefault(arrtDefault)
	{	};
};
std::deque<ConfigAttr> g_dqConfigAttr;

MainFrame::MainFrame(wxWindow *parent) : MainFrameBase( parent )
{
	// xml node
// 	g_dqConfigAttr.push_back(ConfigAttr("", "OutputDirectory", g_nCfgItemCnt++, "$(SolutionDir)bin\\run"));
// 	g_dqConfigAttr.push_back(ConfigAttr("", "IntermediateDirectory", g_nCfgItemCnt++, "$(SolutionDir)bin\\inter\\$(ProjectName)_$(ConfigurationName)_$(PlatformName)"));
// 	g_dqConfigAttr.push_back(ConfigAttr("Tool [Name=VCLinkerTool]", "OutputFile", g_nCfgItemCnt++, "$(OutDir)\\$(ProjectName)_$(ConfigurationName)_$(PlatformName).exe"));
// 	g_dqConfigAttr.push_back(ConfigAttr("Tool [Name=VCCLCompilerTool]", "AdditionalIncludeDirectories", g_nCfgItemCnt++, "\"$(WXPATH)\\include\";\"$(WXPATH)\\include\\msvc\""));
// 	g_dqConfigAttr.push_back(ConfigAttr("Tool [Name=VCLinkerTool]", "AdditionalLibraryDirectories", g_nCfgItemCnt++, "$(WXPATH)\\lib\\vc_lib"));
// 	g_dqConfigAttr.push_back(ConfigAttr("Tool [Name=VCLinkerTool]", "AdditionalDependencies", g_nCfgItemCnt++));

	m_dvlistConfig->AppendToggleColumn(" ", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE);
	m_dvlistConfig->AppendTextColumn("Item", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE);
	m_dvlistConfig->AppendTextColumn("Value", wxDATAVIEW_CELL_EDITABLE, wxCOL_WIDTH_AUTOSIZE);
	m_dvlistConfig->AppendTextColumn("Path", wxDATAVIEW_CELL_EDITABLE, wxCOL_WIDTH_AUTOSIZE);

	LoadConfig();
// 	wxVector<wxVariant> vtItem;
// 	for (size_t ii = 0, iLoop = g_dqConfigAttr.size(); ii < iLoop; ++ii)
// 	{
// 		ConfigAttr& attr = g_dqConfigAttr[ii];
// 		vtItem.clear();
// 		vtItem.push_back(attr.m_nItemIdx < g_nDefaultSelCnt);
// 		vtItem.push_back(attr.m_strAttrName);
// 		vtItem.push_back("");
// 		m_dvlistConfig->InsertItem(attr.m_nItemIdx, vtItem);
// 	}

	wxString strPath = wxStandardPaths::Get().GetExecutablePath();
	strPath = strPath.Left(strPath.rfind('\\'));
	m_dirExplorer->SetFilter("Files (*.vcproj;*.xml)|*.vcproj;*.xml|vcproj files|*.vcproj|xml files|*.xml|*.*|*");

	m_dirExplorer->SetPath(strPath);
}

MainFrame::~MainFrame()
{
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
	Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
	Destroy();
}

void MainFrame::OnMenuFileOpen(wxCommandEvent& event)
{
	if (!m_strXmlFileName.empty())
	{
		if (wxMessageBox(_("A file already loaded! Open another one?"), _("Please confirm"),
			wxICON_QUESTION | wxYES_NO, this) == wxNO )
			return;
		//else: proceed asking to the user the new file to open
	}
	wxFileDialog openFileDialog(this, _("Open XML file"), "", "",
		"VC Project files|*.vcproj; *.xml|XML files|*.xml|All Files|*.*", 
		wxFD_OPEN|wxFD_FILE_MUST_EXIST);
	if (openFileDialog.ShowModal() == wxID_CANCEL)
		return; // the user changed idea...
	// proceed loading the file chosen by the user;
	// this can be done with e.g. wxWidgets input streams:
	m_strXmlFileName = openFileDialog.GetPath();

	size_t nPos = m_strXmlFileName.rfind(_T("\\"));

	wxString strTemp = m_strXmlFileName.Right(m_strXmlFileName.Len() - nPos - 1);

	m_statusBar->SetStatusText(_T("loading file: ") + strTemp);

	LoadFile();
	return;
}

void MainFrame::OnMenuFileExpand( wxCommandEvent& event )
{
	wxTreeItemId idSel = m_treeXml->GetSelection();
	if (!idSel.IsOk())
	{
		idSel = m_treeXml->GetRootItem();
		if (!idSel.IsOk())
		{
			return;
		}
	}
	m_treeXml->IsExpanded(idSel) ? 
		m_treeXml->CollapseAllChildren(idSel) :
	m_treeXml->ExpandAllChildren(idSel);

	if (!m_treeXml->IsVisible(idSel))
	{
		m_treeXml->ScrollTo(idSel);
	}
}

void MainFrame::dirExplorerOnTreeItemActivated( wxTreeEvent& event )
{
	wxString strName;
	strName = m_dirExplorer->GetPath();

	wxString strExt;
	wxFileName::SplitPath(strName, NULL, NULL, NULL, &strExt);
	if (!wxFileExists(strName))
	{
		event.Skip();
		return;
	}
	m_strXmlFileName = strName;
	LoadFile();

}

void MainFrame::buttonDefaultOnButtonClick( wxCommandEvent& event )
{
	for (size_t ii = 0, iLoop = g_dqConfigAttr.size(); ii < iLoop; ++ii)
	{
		if (g_dqConfigAttr[ii].m_strAttrDefault.Length())
		{
			m_dvlistConfig->SetTextValue(g_dqConfigAttr[ii].m_strAttrDefault, ii,  2);
		}
	}
	;
}

void MainFrame::buttonSaveOnButtonClick( wxCommandEvent& event )
{
	if (m_strXmlFileName.IsEmpty())
	{
		SetStatusText("File not loaded.");
		return;
	}
	// backup file
	wxCopyFile(m_strXmlFileName, m_strXmlFileName + ".bak");

	int nRowCount = m_dvlistConfig->GetItemCount();
	if (nRowCount != g_dqConfigAttr.size())
	{
		SetStatusText(wxString::Format("Internal error! nRowCount = %d, ConfigItem = %d", nRowCount, g_dqConfigAttr.size()));
		return;
	}

	int nConfigCount = m_comboConfig->GetCount();
	if (nConfigCount <= 1)
	{
		SetStatusText(wxString::Format("No configuration found"));
		return;
	}

	int nConfigStart = m_comboConfig->GetSelection();
	if (nConfigStart < 0)
	{
		SetStatusText(wxString::Format("Configuration selection error."));
		return;
	}
	else if (nConfigStart == 0)
	{
		nConfigStart = 1;
	}
	else
	{
		nConfigCount = nConfigStart + 1;
	}

	for (int iCfg = nConfigStart; iCfg < nConfigCount; ++iCfg)
	{
		wxVector<wxVariant> vtItem;
		for (size_t iItem = 0, iLoop = g_dqConfigAttr.size(); iItem < iLoop; ++iItem)
		{
			if (!m_dvlistConfig->GetToggleValue(iItem, 0))
			{
				continue;
			}
			ConfigAttr& attr = g_dqConfigAttr[iItem];
			wxString strAttrName = m_dvlistConfig->GetTextValue(iItem, 1);
			wxString strAttrValue = m_dvlistConfig->GetTextValue(iItem, 2);
			if (strAttrName.Cmp(attr.m_strAttrName))
			{
				SetStatusText(wxString::Format("attribute error: %s - %s", strAttrName, attr.m_strAttrName));
				continue;
			}
			
			wxString strXmlPath = wxString::Format("%s[%s=%s]/%s", 
									g_strConfigPath, g_strAttrName, m_comboConfig->GetString(iCfg), attr.m_strPath);
			
			m_xmlDoc.SetAttribute(strXmlPath, attr.m_strAttrName, strAttrValue.mb_str());
		}
	}

	m_xmlDoc.SaveFile(m_strXmlFileName);
	// re-load the file.
	LoadFile();
}


void MainFrame::dvlistConfigOnDataViewListCtrlItemActivated( wxDataViewEvent& event )
{
	if (2 == event.GetColumn())
	{
		wxDataViewListCtrl* pdv = m_dvlistConfig;
		if (pdv != event.GetEventObject())
		{
			return;
		}
		pdv->EditItem(event.GetItem(), event.GetDataViewColumn());
	}
}

void MainFrame::dvlistConfigOnDataViewListCtrlItemEditingDone( wxDataViewEvent& event )
{
	// use less. only demo for retrieving data in edited column.
	return;
	wxVariant value;
	event.GetModel()->GetValue( value, event.GetItem(), 1 );
	wxString strItemName = value;
	wxString strValue = event.GetValue();

	int nRow = m_dvlistConfig->ItemToRow(event.GetItem());

	SetStatusText(wxString::Format("%s = %s | %s = %s", strItemName, strValue, 
				m_dvlistConfig->GetTextValue(nRow, 1), 
				m_dvlistConfig->GetTextValue(nRow, 2)));

	return;
	const wxDataViewItem &  item = event.GetItem();
	const wxDataViewColumn *  column =event.GetDataViewColumn(); 
	if (column)
	{
		wxDataViewRenderer* pRender = column->GetRenderer();

		unsigned int col = pRender->GetOwner()->GetModelColumn();

		wxVariant value;
		m_dvlistConfig->GetModel()->GetValue( value, item, col );
		wxString str = value;
	}
}

void MainFrame::LoadFile()
{
	if (m_strXmlFileName.IsEmpty())
	{
		return;
	}
	m_xmlDoc.Clear();
	if (m_xmlDoc.LoadFile(m_strXmlFileName.mb_str()))
	{				
		m_statusBar->SetStatusText(wxString::Format("xml load failed: %d: %s", m_xmlDoc.ErrorID(), m_strXmlFileName));
		return;
	}
	const TiElement* peRoot = m_xmlDoc.RootElement();
	if (!peRoot)
	{
		return;
	}
	m_treeXml->DeleteAllItems();

	bool bUtf8 = false;
	if (GetDocEncoding(m_xmlDoc) == TiEncUTF8)
	{
		bUtf8 = true;
	}

	wxTreeItemId idRoot = AddElmtToTree(m_treeXml, wxTreeItemId(), peRoot, bUtf8);

	m_treeXml->Expand(idRoot);

	deque<wxString> dqConfigs;
	const TiElement* peCfgs = NULL;
	// /VisualStudioProject/Configurations/Configuration [Name = Debug|Win32]
	if (peCfgs = m_xmlDoc.RootElement()->FirstChildElement("Configurations"))
	{
		const TiElement* peCfg = peCfgs->FirstChildElement("Configuration");

		while (peCfg)
		{
			const TiAttribute* peAttr = peCfg->FindAttribute("Name");
			if (peAttr)
			{
				dqConfigs.push_back(peAttr->Value());
			}
			peCfg = peCfg->NextSiblingElement();
		}
	}

	if (dqConfigs.size())
	{
		dqConfigs.push_front("All Configs");
	}
	else
	{
		dqConfigs.push_front("No Config");
	}

	m_comboConfig->Clear();
	for (size_t ii = 0, iCount = dqConfigs.size(); ii < iCount; ++ii)
	{
		m_comboConfig->Insert(dqConfigs[ii], ii);
	}
	m_comboConfig->Select(0);

	// load item value and show in list ctrl
	for (size_t ii = 0, iLoop = g_dqConfigAttr.size(); ii < iLoop; ++ii)
	{
		ConfigAttr& attr = g_dqConfigAttr[ii];

		wxString strAttrValue;
		TiElement* pe = m_xmlDoc.ElementByPath(wxString::Format("%s/%s", g_strConfigPath, attr.m_strPath));
		if (pe)
		{
			const char* pAttrValue = pe->Attribute(attr.m_strAttrName);
			strAttrValue = pAttrValue ? pAttrValue : "";
		}
		m_dvlistConfig->SetTextValue(strAttrValue, attr.m_nItemIdx, 2);
	}
}

void MainFrame::LoadConfig()
{
	wxString strAppName;
	if (wxTheApp)
	{
		strAppName = wxTheApp->GetAppName();
		if (strAppName.IsEmpty())
		{
			strAppName = "config";
		}
		else
		{
			strAppName = strAppName.Left(strAppName.Find('_'));
		}
	}
	wxString strConfigName = wxString::Format("%s.ini", strAppName);

	wxFileConfig cfg(wxEmptyString, wxEmptyString, strConfigName, wxEmptyString, wxCONFIG_USE_LOCAL_FILE | wxCONFIG_USE_RELATIVE_PATH | wxCONFIG_USE_NO_ESCAPE_CHARACTERS);
	cfg.SetExpandEnvVars(false);

	wxString strPath;
	wxString strName;
	wxString strValue;

	wxString strEntry;

	cfg.SetPath("/");
	cfg.Read("SelectCount", &g_nDefaultSelCnt);

	long nIdx = 0;
	deque<wxString> dqEntries;
	if (cfg.GetFirstGroup(strEntry, nIdx))
	{
		dqEntries.push_back(strEntry);
		while (cfg.GetNextGroup(strEntry, nIdx))
		{
			dqEntries.push_back(strEntry);
		}
	}

	for (size_t ii = 0, iLoop = dqEntries.size();
		ii < iLoop; ++ii)
	{
		cfg.SetPath("/");
		cfg.SetPath(dqEntries[ii]);

		ConfigAttr attr;
		cfg.Read("Path", &attr.m_strPath);
		cfg.Read("AttrName", &attr.m_strAttrName);
		cfg.Read("AttrDefault", &attr.m_strAttrDefault);
		attr.m_nItemIdx = ii;
		g_dqConfigAttr.push_back(attr);
	}
	wxVector<wxVariant> vtItem;
	for (size_t ii = 0, iLoop = g_dqConfigAttr.size(); ii < iLoop; ++ii)
	{
		ConfigAttr& attr = g_dqConfigAttr[ii];
		vtItem.clear();
		vtItem.push_back(attr.m_nItemIdx < g_nDefaultSelCnt);
		vtItem.push_back(attr.m_strAttrName);
		vtItem.push_back("");
		vtItem.push_back(attr.m_strPath);
		m_dvlistConfig->InsertItem(attr.m_nItemIdx, vtItem);
	}
}