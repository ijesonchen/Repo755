// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBNetTest.proto
#pragma warning(disable: 4996 4512 4244 4125)

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBNetTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PBNetTest {

namespace {

const ::google::protobuf::Descriptor* HeadMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRelease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRelease_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoReqRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoReqRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallProcessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallProcessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLocationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLocationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchAbortRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchAbortRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhoneNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhoneNumber_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioEncodingTag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioFileTag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlarmLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioRecordMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioChannelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioTransFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileAcquireMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriorityType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBNetTest_2eproto() {
  protobuf_AddDesc_PBNetTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBNetTest.proto");
  GOOGLE_CHECK(file != NULL);
  HeadMsg_descriptor_ = file->message_type(0);
  static const int HeadMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, syn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, len_),
  };
  HeadMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadMsg_descriptor_,
      HeadMsg::default_instance_,
      HeadMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadMsg));
  ConnectRequest_descriptor_ = file->message_type(1);
  static const int ConnectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, srid_),
  };
  ConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRequest_descriptor_,
      ConnectRequest::default_instance_,
      ConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRequest));
  ConnectResponse_descriptor_ = file->message_type(2);
  static const int ConnectResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, srid_),
  };
  ConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectResponse_descriptor_,
      ConnectResponse::default_instance_,
      ConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectResponse));
  ConnectRelease_descriptor_ = file->message_type(3);
  static const int ConnectRelease_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, srid_),
  };
  ConnectRelease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRelease_descriptor_,
      ConnectRelease::default_instance_,
      ConnectRelease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRelease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRelease));
  EchoReqRes_descriptor_ = file->message_type(4);
  static const int EchoReqRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoReqRes, timestamp_),
  };
  EchoReqRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoReqRes_descriptor_,
      EchoReqRes::default_instance_,
      EchoReqRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoReqRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoReqRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoReqRes));
  CallProcessRequest_descriptor_ = file->message_type(5);
  static const int CallProcessRequest_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, terminals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, channeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, transflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, caller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, callee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, third_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, recogflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, callerappendix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, calleeappendix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, thirdappendix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, isimport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, voicefiles_),
  };
  CallProcessRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallProcessRequest_descriptor_,
      CallProcessRequest::default_instance_,
      CallProcessRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallProcessRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallProcessRequest));
  FileLocationNotify_descriptor_ = file->message_type(6);
  static const int FileLocationNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, filetag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, syscode_),
  };
  FileLocationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLocationNotify_descriptor_,
      FileLocationNotify::default_instance_,
      FileLocationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLocationNotify));
  SearchAbortRequest_descriptor_ = file->message_type(7);
  static const int SearchAbortRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, aborttaskid_),
  };
  SearchAbortRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchAbortRequest_descriptor_,
      SearchAbortRequest::default_instance_,
      SearchAbortRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAbortRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchAbortRequest));
  SearchResponse_descriptor_ = file->message_type(8);
  static const int SearchResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, syscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, status_),
  };
  SearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResponse_descriptor_,
      SearchResponse::default_instance_,
      SearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResponse));
  AlarmNotify_descriptor_ = file->message_type(9);
  static const int AlarmNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, alarmtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, modulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, syscode_),
  };
  AlarmNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmNotify_descriptor_,
      AlarmNotify::default_instance_,
      AlarmNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmNotify));
  OperationStatus_descriptor_ = file->message_type(10);
  static const int OperationStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, description_),
  };
  OperationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationStatus_descriptor_,
      OperationStatus::default_instance_,
      OperationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationStatus));
  SystemCode_descriptor_ = file->message_type(11);
  static const int SystemCode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, spyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, srid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, datasource_),
  };
  SystemCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemCode_descriptor_,
      SystemCode::default_instance_,
      SystemCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemCode));
  PhoneNumber_descriptor_ = file->message_type(12);
  static const int PhoneNumber_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, telnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, provincecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, areacode_),
  };
  PhoneNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhoneNumber_descriptor_,
      PhoneNumber::default_instance_,
      PhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhoneNumber));
  MsgType_descriptor_ = file->enum_type(0);
  AudioEncodingTag_descriptor_ = file->enum_type(1);
  AudioFileTag_descriptor_ = file->enum_type(2);
  AlarmLevel_descriptor_ = file->enum_type(3);
  AudioRecordMode_descriptor_ = file->enum_type(4);
  AudioChannelType_descriptor_ = file->enum_type(5);
  AudioTransFlag_descriptor_ = file->enum_type(6);
  FileAcquireMethod_descriptor_ = file->enum_type(7);
  PriorityType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBNetTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadMsg_descriptor_, &HeadMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRequest_descriptor_, &ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectResponse_descriptor_, &ConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRelease_descriptor_, &ConnectRelease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoReqRes_descriptor_, &EchoReqRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallProcessRequest_descriptor_, &CallProcessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLocationNotify_descriptor_, &FileLocationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchAbortRequest_descriptor_, &SearchAbortRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResponse_descriptor_, &SearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmNotify_descriptor_, &AlarmNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationStatus_descriptor_, &OperationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemCode_descriptor_, &SystemCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhoneNumber_descriptor_, &PhoneNumber::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBNetTest_2eproto() {
  delete HeadMsg::default_instance_;
  delete HeadMsg_reflection_;
  delete ConnectRequest::default_instance_;
  delete ConnectRequest_reflection_;
  delete ConnectResponse::default_instance_;
  delete ConnectResponse_reflection_;
  delete ConnectRelease::default_instance_;
  delete ConnectRelease_reflection_;
  delete EchoReqRes::default_instance_;
  delete EchoReqRes_reflection_;
  delete CallProcessRequest::default_instance_;
  delete CallProcessRequest_reflection_;
  delete FileLocationNotify::default_instance_;
  delete FileLocationNotify_reflection_;
  delete SearchAbortRequest::default_instance_;
  delete SearchAbortRequest_reflection_;
  delete SearchResponse::default_instance_;
  delete SearchResponse_reflection_;
  delete AlarmNotify::default_instance_;
  delete AlarmNotify_reflection_;
  delete OperationStatus::default_instance_;
  delete OperationStatus_reflection_;
  delete SystemCode::default_instance_;
  delete SystemCode_reflection_;
  delete PhoneNumber::default_instance_;
  delete PhoneNumber_reflection_;
}

void protobuf_AddDesc_PBNetTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PBNetTest.proto\022\tPBNetTest\"W\n\007HeadMsg\022"
    "\020\n\003syn\030\001 \002(\007:\003255\022\020\n\003pro\030\002 \002(\007:\003100\022\014\n\004t"
    "ype\030\003 \002(\007\022\r\n\005seqno\030\004 \002(\006\022\013\n\003len\030\005 \002(\007\"-\n"
    "\016ConnectRequest\022\r\n\005spyid\030\001 \002(\t\022\014\n\004srid\030\002"
    " \001(\t\"Z\n\017ConnectResponse\022*\n\006status\030\001 \002(\0132"
    "\032.PBNetTest.OperationStatus\022\r\n\005spyid\030\002 \002"
    "(\t\022\014\n\004srid\030\003 \001(\t\"Y\n\016ConnectRelease\022*\n\006st"
    "atus\030\001 \002(\0132\032.PBNetTest.OperationStatus\022\r"
    "\n\005spyid\030\002 \002(\t\022\014\n\004srid\030\003 \001(\t\"\037\n\nEchoReqRe"
    "s\022\021\n\ttimestamp\030\001 \002(\r\"\241\005\n\022CallProcessRequ"
    "est\022\016\n\006callid\030\001 \002(\t\022(\n\004flag\030\002 \002(\0162\032.PBNe"
    "tTest.AudioRecordMode\022\021\n\tterminals\030\003 \002(\005"
    "\0220\n\013channeltype\030\004 \002(\0162\033.PBNetTest.AudioC"
    "hannelType\022:\n\ttransflag\030\005 \002(\0162\031.PBNetTes"
    "t.AudioTransFlag:\014ATF_NotTrans\022\016\n\006caller"
    "\030\006 \001(\t\022\016\n\006callee\030\007 \001(\t\022\r\n\005third\030\010 \001(\t\022\021\n"
    "\tstarttime\030\t \001(\004\022\017\n\007endtime\030\n \001(\004\022\024\n\trec"
    "ogflag\030\013 \001(\r:\0017\0225\n\006method\030\014 \001(\0162\034.PBNetT"
    "est.FileAcquireMethod:\007FAM_URL\022.\n\016caller"
    "appendix\030\r \001(\0132\026.PBNetTest.PhoneNumber\022."
    "\n\016calleeappendix\030\016 \001(\0132\026.PBNetTest.Phone"
    "Number\022-\n\rthirdappendix\030\017 \001(\0132\026.PBNetTes"
    "t.PhoneNumber\0224\n\010priority\030\020 \001(\0162\027.PBNetT"
    "est.PriorityType:\tPT_Normal\022&\n\007syscode\030\021"
    " \001(\0132\025.PBNetTest.SystemCode\022\020\n\010isimport\030"
    "\022 \001(\010\0221\n\nvoicefiles\030\023 \003(\0132\035.PBNetTest.Fi"
    "leLocationNotify\"\257\001\n\022FileLocationNotify\022"
    "\016\n\006callid\030\001 \002(\t\022(\n\007filetag\030\002 \002(\0162\027.PBNet"
    "Test.AudioFileTag\022\014\n\004path\030\003 \002(\t\022)\n\004code\030"
    "\004 \002(\0162\033.PBNetTest.AudioEncodingTag\022&\n\007sy"
    "scode\030\005 \001(\0132\025.PBNetTest.SystemCode\"a\n\022Se"
    "archAbortRequest\022\016\n\006taskid\030\001 \002(\t\022&\n\007sysc"
    "ode\030\002 \002(\0132\025.PBNetTest.SystemCode\022\023\n\013abor"
    "ttaskid\030\003 \002(\t\"t\n\016SearchResponse\022\016\n\006taski"
    "d\030\001 \002(\t\022&\n\007syscode\030\002 \002(\0132\025.PBNetTest.Sys"
    "temCode\022*\n\006status\030\003 \002(\0132\032.PBNetTest.Oper"
    "ationStatus\"\223\001\n\013AlarmNotify\022\021\n\talarmtime"
    "\030\001 \002(\t\022$\n\005level\030\002 \002(\0162\025.PBNetTest.AlarmL"
    "evel\022\017\n\007content\030\003 \002(\t\022\022\n\nmodulename\030\004 \002("
    "\t\022&\n\007syscode\030\005 \001(\0132\025.PBNetTest.SystemCod"
    "e\"4\n\017OperationStatus\022\014\n\004code\030\001 \002(\005\022\023\n\013de"
    "scription\030\002 \001(\t\"=\n\nSystemCode\022\r\n\005spyid\030\001"
    " \001(\t\022\014\n\004srid\030\002 \001(\t\022\022\n\ndatasource\030\003 \003(\t\"]"
    "\n\013PhoneNumber\022\021\n\ttelnumber\030\001 \002(\t\022\023\n\013coun"
    "trycode\030\002 \001(\t\022\024\n\014provincecode\030\003 \001(\t\022\020\n\010a"
    "reacode\030\004 \001(\t*\350\007\n\007MsgType\022\017\n\013MSG_UNKNOWN"
    "\020\000\022\023\n\017MSG_CONNECT_REQ\020\001\022\024\n\020MSG_CONNECT_R"
    "ESP\020\002\022\027\n\023MSG_CONNECT_RELEASE\020\010\022\020\n\014MSG_EC"
    "HO_REQ\020\021\022\021\n\rMSG_ECHO_RESP\020\022\022\030\n\024MSG_CALL_"
    "PROCESS_REQ\020!\022\031\n\025MSG_CALL_PROCESS_RESP\020\""
    "\022\032\n\026MSG_HISTORY_SEARCH_REQ\020A\022\033\n\027MSG_HIST"
    "ORY_SEARCH_RESP\020B\022\031\n\025MSG_HISTORY_TRANS_R"
    "EQ\020C\022\032\n\026MSG_HISTORY_TRANS_RESP\020D\022\034\n\030MSG_"
    "FILE_LOCATION_NOTIFY\020E\022\030\n\024MSG_TARGET_QUE"
    "RY_REQ\020G\022\031\n\025MSG_TARGET_QUERY_RESP\020H\022\025\n\020M"
    "SG_SET_RULE_REQ\020\201 \022\026\n\021MSG_SET_RULE_RESP\020"
    "\202 \022\027\n\022MSG_QUERY_RULE_REQ\020\203 \022\030\n\023MSG_QUERY"
    "_RULE_RESP\020\204 \022\030\n\023MSG_SET_SYSPARA_REQ\020\211 \022"
    "\031\n\024MSG_SET_SYSPARA_RESP\020\220 \022\032\n\025MSG_QUERY_"
    "SYSPARA_REQ\020\221 \022\033\n\026MSG_QUERY_SYSPARA_RESP"
    "\020\222 \022\025\n\020MSG_ALARM_NOTIFY\020\224 \022\024\n\017MSG_STAT_N"
    "OTIFY\020\226 \022\032\n\025MSG_OBJECT_MANAGE_REQ\020\227 \022\033\n\026"
    "MSG_OBJECT_MANAGE_RESP\020\230 \022\031\n\024MSG_FEED_BA"
    "CK_NOTIFY\020\231 \022\023\n\016MSG_SEARCH_REQ\020\201\010\022\031\n\024MSG"
    "_SEARCH_ABORT_REQ\020\202\010\022\026\n\021MSG_SEARCH_RESUL"
    "T\020\203\010\022\024\n\017MSG_SEARCH_RESP\020\204\010\022\031\n\024MSG_SEARCH"
    "_STATE_REQ\020\205\010\022\032\n\025MSG_SEARCH_STATE_RESP\020\206"
    "\010\022\025\n\020MSG_GET_FILE_REQ\020\207\010\022\026\n\021MSG_GET_FILE"
    "_RESP\020\210\010\022\032\n\025MSG_ADD_LANG_SAMP_REQ\020\211\010\022\033\n\026"
    "MSG_ADD_LANG_SAMP_RESP\020\212\010\022\035\n\030MSG_OBJECT_"
    "MANAGE_NOTIFY\020\213\010*\377\001\n\020AudioEncodingTag\022\017\n"
    "\013AET_Unknown\020\000\022\014\n\010AET_ALaw\020\001\022\016\n\nAET_Gsm6"
    "10\020\002\022\014\n\010AET_G726\020\003\022\021\n\rAET_LinearPCM\020\004\022\017\n"
    "\013AET_G723_16\020\005\022\017\n\013AET_G723_15\020\006\022\014\n\010AET_G"
    "729\020\007\022\014\n\010AET_ULaw\020\010\022\022\n\016AET_INTEL_G723\020\t\022"
    "\022\n\016AET_INTEL_G729\020\n\022\024\n\020AET_INTEL_GSM690\020"
    "\013\022\016\n\nAET_AMR_NB\020\014\022\017\n\013AET_GSM_EFR\020\r*\215\001\n\014A"
    "udioFileTag\022\017\n\013AFT_Unknown\020\000\022\023\n\017AFT_Comb"
    "ination\020\001\022\027\n\023AFT_Caller_ClusterA\020\002\022\027\n\023AF"
    "T_Callee_ClusterB\020\003\022\026\n\022AFT_Third_Cluster"
    "C\020\004\022\r\n\tAFT_NoTag\020\005*M\n\nAlarmLevel\022\016\n\nAL_U"
    "nknown\020\000\022\016\n\nAL_General\020\001\022\020\n\014AL_Important"
    "\020\002\022\r\n\tAL_Urgent\020\003*K\n\017AudioRecordMode\022\017\n\013"
    "ARM_Unknown\020\000\022\023\n\017ARM_Combination\020\001\022\022\n\016AR"
    "M_Separation\020\002*o\n\020AudioChannelType\022\017\n\013AC"
    "T_Unknown\020\000\022\013\n\007ACT_Pcm\020\001\022\014\n\010ACT_Voip\020\002\022\020"
    "\n\014ACT_TwoLines\020\003\022\021\n\rACT_AirSignal\020\004\022\n\n\006A"
    "CT_WX\020\005*B\n\016AudioTransFlag\022\017\n\013ATF_Unknown"
    "\020\000\022\r\n\tATF_Trans\020\001\022\020\n\014ATF_NotTrans\020\002*\?\n\021F"
    "ileAcquireMethod\022\017\n\013FAM_Unknown\020\000\022\013\n\007FAM"
    "_URL\020\001\022\014\n\010FAM_Data\020\002*F\n\014PriorityType\022\016\n\n"
    "PT_Unknown\020\000\022\013\n\007PT_High\020\001\022\r\n\tPT_Normal\020\002"
    "\022\n\n\006PT_Low\020\003", 3692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBNetTest.proto", &protobuf_RegisterTypes);
  HeadMsg::default_instance_ = new HeadMsg();
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectResponse::default_instance_ = new ConnectResponse();
  ConnectRelease::default_instance_ = new ConnectRelease();
  EchoReqRes::default_instance_ = new EchoReqRes();
  CallProcessRequest::default_instance_ = new CallProcessRequest();
  FileLocationNotify::default_instance_ = new FileLocationNotify();
  SearchAbortRequest::default_instance_ = new SearchAbortRequest();
  SearchResponse::default_instance_ = new SearchResponse();
  AlarmNotify::default_instance_ = new AlarmNotify();
  OperationStatus::default_instance_ = new OperationStatus();
  SystemCode::default_instance_ = new SystemCode();
  PhoneNumber::default_instance_ = new PhoneNumber();
  HeadMsg::default_instance_->InitAsDefaultInstance();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectResponse::default_instance_->InitAsDefaultInstance();
  ConnectRelease::default_instance_->InitAsDefaultInstance();
  EchoReqRes::default_instance_->InitAsDefaultInstance();
  CallProcessRequest::default_instance_->InitAsDefaultInstance();
  FileLocationNotify::default_instance_->InitAsDefaultInstance();
  SearchAbortRequest::default_instance_->InitAsDefaultInstance();
  SearchResponse::default_instance_->InitAsDefaultInstance();
  AlarmNotify::default_instance_->InitAsDefaultInstance();
  OperationStatus::default_instance_->InitAsDefaultInstance();
  SystemCode::default_instance_->InitAsDefaultInstance();
  PhoneNumber::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBNetTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBNetTest_2eproto {
  StaticDescriptorInitializer_PBNetTest_2eproto() {
    protobuf_AddDesc_PBNetTest_2eproto();
  }
} static_descriptor_initializer_PBNetTest_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 8:
    case 17:
    case 18:
    case 33:
    case 34:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 71:
    case 72:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4105:
    case 4112:
    case 4113:
    case 4114:
    case 4116:
    case 4118:
    case 4119:
    case 4120:
    case 4121:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioEncodingTag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioEncodingTag_descriptor_;
}
bool AudioEncodingTag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioFileTag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioFileTag_descriptor_;
}
bool AudioFileTag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlarmLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmLevel_descriptor_;
}
bool AlarmLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioRecordMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioRecordMode_descriptor_;
}
bool AudioRecordMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioChannelType_descriptor_;
}
bool AudioChannelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioTransFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioTransFlag_descriptor_;
}
bool AudioTransFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileAcquireMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileAcquireMethod_descriptor_;
}
bool FileAcquireMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriorityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriorityType_descriptor_;
}
bool PriorityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HeadMsg::kSynFieldNumber;
const int HeadMsg::kProFieldNumber;
const int HeadMsg::kTypeFieldNumber;
const int HeadMsg::kSeqnoFieldNumber;
const int HeadMsg::kLenFieldNumber;
#endif  // !_MSC_VER

HeadMsg::HeadMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadMsg::InitAsDefaultInstance() {
}

HeadMsg::HeadMsg(const HeadMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadMsg::SharedCtor() {
  _cached_size_ = 0;
  syn_ = 255u;
  pro_ = 100u;
  type_ = 0u;
  seqno_ = GOOGLE_ULONGLONG(0);
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadMsg::~HeadMsg() {
  SharedDtor();
}

void HeadMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeadMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadMsg_descriptor_;
}

const HeadMsg& HeadMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

HeadMsg* HeadMsg::default_instance_ = NULL;

HeadMsg* HeadMsg::New() const {
  return new HeadMsg;
}

void HeadMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    syn_ = 255u;
    pro_ = 100u;
    type_ = 0u;
    seqno_ = GOOGLE_ULONGLONG(0);
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 syn = 1 [default = 255];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &syn_)));
          set_has_syn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pro;
        break;
      }

      // required fixed32 pro = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pro_)));
          set_has_pro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_type;
        break;
      }

      // required fixed32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_seqno;
        break;
      }

      // required fixed64 seqno = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_len;
        break;
      }

      // required fixed32 len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 syn = 1 [default = 255];
  if (has_syn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->syn(), output);
  }

  // required fixed32 pro = 2 [default = 100];
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->pro(), output);
  }

  // required fixed32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->type(), output);
  }

  // required fixed64 seqno = 4;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->seqno(), output);
  }

  // required fixed32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 syn = 1 [default = 255];
  if (has_syn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->syn(), target);
  }

  // required fixed32 pro = 2 [default = 100];
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->pro(), target);
  }

  // required fixed32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->type(), target);
  }

  // required fixed64 seqno = 4;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->seqno(), target);
  }

  // required fixed32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 syn = 1 [default = 255];
    if (has_syn()) {
      total_size += 1 + 4;
    }

    // required fixed32 pro = 2 [default = 100];
    if (has_pro()) {
      total_size += 1 + 4;
    }

    // required fixed32 type = 3;
    if (has_type()) {
      total_size += 1 + 4;
    }

    // required fixed64 seqno = 4;
    if (has_seqno()) {
      total_size += 1 + 8;
    }

    // required fixed32 len = 5;
    if (has_len()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadMsg::MergeFrom(const HeadMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syn()) {
      set_syn(from.syn());
    }
    if (from.has_pro()) {
      set_pro(from.pro());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadMsg::CopyFrom(const HeadMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HeadMsg::Swap(HeadMsg* other) {
  if (other != this) {
    std::swap(syn_, other->syn_);
    std::swap(pro_, other->pro_);
    std::swap(type_, other->type_);
    std::swap(seqno_, other->seqno_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadMsg_descriptor_;
  metadata.reflection = HeadMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kSpyidFieldNumber;
const int ConnectRequest::kSridFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectRequest::InitAsDefaultInstance() {
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRequest_descriptor_;
}

const ConnectRequest& ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string spyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srid;
        break;
      }

      // optional string srid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->spyid(), output);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spyid(), target);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->srid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string spyid = 1;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 2;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRequest_descriptor_;
  metadata.reflection = ConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectResponse::kStatusFieldNumber;
const int ConnectResponse::kSpyidFieldNumber;
const int ConnectResponse::kSridFieldNumber;
#endif  // !_MSC_VER

ConnectResponse::ConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::PBNetTest::OperationStatus*>(&::PBNetTest::OperationStatus::default_instance());
}

ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectResponse::~ConnectResponse() {
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectResponse_descriptor_;
}

const ConnectResponse& ConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

ConnectResponse* ConnectResponse::default_instance_ = NULL;

ConnectResponse* ConnectResponse::New() const {
  return new ConnectResponse;
}

void ConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBNetTest::OperationStatus::Clear();
    }
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBNetTest.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_spyid;
        break;
      }

      // required string spyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srid;
        break;
      }

      // optional string srid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBNetTest.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->spyid(), output);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBNetTest.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spyid(), target);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBNetTest.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required string spyid = 2;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 3;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBNetTest::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectResponse_descriptor_;
  metadata.reflection = ConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRelease::kStatusFieldNumber;
const int ConnectRelease::kSpyidFieldNumber;
const int ConnectRelease::kSridFieldNumber;
#endif  // !_MSC_VER

ConnectRelease::ConnectRelease()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectRelease::InitAsDefaultInstance() {
  status_ = const_cast< ::PBNetTest::OperationStatus*>(&::PBNetTest::OperationStatus::default_instance());
}

ConnectRelease::ConnectRelease(const ConnectRelease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectRelease::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRelease::~ConnectRelease() {
  SharedDtor();
}

void ConnectRelease::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void ConnectRelease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRelease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRelease_descriptor_;
}

const ConnectRelease& ConnectRelease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

ConnectRelease* ConnectRelease::default_instance_ = NULL;

ConnectRelease* ConnectRelease::New() const {
  return new ConnectRelease;
}

void ConnectRelease::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::PBNetTest::OperationStatus::Clear();
    }
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRelease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBNetTest.OperationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_spyid;
        break;
      }

      // required string spyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srid;
        break;
      }

      // optional string srid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectRelease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBNetTest.OperationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->spyid(), output);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectRelease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBNetTest.OperationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // required string spyid = 2;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spyid(), target);
  }

  // optional string srid = 3;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectRelease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBNetTest.OperationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required string spyid = 2;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 3;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRelease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRelease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRelease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRelease::MergeFrom(const ConnectRelease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::PBNetTest::OperationStatus::MergeFrom(from.status());
    }
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRelease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRelease::CopyFrom(const ConnectRelease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRelease::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ConnectRelease::Swap(ConnectRelease* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRelease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRelease_descriptor_;
  metadata.reflection = ConnectRelease_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EchoReqRes::kTimestampFieldNumber;
#endif  // !_MSC_VER

EchoReqRes::EchoReqRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EchoReqRes::InitAsDefaultInstance() {
}

EchoReqRes::EchoReqRes(const EchoReqRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EchoReqRes::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoReqRes::~EchoReqRes() {
  SharedDtor();
}

void EchoReqRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EchoReqRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoReqRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoReqRes_descriptor_;
}

const EchoReqRes& EchoReqRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

EchoReqRes* EchoReqRes::default_instance_ = NULL;

EchoReqRes* EchoReqRes::New() const {
  return new EchoReqRes;
}

void EchoReqRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EchoReqRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EchoReqRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EchoReqRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EchoReqRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoReqRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EchoReqRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EchoReqRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EchoReqRes::MergeFrom(const EchoReqRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EchoReqRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoReqRes::CopyFrom(const EchoReqRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoReqRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EchoReqRes::Swap(EchoReqRes* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EchoReqRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoReqRes_descriptor_;
  metadata.reflection = EchoReqRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallProcessRequest::kCallidFieldNumber;
const int CallProcessRequest::kFlagFieldNumber;
const int CallProcessRequest::kTerminalsFieldNumber;
const int CallProcessRequest::kChanneltypeFieldNumber;
const int CallProcessRequest::kTransflagFieldNumber;
const int CallProcessRequest::kCallerFieldNumber;
const int CallProcessRequest::kCalleeFieldNumber;
const int CallProcessRequest::kThirdFieldNumber;
const int CallProcessRequest::kStarttimeFieldNumber;
const int CallProcessRequest::kEndtimeFieldNumber;
const int CallProcessRequest::kRecogflagFieldNumber;
const int CallProcessRequest::kMethodFieldNumber;
const int CallProcessRequest::kCallerappendixFieldNumber;
const int CallProcessRequest::kCalleeappendixFieldNumber;
const int CallProcessRequest::kThirdappendixFieldNumber;
const int CallProcessRequest::kPriorityFieldNumber;
const int CallProcessRequest::kSyscodeFieldNumber;
const int CallProcessRequest::kIsimportFieldNumber;
const int CallProcessRequest::kVoicefilesFieldNumber;
#endif  // !_MSC_VER

CallProcessRequest::CallProcessRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallProcessRequest::InitAsDefaultInstance() {
  callerappendix_ = const_cast< ::PBNetTest::PhoneNumber*>(&::PBNetTest::PhoneNumber::default_instance());
  calleeappendix_ = const_cast< ::PBNetTest::PhoneNumber*>(&::PBNetTest::PhoneNumber::default_instance());
  thirdappendix_ = const_cast< ::PBNetTest::PhoneNumber*>(&::PBNetTest::PhoneNumber::default_instance());
  syscode_ = const_cast< ::PBNetTest::SystemCode*>(&::PBNetTest::SystemCode::default_instance());
}

CallProcessRequest::CallProcessRequest(const CallProcessRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallProcessRequest::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  terminals_ = 0;
  channeltype_ = 0;
  transflag_ = 2;
  caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  third_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  recogflag_ = 7u;
  method_ = 1;
  callerappendix_ = NULL;
  calleeappendix_ = NULL;
  thirdappendix_ = NULL;
  priority_ = 2;
  syscode_ = NULL;
  isimport_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallProcessRequest::~CallProcessRequest() {
  SharedDtor();
}

void CallProcessRequest::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    delete caller_;
  }
  if (callee_ != &::google::protobuf::internal::kEmptyString) {
    delete callee_;
  }
  if (third_ != &::google::protobuf::internal::kEmptyString) {
    delete third_;
  }
  if (this != default_instance_) {
    delete callerappendix_;
    delete calleeappendix_;
    delete thirdappendix_;
    delete syscode_;
  }
}

void CallProcessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallProcessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallProcessRequest_descriptor_;
}

const CallProcessRequest& CallProcessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

CallProcessRequest* CallProcessRequest::default_instance_ = NULL;

CallProcessRequest* CallProcessRequest::New() const {
  return new CallProcessRequest;
}

void CallProcessRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    flag_ = 0;
    terminals_ = 0;
    channeltype_ = 0;
    transflag_ = 2;
    if (has_caller()) {
      if (caller_ != &::google::protobuf::internal::kEmptyString) {
        caller_->clear();
      }
    }
    if (has_callee()) {
      if (callee_ != &::google::protobuf::internal::kEmptyString) {
        callee_->clear();
      }
    }
    if (has_third()) {
      if (third_ != &::google::protobuf::internal::kEmptyString) {
        third_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starttime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    recogflag_ = 7u;
    method_ = 1;
    if (has_callerappendix()) {
      if (callerappendix_ != NULL) callerappendix_->::PBNetTest::PhoneNumber::Clear();
    }
    if (has_calleeappendix()) {
      if (calleeappendix_ != NULL) calleeappendix_->::PBNetTest::PhoneNumber::Clear();
    }
    if (has_thirdappendix()) {
      if (thirdappendix_ != NULL) thirdappendix_->::PBNetTest::PhoneNumber::Clear();
    }
    priority_ = 2;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBNetTest::SystemCode::Clear();
    }
    isimport_ = false;
  }
  voicefiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallProcessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required .PBNetTest.AudioRecordMode flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::AudioRecordMode_IsValid(value)) {
            set_flag(static_cast< ::PBNetTest::AudioRecordMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_terminals;
        break;
      }

      // required int32 terminals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terminals_)));
          set_has_terminals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channeltype;
        break;
      }

      // required .PBNetTest.AudioChannelType channeltype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channeltype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::AudioChannelType_IsValid(value)) {
            set_channeltype(static_cast< ::PBNetTest::AudioChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_transflag;
        break;
      }

      // required .PBNetTest.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transflag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::AudioTransFlag_IsValid(value)) {
            set_transflag(static_cast< ::PBNetTest::AudioTransFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_caller;
        break;
      }

      // optional string caller = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caller().data(), this->caller().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_callee;
        break;
      }

      // optional string callee = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callee().data(), this->callee().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_third;
        break;
      }

      // optional string third = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_third:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_third()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->third().data(), this->third().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_recogflag;
        break;
      }

      // optional uint32 recogflag = 11 [default = 7];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recogflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recogflag_)));
          set_has_recogflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_method;
        break;
      }

      // optional .PBNetTest.FileAcquireMethod method = 12 [default = FAM_URL];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::FileAcquireMethod_IsValid(value)) {
            set_method(static_cast< ::PBNetTest::FileAcquireMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_callerappendix;
        break;
      }

      // optional .PBNetTest.PhoneNumber callerappendix = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callerappendix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callerappendix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_calleeappendix;
        break;
      }

      // optional .PBNetTest.PhoneNumber calleeappendix = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calleeappendix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calleeappendix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_thirdappendix;
        break;
      }

      // optional .PBNetTest.PhoneNumber thirdappendix = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thirdappendix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thirdappendix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_priority;
        break;
      }

      // optional .PBNetTest.PriorityType priority = 16 [default = PT_Normal];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::PriorityType_IsValid(value)) {
            set_priority(static_cast< ::PBNetTest::PriorityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_syscode;
        break;
      }

      // optional .PBNetTest.SystemCode syscode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isimport;
        break;
      }

      // optional bool isimport = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isimport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isimport_)));
          set_has_isimport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_voicefiles;
        break;
      }

      // repeated .PBNetTest.FileLocationNotify voicefiles = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voicefiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_voicefiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_voicefiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallProcessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBNetTest.AudioRecordMode flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->flag(), output);
  }

  // required int32 terminals = 3;
  if (has_terminals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->terminals(), output);
  }

  // required .PBNetTest.AudioChannelType channeltype = 4;
  if (has_channeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channeltype(), output);
  }

  // required .PBNetTest.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
  if (has_transflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->transflag(), output);
  }

  // optional string caller = 6;
  if (has_caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->caller(), output);
  }

  // optional string callee = 7;
  if (has_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->callee(), output);
  }

  // optional string third = 8;
  if (has_third()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->third().data(), this->third().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->third(), output);
  }

  // optional uint64 starttime = 9;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->starttime(), output);
  }

  // optional uint64 endtime = 10;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->endtime(), output);
  }

  // optional uint32 recogflag = 11 [default = 7];
  if (has_recogflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->recogflag(), output);
  }

  // optional .PBNetTest.FileAcquireMethod method = 12 [default = FAM_URL];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->method(), output);
  }

  // optional .PBNetTest.PhoneNumber callerappendix = 13;
  if (has_callerappendix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->callerappendix(), output);
  }

  // optional .PBNetTest.PhoneNumber calleeappendix = 14;
  if (has_calleeappendix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->calleeappendix(), output);
  }

  // optional .PBNetTest.PhoneNumber thirdappendix = 15;
  if (has_thirdappendix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->thirdappendix(), output);
  }

  // optional .PBNetTest.PriorityType priority = 16 [default = PT_Normal];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->priority(), output);
  }

  // optional .PBNetTest.SystemCode syscode = 17;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->syscode(), output);
  }

  // optional bool isimport = 18;
  if (has_isimport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isimport(), output);
  }

  // repeated .PBNetTest.FileLocationNotify voicefiles = 19;
  for (int i = 0; i < this->voicefiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->voicefiles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallProcessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBNetTest.AudioRecordMode flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->flag(), target);
  }

  // required int32 terminals = 3;
  if (has_terminals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->terminals(), target);
  }

  // required .PBNetTest.AudioChannelType channeltype = 4;
  if (has_channeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channeltype(), target);
  }

  // required .PBNetTest.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
  if (has_transflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->transflag(), target);
  }

  // optional string caller = 6;
  if (has_caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->caller(), target);
  }

  // optional string callee = 7;
  if (has_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->callee(), target);
  }

  // optional string third = 8;
  if (has_third()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->third().data(), this->third().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->third(), target);
  }

  // optional uint64 starttime = 9;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->starttime(), target);
  }

  // optional uint64 endtime = 10;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->endtime(), target);
  }

  // optional uint32 recogflag = 11 [default = 7];
  if (has_recogflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->recogflag(), target);
  }

  // optional .PBNetTest.FileAcquireMethod method = 12 [default = FAM_URL];
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->method(), target);
  }

  // optional .PBNetTest.PhoneNumber callerappendix = 13;
  if (has_callerappendix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->callerappendix(), target);
  }

  // optional .PBNetTest.PhoneNumber calleeappendix = 14;
  if (has_calleeappendix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->calleeappendix(), target);
  }

  // optional .PBNetTest.PhoneNumber thirdappendix = 15;
  if (has_thirdappendix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->thirdappendix(), target);
  }

  // optional .PBNetTest.PriorityType priority = 16 [default = PT_Normal];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->priority(), target);
  }

  // optional .PBNetTest.SystemCode syscode = 17;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->syscode(), target);
  }

  // optional bool isimport = 18;
  if (has_isimport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isimport(), target);
  }

  // repeated .PBNetTest.FileLocationNotify voicefiles = 19;
  for (int i = 0; i < this->voicefiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->voicefiles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallProcessRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBNetTest.AudioRecordMode flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // required int32 terminals = 3;
    if (has_terminals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terminals());
    }

    // required .PBNetTest.AudioChannelType channeltype = 4;
    if (has_channeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeltype());
    }

    // required .PBNetTest.AudioTransFlag transflag = 5 [default = ATF_NotTrans];
    if (has_transflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transflag());
    }

    // optional string caller = 6;
    if (has_caller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caller());
    }

    // optional string callee = 7;
    if (has_callee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callee());
    }

    // optional string third = 8;
    if (has_third()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->third());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 starttime = 9;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 10;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 recogflag = 11 [default = 7];
    if (has_recogflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recogflag());
    }

    // optional .PBNetTest.FileAcquireMethod method = 12 [default = FAM_URL];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional .PBNetTest.PhoneNumber callerappendix = 13;
    if (has_callerappendix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callerappendix());
    }

    // optional .PBNetTest.PhoneNumber calleeappendix = 14;
    if (has_calleeappendix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calleeappendix());
    }

    // optional .PBNetTest.PhoneNumber thirdappendix = 15;
    if (has_thirdappendix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thirdappendix());
    }

    // optional .PBNetTest.PriorityType priority = 16 [default = PT_Normal];
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBNetTest.SystemCode syscode = 17;
    if (has_syscode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // optional bool isimport = 18;
    if (has_isimport()) {
      total_size += 2 + 1;
    }

  }
  // repeated .PBNetTest.FileLocationNotify voicefiles = 19;
  total_size += 2 * this->voicefiles_size();
  for (int i = 0; i < this->voicefiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->voicefiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallProcessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallProcessRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallProcessRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallProcessRequest::MergeFrom(const CallProcessRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  voicefiles_.MergeFrom(from.voicefiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_terminals()) {
      set_terminals(from.terminals());
    }
    if (from.has_channeltype()) {
      set_channeltype(from.channeltype());
    }
    if (from.has_transflag()) {
      set_transflag(from.transflag());
    }
    if (from.has_caller()) {
      set_caller(from.caller());
    }
    if (from.has_callee()) {
      set_callee(from.callee());
    }
    if (from.has_third()) {
      set_third(from.third());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_recogflag()) {
      set_recogflag(from.recogflag());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_callerappendix()) {
      mutable_callerappendix()->::PBNetTest::PhoneNumber::MergeFrom(from.callerappendix());
    }
    if (from.has_calleeappendix()) {
      mutable_calleeappendix()->::PBNetTest::PhoneNumber::MergeFrom(from.calleeappendix());
    }
    if (from.has_thirdappendix()) {
      mutable_thirdappendix()->::PBNetTest::PhoneNumber::MergeFrom(from.thirdappendix());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_syscode()) {
      mutable_syscode()->::PBNetTest::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_isimport()) {
      set_isimport(from.isimport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallProcessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallProcessRequest::CopyFrom(const CallProcessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallProcessRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_callerappendix()) {
    if (!this->callerappendix().IsInitialized()) return false;
  }
  if (has_calleeappendix()) {
    if (!this->calleeappendix().IsInitialized()) return false;
  }
  if (has_thirdappendix()) {
    if (!this->thirdappendix().IsInitialized()) return false;
  }
  for (int i = 0; i < voicefiles_size(); i++) {
    if (!this->voicefiles(i).IsInitialized()) return false;
  }
  return true;
}

void CallProcessRequest::Swap(CallProcessRequest* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(flag_, other->flag_);
    std::swap(terminals_, other->terminals_);
    std::swap(channeltype_, other->channeltype_);
    std::swap(transflag_, other->transflag_);
    std::swap(caller_, other->caller_);
    std::swap(callee_, other->callee_);
    std::swap(third_, other->third_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(recogflag_, other->recogflag_);
    std::swap(method_, other->method_);
    std::swap(callerappendix_, other->callerappendix_);
    std::swap(calleeappendix_, other->calleeappendix_);
    std::swap(thirdappendix_, other->thirdappendix_);
    std::swap(priority_, other->priority_);
    std::swap(syscode_, other->syscode_);
    std::swap(isimport_, other->isimport_);
    voicefiles_.Swap(&other->voicefiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallProcessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallProcessRequest_descriptor_;
  metadata.reflection = CallProcessRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLocationNotify::kCallidFieldNumber;
const int FileLocationNotify::kFiletagFieldNumber;
const int FileLocationNotify::kPathFieldNumber;
const int FileLocationNotify::kCodeFieldNumber;
const int FileLocationNotify::kSyscodeFieldNumber;
#endif  // !_MSC_VER

FileLocationNotify::FileLocationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLocationNotify::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBNetTest::SystemCode*>(&::PBNetTest::SystemCode::default_instance());
}

FileLocationNotify::FileLocationNotify(const FileLocationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLocationNotify::SharedCtor() {
  _cached_size_ = 0;
  callid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetag_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = 0;
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLocationNotify::~FileLocationNotify() {
  SharedDtor();
}

void FileLocationNotify::SharedDtor() {
  if (callid_ != &::google::protobuf::internal::kEmptyString) {
    delete callid_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void FileLocationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLocationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLocationNotify_descriptor_;
}

const FileLocationNotify& FileLocationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

FileLocationNotify* FileLocationNotify::default_instance_ = NULL;

FileLocationNotify* FileLocationNotify::New() const {
  return new FileLocationNotify;
}

void FileLocationNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_callid()) {
      if (callid_ != &::google::protobuf::internal::kEmptyString) {
        callid_->clear();
      }
    }
    filetag_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    code_ = 0;
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBNetTest::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLocationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callid().data(), this->callid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filetag;
        break;
      }

      // required .PBNetTest.AudioFileTag filetag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::AudioFileTag_IsValid(value)) {
            set_filetag(static_cast< ::PBNetTest::AudioFileTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // required string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // required .PBNetTest.AudioEncodingTag code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::AudioEncodingTag_IsValid(value)) {
            set_code(static_cast< ::PBNetTest::AudioEncodingTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // optional .PBNetTest.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLocationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->callid(), output);
  }

  // required .PBNetTest.AudioFileTag filetag = 2;
  if (has_filetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetag(), output);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // required .PBNetTest.AudioEncodingTag code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->code(), output);
  }

  // optional .PBNetTest.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLocationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callid().data(), this->callid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callid(), target);
  }

  // required .PBNetTest.AudioFileTag filetag = 2;
  if (has_filetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetag(), target);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // required .PBNetTest.AudioEncodingTag code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->code(), target);
  }

  // optional .PBNetTest.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLocationNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callid());
    }

    // required .PBNetTest.AudioFileTag filetag = 2;
    if (has_filetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetag());
    }

    // required string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required .PBNetTest.AudioEncodingTag code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional .PBNetTest.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLocationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLocationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLocationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLocationNotify::MergeFrom(const FileLocationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_filetag()) {
      set_filetag(from.filetag());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBNetTest::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLocationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLocationNotify::CopyFrom(const FileLocationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLocationNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FileLocationNotify::Swap(FileLocationNotify* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(filetag_, other->filetag_);
    std::swap(path_, other->path_);
    std::swap(code_, other->code_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLocationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLocationNotify_descriptor_;
  metadata.reflection = FileLocationNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchAbortRequest::kTaskidFieldNumber;
const int SearchAbortRequest::kSyscodeFieldNumber;
const int SearchAbortRequest::kAborttaskidFieldNumber;
#endif  // !_MSC_VER

SearchAbortRequest::SearchAbortRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchAbortRequest::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBNetTest::SystemCode*>(&::PBNetTest::SystemCode::default_instance());
}

SearchAbortRequest::SearchAbortRequest(const SearchAbortRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchAbortRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  aborttaskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchAbortRequest::~SearchAbortRequest() {
  SharedDtor();
}

void SearchAbortRequest::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (aborttaskid_ != &::google::protobuf::internal::kEmptyString) {
    delete aborttaskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void SearchAbortRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchAbortRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchAbortRequest_descriptor_;
}

const SearchAbortRequest& SearchAbortRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

SearchAbortRequest* SearchAbortRequest::default_instance_ = NULL;

SearchAbortRequest* SearchAbortRequest::New() const {
  return new SearchAbortRequest;
}

void SearchAbortRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBNetTest::SystemCode::Clear();
    }
    if (has_aborttaskid()) {
      if (aborttaskid_ != &::google::protobuf::internal::kEmptyString) {
        aborttaskid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchAbortRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBNetTest.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_aborttaskid;
        break;
      }

      // required string aborttaskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aborttaskid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aborttaskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aborttaskid().data(), this->aborttaskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchAbortRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBNetTest.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required string aborttaskid = 3;
  if (has_aborttaskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aborttaskid().data(), this->aborttaskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->aborttaskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchAbortRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBNetTest.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required string aborttaskid = 3;
  if (has_aborttaskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aborttaskid().data(), this->aborttaskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aborttaskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchAbortRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBNetTest.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required string aborttaskid = 3;
    if (has_aborttaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aborttaskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchAbortRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchAbortRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchAbortRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchAbortRequest::MergeFrom(const SearchAbortRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBNetTest::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_aborttaskid()) {
      set_aborttaskid(from.aborttaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchAbortRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchAbortRequest::CopyFrom(const SearchAbortRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchAbortRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SearchAbortRequest::Swap(SearchAbortRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(aborttaskid_, other->aborttaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchAbortRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchAbortRequest_descriptor_;
  metadata.reflection = SearchAbortRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchResponse::kTaskidFieldNumber;
const int SearchResponse::kSyscodeFieldNumber;
const int SearchResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

SearchResponse::SearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchResponse::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBNetTest::SystemCode*>(&::PBNetTest::SystemCode::default_instance());
  status_ = const_cast< ::PBNetTest::OperationStatus*>(&::PBNetTest::OperationStatus::default_instance());
}

SearchResponse::SearchResponse(const SearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchResponse::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResponse::~SearchResponse() {
  SharedDtor();
}

void SearchResponse::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
    delete syscode_;
    delete status_;
  }
}

void SearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResponse_descriptor_;
}

const SearchResponse& SearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

SearchResponse* SearchResponse::default_instance_ = NULL;

SearchResponse* SearchResponse::New() const {
  return new SearchResponse;
}

void SearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBNetTest::SystemCode::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBNetTest::OperationStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syscode;
        break;
      }

      // required .PBNetTest.SystemCode syscode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // required .PBNetTest.OperationStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .PBNetTest.SystemCode syscode = 2;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syscode(), output);
  }

  // required .PBNetTest.OperationStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .PBNetTest.SystemCode syscode = 2;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syscode(), target);
  }

  // required .PBNetTest.OperationStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .PBNetTest.SystemCode syscode = 2;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

    // required .PBNetTest.OperationStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBNetTest::SystemCode::MergeFrom(from.syscode());
    }
    if (from.has_status()) {
      mutable_status()->::PBNetTest::OperationStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(syscode_, other->syscode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResponse_descriptor_;
  metadata.reflection = SearchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmNotify::kAlarmtimeFieldNumber;
const int AlarmNotify::kLevelFieldNumber;
const int AlarmNotify::kContentFieldNumber;
const int AlarmNotify::kModulenameFieldNumber;
const int AlarmNotify::kSyscodeFieldNumber;
#endif  // !_MSC_VER

AlarmNotify::AlarmNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlarmNotify::InitAsDefaultInstance() {
  syscode_ = const_cast< ::PBNetTest::SystemCode*>(&::PBNetTest::SystemCode::default_instance());
}

AlarmNotify::AlarmNotify(const AlarmNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlarmNotify::SharedCtor() {
  _cached_size_ = 0;
  alarmtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syscode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmNotify::~AlarmNotify() {
  SharedDtor();
}

void AlarmNotify::SharedDtor() {
  if (alarmtime_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmtime_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (modulename_ != &::google::protobuf::internal::kEmptyString) {
    delete modulename_;
  }
  if (this != default_instance_) {
    delete syscode_;
  }
}

void AlarmNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmNotify_descriptor_;
}

const AlarmNotify& AlarmNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

AlarmNotify* AlarmNotify::default_instance_ = NULL;

AlarmNotify* AlarmNotify::New() const {
  return new AlarmNotify;
}

void AlarmNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarmtime()) {
      if (alarmtime_ != &::google::protobuf::internal::kEmptyString) {
        alarmtime_->clear();
      }
    }
    level_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_modulename()) {
      if (modulename_ != &::google::protobuf::internal::kEmptyString) {
        modulename_->clear();
      }
    }
    if (has_syscode()) {
      if (syscode_ != NULL) syscode_->::PBNetTest::SystemCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string alarmtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmtime().data(), this->alarmtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required .PBNetTest.AlarmLevel level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBNetTest::AlarmLevel_IsValid(value)) {
            set_level(static_cast< ::PBNetTest::AlarmLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_modulename;
        break;
      }

      // required string modulename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modulename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modulename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modulename().data(), this->modulename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syscode;
        break;
      }

      // optional .PBNetTest.SystemCode syscode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syscode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syscode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlarmNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string alarmtime = 1;
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtime().data(), this->alarmtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alarmtime(), output);
  }

  // required .PBNetTest.AlarmLevel level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // required string modulename = 4;
  if (has_modulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulename().data(), this->modulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->modulename(), output);
  }

  // optional .PBNetTest.SystemCode syscode = 5;
  if (has_syscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->syscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlarmNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string alarmtime = 1;
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtime().data(), this->alarmtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alarmtime(), target);
  }

  // required .PBNetTest.AlarmLevel level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // required string modulename = 4;
  if (has_modulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulename().data(), this->modulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->modulename(), target);
  }

  // optional .PBNetTest.SystemCode syscode = 5;
  if (has_syscode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->syscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlarmNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string alarmtime = 1;
    if (has_alarmtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmtime());
    }

    // required .PBNetTest.AlarmLevel level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string modulename = 4;
    if (has_modulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modulename());
    }

    // optional .PBNetTest.SystemCode syscode = 5;
    if (has_syscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmNotify::MergeFrom(const AlarmNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarmtime()) {
      set_alarmtime(from.alarmtime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_modulename()) {
      set_modulename(from.modulename());
    }
    if (from.has_syscode()) {
      mutable_syscode()->::PBNetTest::SystemCode::MergeFrom(from.syscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmNotify::CopyFrom(const AlarmNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AlarmNotify::Swap(AlarmNotify* other) {
  if (other != this) {
    std::swap(alarmtime_, other->alarmtime_);
    std::swap(level_, other->level_);
    std::swap(content_, other->content_);
    std::swap(modulename_, other->modulename_);
    std::swap(syscode_, other->syscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmNotify_descriptor_;
  metadata.reflection = AlarmNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationStatus::kCodeFieldNumber;
const int OperationStatus::kDescriptionFieldNumber;
#endif  // !_MSC_VER

OperationStatus::OperationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationStatus::InitAsDefaultInstance() {
}

OperationStatus::OperationStatus(const OperationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationStatus::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationStatus::~OperationStatus() {
  SharedDtor();
}

void OperationStatus::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void OperationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationStatus_descriptor_;
}

const OperationStatus& OperationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

OperationStatus* OperationStatus::default_instance_ = NULL;

OperationStatus* OperationStatus::New() const {
  return new OperationStatus;
}

void OperationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationStatus::MergeFrom(const OperationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OperationStatus::Swap(OperationStatus* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationStatus_descriptor_;
  metadata.reflection = OperationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemCode::kSpyidFieldNumber;
const int SystemCode::kSridFieldNumber;
const int SystemCode::kDatasourceFieldNumber;
#endif  // !_MSC_VER

SystemCode::SystemCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemCode::InitAsDefaultInstance() {
}

SystemCode::SystemCode(const SystemCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemCode::SharedCtor() {
  _cached_size_ = 0;
  spyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemCode::~SystemCode() {
  SharedDtor();
}

void SystemCode::SharedDtor() {
  if (spyid_ != &::google::protobuf::internal::kEmptyString) {
    delete spyid_;
  }
  if (srid_ != &::google::protobuf::internal::kEmptyString) {
    delete srid_;
  }
  if (this != default_instance_) {
  }
}

void SystemCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemCode_descriptor_;
}

const SystemCode& SystemCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

SystemCode* SystemCode::default_instance_ = NULL;

SystemCode* SystemCode::New() const {
  return new SystemCode;
}

void SystemCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spyid()) {
      if (spyid_ != &::google::protobuf::internal::kEmptyString) {
        spyid_->clear();
      }
    }
    if (has_srid()) {
      if (srid_ != &::google::protobuf::internal::kEmptyString) {
        srid_->clear();
      }
    }
  }
  datasource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string spyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spyid().data(), this->spyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srid;
        break;
      }

      // optional string srid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srid().data(), this->srid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasource;
        break;
      }

      // repeated string datasource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_datasource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasource(this->datasource_size() - 1).data(),
            this->datasource(this->datasource_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasource;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->spyid(), output);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srid(), output);
  }

  // repeated string datasource = 3;
  for (int i = 0; i < this->datasource_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->datasource(i).data(), this->datasource(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->datasource(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string spyid = 1;
  if (has_spyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spyid().data(), this->spyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spyid(), target);
  }

  // optional string srid = 2;
  if (has_srid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srid().data(), this->srid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->srid(), target);
  }

  // repeated string datasource = 3;
  for (int i = 0; i < this->datasource_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasource(i).data(), this->datasource(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->datasource(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string spyid = 1;
    if (has_spyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spyid());
    }

    // optional string srid = 2;
    if (has_srid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srid());
    }

  }
  // repeated string datasource = 3;
  total_size += 1 * this->datasource_size();
  for (int i = 0; i < this->datasource_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->datasource(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemCode::MergeFrom(const SystemCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasource_.MergeFrom(from.datasource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spyid()) {
      set_spyid(from.spyid());
    }
    if (from.has_srid()) {
      set_srid(from.srid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemCode::CopyFrom(const SystemCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemCode::IsInitialized() const {

  return true;
}

void SystemCode::Swap(SystemCode* other) {
  if (other != this) {
    std::swap(spyid_, other->spyid_);
    std::swap(srid_, other->srid_);
    datasource_.Swap(&other->datasource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemCode_descriptor_;
  metadata.reflection = SystemCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneNumber::kTelnumberFieldNumber;
const int PhoneNumber::kCountrycodeFieldNumber;
const int PhoneNumber::kProvincecodeFieldNumber;
const int PhoneNumber::kAreacodeFieldNumber;
#endif  // !_MSC_VER

PhoneNumber::PhoneNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PhoneNumber::InitAsDefaultInstance() {
}

PhoneNumber::PhoneNumber(const PhoneNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PhoneNumber::SharedCtor() {
  _cached_size_ = 0;
  telnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  provincecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneNumber::~PhoneNumber() {
  SharedDtor();
}

void PhoneNumber::SharedDtor() {
  if (telnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete telnumber_;
  }
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (provincecode_ != &::google::protobuf::internal::kEmptyString) {
    delete provincecode_;
  }
  if (areacode_ != &::google::protobuf::internal::kEmptyString) {
    delete areacode_;
  }
  if (this != default_instance_) {
  }
}

void PhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneNumber_descriptor_;
}

const PhoneNumber& PhoneNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetTest_2eproto();
  return *default_instance_;
}

PhoneNumber* PhoneNumber::default_instance_ = NULL;

PhoneNumber* PhoneNumber::New() const {
  return new PhoneNumber;
}

void PhoneNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_telnumber()) {
      if (telnumber_ != &::google::protobuf::internal::kEmptyString) {
        telnumber_->clear();
      }
    }
    if (has_countrycode()) {
      if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
        countrycode_->clear();
      }
    }
    if (has_provincecode()) {
      if (provincecode_ != &::google::protobuf::internal::kEmptyString) {
        provincecode_->clear();
      }
    }
    if (has_areacode()) {
      if (areacode_ != &::google::protobuf::internal::kEmptyString) {
        areacode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhoneNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string telnumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->telnumber().data(), this->telnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_countrycode;
        break;
      }

      // optional string countrycode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countrycode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_provincecode;
        break;
      }

      // optional string provincecode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provincecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provincecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->provincecode().data(), this->provincecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_areacode;
        break;
      }

      // optional string areacode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areacode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areacode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->areacode().data(), this->areacode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhoneNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string telnumber = 1;
  if (has_telnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telnumber().data(), this->telnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->telnumber(), output);
  }

  // optional string countrycode = 2;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->countrycode(), output);
  }

  // optional string provincecode = 3;
  if (has_provincecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provincecode().data(), this->provincecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->provincecode(), output);
  }

  // optional string areacode = 4;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areacode().data(), this->areacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->areacode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PhoneNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string telnumber = 1;
  if (has_telnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telnumber().data(), this->telnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->telnumber(), target);
  }

  // optional string countrycode = 2;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countrycode(), target);
  }

  // optional string provincecode = 3;
  if (has_provincecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provincecode().data(), this->provincecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->provincecode(), target);
  }

  // optional string areacode = 4;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areacode().data(), this->areacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->areacode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PhoneNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string telnumber = 1;
    if (has_telnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telnumber());
    }

    // optional string countrycode = 2;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }

    // optional string provincecode = 3;
    if (has_provincecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provincecode());
    }

    // optional string areacode = 4;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areacode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhoneNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhoneNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhoneNumber::MergeFrom(const PhoneNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_telnumber()) {
      set_telnumber(from.telnumber());
    }
    if (from.has_countrycode()) {
      set_countrycode(from.countrycode());
    }
    if (from.has_provincecode()) {
      set_provincecode(from.provincecode());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhoneNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneNumber::CopyFrom(const PhoneNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PhoneNumber::Swap(PhoneNumber* other) {
  if (other != this) {
    std::swap(telnumber_, other->telnumber_);
    std::swap(countrycode_, other->countrycode_);
    std::swap(provincecode_, other->provincecode_);
    std::swap(areacode_, other->areacode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhoneNumber_descriptor_;
  metadata.reflection = PhoneNumber_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBNetTest

// @@protoc_insertion_point(global_scope)
