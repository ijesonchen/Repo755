/* soapC.cpp
   Generated by gSOAP 2.8.22 from wth.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.22 2015-07-23 01:44:58 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns1__ArrayOfString:
		return soap_in_ns1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro:
		return soap_in_PointerTo_ns1__getWeatherbyCityNamePro(soap, NULL, NULL, "ns1:getWeatherbyCityNamePro");
	case SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName:
		return soap_in_PointerTo_ns1__getWeatherbyCityName(soap, NULL, NULL, "ns1:getWeatherbyCityName");
	case SOAP_TYPE_PointerTo_ns1__getSupportDataSet:
		return soap_in_PointerTo_ns1__getSupportDataSet(soap, NULL, NULL, "ns1:getSupportDataSet");
	case SOAP_TYPE_PointerTo_ns1__getSupportProvince:
		return soap_in_PointerTo_ns1__getSupportProvince(soap, NULL, NULL, "ns1:getSupportProvince");
	case SOAP_TYPE_PointerTo_ns1__getSupportCity:
		return soap_in_PointerTo_ns1__getSupportCity(soap, NULL, NULL, "ns1:getSupportCity");
	case SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult:
		return soap_in_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, NULL, NULL, "ns1:getSupportDataSetResponse-getSupportDataSetResult");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_in_PointerTons1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ArrayOfString"))
		{	*type = SOAP_TYPE_ns1__ArrayOfString;
			return soap_in_ns1__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getSupportDataSetResponse-getSupportDataSetResult"))
		{	*type = SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult;
			return soap_in__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DataSet"))
		{	*type = SOAP_TYPE__ns1__DataSet;
			return soap_in__ns1__DataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getWeatherbyCityNameProResponse"))
		{	*type = SOAP_TYPE__ns1__getWeatherbyCityNameProResponse;
			return soap_in__ns1__getWeatherbyCityNameProResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getWeatherbyCityNamePro"))
		{	*type = SOAP_TYPE__ns1__getWeatherbyCityNamePro;
			return soap_in__ns1__getWeatherbyCityNamePro(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getWeatherbyCityNameResponse"))
		{	*type = SOAP_TYPE__ns1__getWeatherbyCityNameResponse;
			return soap_in__ns1__getWeatherbyCityNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getWeatherbyCityName"))
		{	*type = SOAP_TYPE__ns1__getWeatherbyCityName;
			return soap_in__ns1__getWeatherbyCityName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportDataSetResponse"))
		{	*type = SOAP_TYPE__ns1__getSupportDataSetResponse;
			return soap_in__ns1__getSupportDataSetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportDataSet"))
		{	*type = SOAP_TYPE__ns1__getSupportDataSet;
			return soap_in__ns1__getSupportDataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportProvinceResponse"))
		{	*type = SOAP_TYPE__ns1__getSupportProvinceResponse;
			return soap_in__ns1__getSupportProvinceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportProvince"))
		{	*type = SOAP_TYPE__ns1__getSupportProvince;
			return soap_in__ns1__getSupportProvince(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportCityResponse"))
		{	*type = SOAP_TYPE__ns1__getSupportCityResponse;
			return soap_in__ns1__getSupportCityResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportCity"))
		{	*type = SOAP_TYPE__ns1__getSupportCity;
			return soap_in__ns1__getSupportCity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:schema"))
		{	char **s;
			*type = SOAP_TYPE__xsd__schema;
			s = soap_in__xsd__schema(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult:
		return ((_ns1__getSupportDataSetResponse_getSupportDataSetResult *)ptr)->soap_out(soap, "ns1:getSupportDataSetResponse-getSupportDataSetResult", id, NULL);
	case SOAP_TYPE__ns1__DataSet:
		return ((_ns1__DataSet *)ptr)->soap_out(soap, "ns1:DataSet", id, NULL);
	case SOAP_TYPE__ns1__getWeatherbyCityNameProResponse:
		return ((_ns1__getWeatherbyCityNameProResponse *)ptr)->soap_out(soap, "ns1:getWeatherbyCityNameProResponse", id, NULL);
	case SOAP_TYPE__ns1__getWeatherbyCityNamePro:
		return ((_ns1__getWeatherbyCityNamePro *)ptr)->soap_out(soap, "ns1:getWeatherbyCityNamePro", id, NULL);
	case SOAP_TYPE__ns1__getWeatherbyCityNameResponse:
		return ((_ns1__getWeatherbyCityNameResponse *)ptr)->soap_out(soap, "ns1:getWeatherbyCityNameResponse", id, NULL);
	case SOAP_TYPE__ns1__getWeatherbyCityName:
		return ((_ns1__getWeatherbyCityName *)ptr)->soap_out(soap, "ns1:getWeatherbyCityName", id, NULL);
	case SOAP_TYPE__ns1__getSupportDataSetResponse:
		return ((_ns1__getSupportDataSetResponse *)ptr)->soap_out(soap, "ns1:getSupportDataSetResponse", id, NULL);
	case SOAP_TYPE__ns1__getSupportDataSet:
		return ((_ns1__getSupportDataSet *)ptr)->soap_out(soap, "ns1:getSupportDataSet", id, NULL);
	case SOAP_TYPE__ns1__getSupportProvinceResponse:
		return ((_ns1__getSupportProvinceResponse *)ptr)->soap_out(soap, "ns1:getSupportProvinceResponse", id, NULL);
	case SOAP_TYPE__ns1__getSupportProvince:
		return ((_ns1__getSupportProvince *)ptr)->soap_out(soap, "ns1:getSupportProvince", id, NULL);
	case SOAP_TYPE__ns1__getSupportCityResponse:
		return ((_ns1__getSupportCityResponse *)ptr)->soap_out(soap, "ns1:getSupportCityResponse", id, NULL);
	case SOAP_TYPE__ns1__getSupportCity:
		return ((_ns1__getSupportCity *)ptr)->soap_out(soap, "ns1:getSupportCity", id, NULL);
	case SOAP_TYPE_ns1__ArrayOfString:
		return ((ns1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro:
		return soap_out_PointerTo_ns1__getWeatherbyCityNamePro(soap, tag, id, (_ns1__getWeatherbyCityNamePro *const*)ptr, "ns1:getWeatherbyCityNamePro");
	case SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName:
		return soap_out_PointerTo_ns1__getWeatherbyCityName(soap, tag, id, (_ns1__getWeatherbyCityName *const*)ptr, "ns1:getWeatherbyCityName");
	case SOAP_TYPE_PointerTo_ns1__getSupportDataSet:
		return soap_out_PointerTo_ns1__getSupportDataSet(soap, tag, id, (_ns1__getSupportDataSet *const*)ptr, "ns1:getSupportDataSet");
	case SOAP_TYPE_PointerTo_ns1__getSupportProvince:
		return soap_out_PointerTo_ns1__getSupportProvince(soap, tag, id, (_ns1__getSupportProvince *const*)ptr, "ns1:getSupportProvince");
	case SOAP_TYPE_PointerTo_ns1__getSupportCity:
		return soap_out_PointerTo_ns1__getSupportCity(soap, tag, id, (_ns1__getSupportCity *const*)ptr, "ns1:getSupportCity");
	case SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult:
		return soap_out_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, id, (_ns1__getSupportDataSetResponse_getSupportDataSetResult *const*)ptr, "ns1:getSupportDataSetResponse-getSupportDataSetResult");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_out_PointerTons1__ArrayOfString(soap, tag, id, (ns1__ArrayOfString *const*)ptr, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE__xsd__schema:
		return soap_out_string(soap, "xsd:schema", id, (char*const*)(void*)&ptr, NULL);
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult:
		((_ns1__getSupportDataSetResponse_getSupportDataSetResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DataSet:
		((_ns1__DataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityNameProResponse:
		((_ns1__getWeatherbyCityNameProResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityNamePro:
		((_ns1__getWeatherbyCityNamePro *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityNameResponse:
		((_ns1__getWeatherbyCityNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityName:
		((_ns1__getWeatherbyCityName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportDataSetResponse:
		((_ns1__getSupportDataSetResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportDataSet:
		((_ns1__getSupportDataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportProvinceResponse:
		((_ns1__getSupportProvinceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportProvince:
		((_ns1__getSupportProvince *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportCityResponse:
		((_ns1__getSupportCityResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportCity:
		((_ns1__getSupportCity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		((ns1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityNamePro_:
		soap_serialize___ns1__getWeatherbyCityNamePro_(soap, (const struct __ns1__getWeatherbyCityNamePro_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityName_:
		soap_serialize___ns1__getWeatherbyCityName_(soap, (const struct __ns1__getWeatherbyCityName_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportDataSet_:
		soap_serialize___ns1__getSupportDataSet_(soap, (const struct __ns1__getSupportDataSet_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportProvince_:
		soap_serialize___ns1__getSupportProvince_(soap, (const struct __ns1__getSupportProvince_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportCity_:
		soap_serialize___ns1__getSupportCity_(soap, (const struct __ns1__getSupportCity_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityNamePro:
		soap_serialize___ns1__getWeatherbyCityNamePro(soap, (const struct __ns1__getWeatherbyCityNamePro *)ptr);
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityName:
		soap_serialize___ns1__getWeatherbyCityName(soap, (const struct __ns1__getWeatherbyCityName *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportDataSet:
		soap_serialize___ns1__getSupportDataSet(soap, (const struct __ns1__getSupportDataSet *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportProvince:
		soap_serialize___ns1__getSupportProvince(soap, (const struct __ns1__getSupportProvince *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportCity:
		soap_serialize___ns1__getSupportCity(soap, (const struct __ns1__getSupportCity *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro:
		soap_serialize_PointerTo_ns1__getWeatherbyCityNamePro(soap, (_ns1__getWeatherbyCityNamePro *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName:
		soap_serialize_PointerTo_ns1__getWeatherbyCityName(soap, (_ns1__getWeatherbyCityName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSupportDataSet:
		soap_serialize_PointerTo_ns1__getSupportDataSet(soap, (_ns1__getSupportDataSet *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSupportProvince:
		soap_serialize_PointerTo_ns1__getSupportProvince(soap, (_ns1__getSupportProvince *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSupportCity:
		soap_serialize_PointerTo_ns1__getSupportCity(soap, (_ns1__getSupportCity *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult:
		soap_serialize_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, (_ns1__getSupportDataSetResponse_getSupportDataSetResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		soap_serialize_PointerTons1__ArrayOfString(soap, (ns1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE__xsd__schema:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__ArrayOfString:
		return (void*)soap_instantiate_ns1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportCity:
		return (void*)soap_instantiate__ns1__getSupportCity(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportCityResponse:
		return (void*)soap_instantiate__ns1__getSupportCityResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportProvince:
		return (void*)soap_instantiate__ns1__getSupportProvince(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportProvinceResponse:
		return (void*)soap_instantiate__ns1__getSupportProvinceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportDataSet:
		return (void*)soap_instantiate__ns1__getSupportDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult:
		return (void*)soap_instantiate__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportDataSetResponse:
		return (void*)soap_instantiate__ns1__getSupportDataSetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getWeatherbyCityName:
		return (void*)soap_instantiate__ns1__getWeatherbyCityName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getWeatherbyCityNameResponse:
		return (void*)soap_instantiate__ns1__getWeatherbyCityNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getWeatherbyCityNamePro:
		return (void*)soap_instantiate__ns1__getWeatherbyCityNamePro(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getWeatherbyCityNameProResponse:
		return (void*)soap_instantiate__ns1__getWeatherbyCityNameProResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DataSet:
		return (void*)soap_instantiate__ns1__DataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportCity:
		return (void*)soap_instantiate___ns1__getSupportCity(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportProvince:
		return (void*)soap_instantiate___ns1__getSupportProvince(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportDataSet:
		return (void*)soap_instantiate___ns1__getSupportDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getWeatherbyCityName:
		return (void*)soap_instantiate___ns1__getWeatherbyCityName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getWeatherbyCityNamePro:
		return (void*)soap_instantiate___ns1__getWeatherbyCityNamePro(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportCity_:
		return (void*)soap_instantiate___ns1__getSupportCity_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportProvince_:
		return (void*)soap_instantiate___ns1__getSupportProvince_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportDataSet_:
		return (void*)soap_instantiate___ns1__getSupportDataSet_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getWeatherbyCityName_:
		return (void*)soap_instantiate___ns1__getWeatherbyCityName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getWeatherbyCityNamePro_:
		return (void*)soap_instantiate___ns1__getWeatherbyCityNamePro_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__ArrayOfString*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__ArrayOfString*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getSupportCity:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getSupportCity*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getSupportCity*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getSupportCityResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getSupportCityResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getSupportCityResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getSupportProvince:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getSupportProvince*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getSupportProvince*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getSupportProvinceResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getSupportProvinceResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getSupportProvinceResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getSupportDataSet:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getSupportDataSet*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getSupportDataSet*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getSupportDataSetResponse_getSupportDataSetResult*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getSupportDataSetResponse_getSupportDataSetResult*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getSupportDataSetResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getSupportDataSetResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getSupportDataSetResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getWeatherbyCityName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getWeatherbyCityName*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityNameResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getWeatherbyCityNameResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getWeatherbyCityNameResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityNamePro:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getWeatherbyCityNamePro*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getWeatherbyCityNamePro*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getWeatherbyCityNameProResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getWeatherbyCityNameProResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getWeatherbyCityNameProResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__DataSet:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__DataSet*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__DataSet*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getSupportCity:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getSupportCity*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getSupportCity*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getSupportProvince:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getSupportProvince*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getSupportProvince*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getSupportDataSet:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getSupportDataSet*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getSupportDataSet*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getWeatherbyCityName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getWeatherbyCityName*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityNamePro:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getWeatherbyCityNamePro*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getWeatherbyCityNamePro*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getSupportCity_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getSupportCity_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getSupportCity_*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getSupportProvince_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getSupportProvince_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getSupportProvince_*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getSupportDataSet_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getSupportDataSet_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getSupportDataSet_*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityName_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getWeatherbyCityName_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getWeatherbyCityName_*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getWeatherbyCityNamePro_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getWeatherbyCityNamePro_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getWeatherbyCityNamePro_*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSupportDataSetResponse_getSupportDataSetResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_ns1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema);
	this->_ns1__getSupportDataSetResponse_getSupportDataSetResult::__any = NULL;
}

void _ns1__getSupportDataSetResponse_getSupportDataSetResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__xsd__schema(soap, &this->_ns1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema);
#endif
}

int _ns1__getSupportDataSetResponse_getSupportDataSetResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, int id, const _ns1__getSupportDataSetResponse_getSupportDataSetResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult), type))
		return soap->error;
	if (a->_ns1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema)
	{	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &a->_ns1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "xsd:schema"))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_ns1__getSupportDataSetResponse_getSupportDataSetResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportDataSetResponse_getSupportDataSetResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC4 soap_in__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, _ns1__getSupportDataSetResponse_getSupportDataSetResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportDataSetResponse_getSupportDataSetResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult, sizeof(_ns1__getSupportDataSetResponse_getSupportDataSetResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getSupportDataSetResponse_getSupportDataSetResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_ns1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_ns1__getSupportDataSetResponse_getSupportDataSetResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportDataSetResponse_getSupportDataSetResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult, 0, sizeof(_ns1__getSupportDataSetResponse_getSupportDataSetResult), 0, soap_copy__ns1__getSupportDataSetResponse_getSupportDataSetResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getSupportDataSetResponse_getSupportDataSetResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult);
	if (this->soap_out(soap, tag?tag:"ns1:getSupportDataSetResponse-getSupportDataSetResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportDataSetResponse_getSupportDataSetResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC4 soap_get__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportDataSetResponse_getSupportDataSetResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getSupportDataSetResponse_getSupportDataSetResult);
		if (size)
			*size = sizeof(_ns1__getSupportDataSetResponse_getSupportDataSetResult);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getSupportDataSetResponse_getSupportDataSetResult, n);
		if (size)
			*size = n * sizeof(_ns1__getSupportDataSetResponse_getSupportDataSetResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getSupportDataSetResponse_getSupportDataSetResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getSupportDataSetResponse_getSupportDataSetResult %p -> %p\n", q, p));
	*(_ns1__getSupportDataSetResponse_getSupportDataSetResult*)p = *(_ns1__getSupportDataSetResponse_getSupportDataSetResult*)q;
}

void _ns1__DataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__xsd__schema(soap, &this->_ns1__DataSet::xsd__schema);
	this->_ns1__DataSet::__any = NULL;
	/* transient soap skipped */
}

void _ns1__DataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__xsd__schema(soap, &this->_ns1__DataSet::xsd__schema);
	/* transient soap skipped */
#endif
}

int _ns1__DataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataSet(struct soap *soap, const char *tag, int id, const _ns1__DataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DataSet), type))
		return soap->error;
	if (a->_ns1__DataSet::xsd__schema)
	{	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &a->_ns1__DataSet::xsd__schema, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "xsd:schema"))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_ns1__DataSet::__any), NULL);
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DataSet(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_in__ns1__DataSet(struct soap *soap, const char *tag, _ns1__DataSet *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DataSet, sizeof(_ns1__DataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DataSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_ns1__DataSet::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_ns1__DataSet::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DataSet, 0, sizeof(_ns1__DataSet), 0, soap_copy__ns1__DataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__DataSet);
	if (this->soap_out(soap, tag?tag:"ns1:DataSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DataSet(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_get__ns1__DataSet(struct soap *soap, _ns1__DataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DataSet * SOAP_FMAC2 soap_instantiate__ns1__DataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DataSet, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__DataSet);
		if (size)
			*size = sizeof(_ns1__DataSet);
		((_ns1__DataSet*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__DataSet, n);
		if (size)
			*size = n * sizeof(_ns1__DataSet);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__DataSet*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__DataSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DataSet %p -> %p\n", q, p));
	*(_ns1__DataSet*)p = *(_ns1__DataSet*)q;
}

void _ns1__getWeatherbyCityNameProResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult = NULL;
	/* transient soap skipped */
}

void _ns1__getWeatherbyCityNameProResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult);
	/* transient soap skipped */
#endif
}

int _ns1__getWeatherbyCityNameProResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getWeatherbyCityNameProResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityNameProResponse(struct soap *soap, const char *tag, int id, const _ns1__getWeatherbyCityNameProResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getWeatherbyCityNameProResponse), type))
		return soap->error;
	if (a->getWeatherbyCityNameProResult)
		soap_element_result(soap, "ns1:getWeatherbyCityNameProResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getWeatherbyCityNameProResult", -1, &(a->_ns1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getWeatherbyCityNameProResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getWeatherbyCityNameProResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNameProResponse * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityNameProResponse(struct soap *soap, const char *tag, _ns1__getWeatherbyCityNameProResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getWeatherbyCityNameProResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getWeatherbyCityNameProResponse, sizeof(_ns1__getWeatherbyCityNameProResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getWeatherbyCityNameProResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getWeatherbyCityNameProResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getWeatherbyCityNameProResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getWeatherbyCityNameProResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getWeatherbyCityNameProResult", &(a->_ns1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult), "ns1:ArrayOfString"))
				{	soap_flag_getWeatherbyCityNameProResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:getWeatherbyCityNameProResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getWeatherbyCityNameProResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getWeatherbyCityNameProResponse, 0, sizeof(_ns1__getWeatherbyCityNameProResponse), 0, soap_copy__ns1__getWeatherbyCityNameProResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getWeatherbyCityNameProResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getWeatherbyCityNameProResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getWeatherbyCityNameProResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getWeatherbyCityNameProResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getWeatherbyCityNameProResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNameProResponse * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityNameProResponse(struct soap *soap, _ns1__getWeatherbyCityNameProResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getWeatherbyCityNameProResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getWeatherbyCityNameProResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNameProResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getWeatherbyCityNameProResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getWeatherbyCityNameProResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getWeatherbyCityNameProResponse);
		if (size)
			*size = sizeof(_ns1__getWeatherbyCityNameProResponse);
		((_ns1__getWeatherbyCityNameProResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getWeatherbyCityNameProResponse, n);
		if (size)
			*size = n * sizeof(_ns1__getWeatherbyCityNameProResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getWeatherbyCityNameProResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getWeatherbyCityNameProResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getWeatherbyCityNameProResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getWeatherbyCityNameProResponse %p -> %p\n", q, p));
	*(_ns1__getWeatherbyCityNameProResponse*)p = *(_ns1__getWeatherbyCityNameProResponse*)q;
}

void _ns1__getWeatherbyCityNamePro::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__getWeatherbyCityNamePro::theCityName);
	soap_default_string(soap, &this->_ns1__getWeatherbyCityNamePro::theUserID);
	/* transient soap skipped */
}

void _ns1__getWeatherbyCityNamePro::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_ns1__getWeatherbyCityNamePro::theCityName);
	soap_serialize_string(soap, &this->_ns1__getWeatherbyCityNamePro::theUserID);
	/* transient soap skipped */
#endif
}

int _ns1__getWeatherbyCityNamePro::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getWeatherbyCityNamePro(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, int id, const _ns1__getWeatherbyCityNamePro *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getWeatherbyCityNamePro), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:theCityName", -1, &(a->_ns1__getWeatherbyCityNamePro::theCityName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:theUserID", -1, &(a->_ns1__getWeatherbyCityNamePro::theUserID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getWeatherbyCityNamePro::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getWeatherbyCityNamePro(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, _ns1__getWeatherbyCityNamePro *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getWeatherbyCityNamePro *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getWeatherbyCityNamePro, sizeof(_ns1__getWeatherbyCityNamePro), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getWeatherbyCityNamePro)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getWeatherbyCityNamePro *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_theCityName1 = 1;
	size_t soap_flag_theUserID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theCityName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:theCityName", &(a->_ns1__getWeatherbyCityNamePro::theCityName), "xsd:string"))
				{	soap_flag_theCityName1--;
					continue;
				}
			if (soap_flag_theUserID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:theUserID", &(a->_ns1__getWeatherbyCityNamePro::theUserID), "xsd:string"))
				{	soap_flag_theUserID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getWeatherbyCityNamePro *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getWeatherbyCityNamePro, 0, sizeof(_ns1__getWeatherbyCityNamePro), 0, soap_copy__ns1__getWeatherbyCityNamePro);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getWeatherbyCityNamePro::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getWeatherbyCityNamePro);
	if (this->soap_out(soap, tag?tag:"ns1:getWeatherbyCityNamePro", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getWeatherbyCityNamePro::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getWeatherbyCityNamePro(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityNamePro(struct soap *soap, _ns1__getWeatherbyCityNamePro *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getWeatherbyCityNamePro(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNamePro(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getWeatherbyCityNamePro(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getWeatherbyCityNamePro, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getWeatherbyCityNamePro);
		if (size)
			*size = sizeof(_ns1__getWeatherbyCityNamePro);
		((_ns1__getWeatherbyCityNamePro*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getWeatherbyCityNamePro, n);
		if (size)
			*size = n * sizeof(_ns1__getWeatherbyCityNamePro);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getWeatherbyCityNamePro*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getWeatherbyCityNamePro*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getWeatherbyCityNamePro(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getWeatherbyCityNamePro %p -> %p\n", q, p));
	*(_ns1__getWeatherbyCityNamePro*)p = *(_ns1__getWeatherbyCityNamePro*)q;
}

void _ns1__getWeatherbyCityNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult = NULL;
	/* transient soap skipped */
}

void _ns1__getWeatherbyCityNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult);
	/* transient soap skipped */
#endif
}

int _ns1__getWeatherbyCityNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getWeatherbyCityNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityNameResponse(struct soap *soap, const char *tag, int id, const _ns1__getWeatherbyCityNameResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getWeatherbyCityNameResponse), type))
		return soap->error;
	if (a->getWeatherbyCityNameResult)
		soap_element_result(soap, "ns1:getWeatherbyCityNameResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getWeatherbyCityNameResult", -1, &(a->_ns1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getWeatherbyCityNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getWeatherbyCityNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNameResponse * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityNameResponse(struct soap *soap, const char *tag, _ns1__getWeatherbyCityNameResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getWeatherbyCityNameResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getWeatherbyCityNameResponse, sizeof(_ns1__getWeatherbyCityNameResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getWeatherbyCityNameResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getWeatherbyCityNameResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getWeatherbyCityNameResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getWeatherbyCityNameResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getWeatherbyCityNameResult", &(a->_ns1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult), "ns1:ArrayOfString"))
				{	soap_flag_getWeatherbyCityNameResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:getWeatherbyCityNameResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getWeatherbyCityNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getWeatherbyCityNameResponse, 0, sizeof(_ns1__getWeatherbyCityNameResponse), 0, soap_copy__ns1__getWeatherbyCityNameResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getWeatherbyCityNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getWeatherbyCityNameResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getWeatherbyCityNameResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getWeatherbyCityNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getWeatherbyCityNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNameResponse * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityNameResponse(struct soap *soap, _ns1__getWeatherbyCityNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getWeatherbyCityNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getWeatherbyCityNameResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getWeatherbyCityNameResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getWeatherbyCityNameResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getWeatherbyCityNameResponse);
		if (size)
			*size = sizeof(_ns1__getWeatherbyCityNameResponse);
		((_ns1__getWeatherbyCityNameResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getWeatherbyCityNameResponse, n);
		if (size)
			*size = n * sizeof(_ns1__getWeatherbyCityNameResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getWeatherbyCityNameResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getWeatherbyCityNameResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getWeatherbyCityNameResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getWeatherbyCityNameResponse %p -> %p\n", q, p));
	*(_ns1__getWeatherbyCityNameResponse*)p = *(_ns1__getWeatherbyCityNameResponse*)q;
}

void _ns1__getWeatherbyCityName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__getWeatherbyCityName::theCityName);
	/* transient soap skipped */
}

void _ns1__getWeatherbyCityName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_ns1__getWeatherbyCityName::theCityName);
	/* transient soap skipped */
#endif
}

int _ns1__getWeatherbyCityName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getWeatherbyCityName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityName(struct soap *soap, const char *tag, int id, const _ns1__getWeatherbyCityName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getWeatherbyCityName), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:theCityName", -1, &(a->_ns1__getWeatherbyCityName::theCityName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getWeatherbyCityName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getWeatherbyCityName(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityName * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityName(struct soap *soap, const char *tag, _ns1__getWeatherbyCityName *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getWeatherbyCityName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getWeatherbyCityName, sizeof(_ns1__getWeatherbyCityName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getWeatherbyCityName)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getWeatherbyCityName *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_theCityName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theCityName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:theCityName", &(a->_ns1__getWeatherbyCityName::theCityName), "xsd:string"))
				{	soap_flag_theCityName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getWeatherbyCityName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getWeatherbyCityName, 0, sizeof(_ns1__getWeatherbyCityName), 0, soap_copy__ns1__getWeatherbyCityName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getWeatherbyCityName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getWeatherbyCityName);
	if (this->soap_out(soap, tag?tag:"ns1:getWeatherbyCityName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getWeatherbyCityName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getWeatherbyCityName(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityName * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityName(struct soap *soap, _ns1__getWeatherbyCityName *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getWeatherbyCityName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getWeatherbyCityName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getWeatherbyCityName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getWeatherbyCityName);
		if (size)
			*size = sizeof(_ns1__getWeatherbyCityName);
		((_ns1__getWeatherbyCityName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getWeatherbyCityName, n);
		if (size)
			*size = n * sizeof(_ns1__getWeatherbyCityName);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getWeatherbyCityName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getWeatherbyCityName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getWeatherbyCityName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getWeatherbyCityName %p -> %p\n", q, p));
	*(_ns1__getWeatherbyCityName*)p = *(_ns1__getWeatherbyCityName*)q;
}

void _ns1__getSupportDataSetResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSupportDataSetResponse::getSupportDataSetResult = NULL;
	/* transient soap skipped */
}

void _ns1__getSupportDataSetResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, &this->_ns1__getSupportDataSetResponse::getSupportDataSetResult);
	/* transient soap skipped */
#endif
}

int _ns1__getSupportDataSetResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportDataSetResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportDataSetResponse(struct soap *soap, const char *tag, int id, const _ns1__getSupportDataSetResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportDataSetResponse), type))
		return soap->error;
	if (a->getSupportDataSetResult)
		soap_element_result(soap, "ns1:getSupportDataSetResult");
	if (soap_out_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, "ns1:getSupportDataSetResult", -1, &(a->_ns1__getSupportDataSetResponse::getSupportDataSetResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportDataSetResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportDataSetResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportDataSetResponse * SOAP_FMAC4 soap_in__ns1__getSupportDataSetResponse(struct soap *soap, const char *tag, _ns1__getSupportDataSetResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportDataSetResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportDataSetResponse, sizeof(_ns1__getSupportDataSetResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getSupportDataSetResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getSupportDataSetResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getSupportDataSetResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportDataSetResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, "ns1:getSupportDataSetResult", &(a->_ns1__getSupportDataSetResponse::getSupportDataSetResult), ""))
				{	soap_flag_getSupportDataSetResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:getSupportDataSetResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportDataSetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportDataSetResponse, 0, sizeof(_ns1__getSupportDataSetResponse), 0, soap_copy__ns1__getSupportDataSetResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getSupportDataSetResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getSupportDataSetResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getSupportDataSetResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportDataSetResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportDataSetResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportDataSetResponse * SOAP_FMAC4 soap_get__ns1__getSupportDataSetResponse(struct soap *soap, _ns1__getSupportDataSetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportDataSetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getSupportDataSetResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportDataSetResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getSupportDataSetResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getSupportDataSetResponse);
		if (size)
			*size = sizeof(_ns1__getSupportDataSetResponse);
		((_ns1__getSupportDataSetResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getSupportDataSetResponse, n);
		if (size)
			*size = n * sizeof(_ns1__getSupportDataSetResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getSupportDataSetResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getSupportDataSetResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSupportDataSetResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getSupportDataSetResponse %p -> %p\n", q, p));
	*(_ns1__getSupportDataSetResponse*)p = *(_ns1__getSupportDataSetResponse*)q;
}

void _ns1__getSupportDataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__getSupportDataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__getSupportDataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportDataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportDataSet(struct soap *soap, const char *tag, int id, const _ns1__getSupportDataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportDataSet), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportDataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportDataSet(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportDataSet * SOAP_FMAC4 soap_in__ns1__getSupportDataSet(struct soap *soap, const char *tag, _ns1__getSupportDataSet *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportDataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportDataSet, sizeof(_ns1__getSupportDataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getSupportDataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getSupportDataSet *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportDataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportDataSet, 0, sizeof(_ns1__getSupportDataSet), 0, soap_copy__ns1__getSupportDataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getSupportDataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getSupportDataSet);
	if (this->soap_out(soap, tag?tag:"ns1:getSupportDataSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportDataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportDataSet(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportDataSet * SOAP_FMAC4 soap_get__ns1__getSupportDataSet(struct soap *soap, _ns1__getSupportDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getSupportDataSet * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportDataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getSupportDataSet, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getSupportDataSet);
		if (size)
			*size = sizeof(_ns1__getSupportDataSet);
		((_ns1__getSupportDataSet*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getSupportDataSet, n);
		if (size)
			*size = n * sizeof(_ns1__getSupportDataSet);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getSupportDataSet*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getSupportDataSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSupportDataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getSupportDataSet %p -> %p\n", q, p));
	*(_ns1__getSupportDataSet*)p = *(_ns1__getSupportDataSet*)q;
}

void _ns1__getSupportProvinceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSupportProvinceResponse::getSupportProvinceResult = NULL;
	/* transient soap skipped */
}

void _ns1__getSupportProvinceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getSupportProvinceResponse::getSupportProvinceResult);
	/* transient soap skipped */
#endif
}

int _ns1__getSupportProvinceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportProvinceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportProvinceResponse(struct soap *soap, const char *tag, int id, const _ns1__getSupportProvinceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportProvinceResponse), type))
		return soap->error;
	if (a->getSupportProvinceResult)
		soap_element_result(soap, "ns1:getSupportProvinceResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getSupportProvinceResult", -1, &(a->_ns1__getSupportProvinceResponse::getSupportProvinceResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportProvinceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportProvinceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportProvinceResponse * SOAP_FMAC4 soap_in__ns1__getSupportProvinceResponse(struct soap *soap, const char *tag, _ns1__getSupportProvinceResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportProvinceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportProvinceResponse, sizeof(_ns1__getSupportProvinceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getSupportProvinceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getSupportProvinceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getSupportProvinceResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportProvinceResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getSupportProvinceResult", &(a->_ns1__getSupportProvinceResponse::getSupportProvinceResult), "ns1:ArrayOfString"))
				{	soap_flag_getSupportProvinceResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:getSupportProvinceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportProvinceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportProvinceResponse, 0, sizeof(_ns1__getSupportProvinceResponse), 0, soap_copy__ns1__getSupportProvinceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getSupportProvinceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getSupportProvinceResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getSupportProvinceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportProvinceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportProvinceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportProvinceResponse * SOAP_FMAC4 soap_get__ns1__getSupportProvinceResponse(struct soap *soap, _ns1__getSupportProvinceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportProvinceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getSupportProvinceResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportProvinceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportProvinceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getSupportProvinceResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getSupportProvinceResponse);
		if (size)
			*size = sizeof(_ns1__getSupportProvinceResponse);
		((_ns1__getSupportProvinceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getSupportProvinceResponse, n);
		if (size)
			*size = n * sizeof(_ns1__getSupportProvinceResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getSupportProvinceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getSupportProvinceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSupportProvinceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getSupportProvinceResponse %p -> %p\n", q, p));
	*(_ns1__getSupportProvinceResponse*)p = *(_ns1__getSupportProvinceResponse*)q;
}

void _ns1__getSupportProvince::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__getSupportProvince::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__getSupportProvince::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportProvince(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportProvince(struct soap *soap, const char *tag, int id, const _ns1__getSupportProvince *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportProvince), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportProvince::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportProvince(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportProvince * SOAP_FMAC4 soap_in__ns1__getSupportProvince(struct soap *soap, const char *tag, _ns1__getSupportProvince *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportProvince *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportProvince, sizeof(_ns1__getSupportProvince), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getSupportProvince)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getSupportProvince *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportProvince *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportProvince, 0, sizeof(_ns1__getSupportProvince), 0, soap_copy__ns1__getSupportProvince);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getSupportProvince::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getSupportProvince);
	if (this->soap_out(soap, tag?tag:"ns1:getSupportProvince", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportProvince::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportProvince(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportProvince * SOAP_FMAC4 soap_get__ns1__getSupportProvince(struct soap *soap, _ns1__getSupportProvince *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getSupportProvince * SOAP_FMAC2 soap_instantiate__ns1__getSupportProvince(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportProvince(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getSupportProvince, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getSupportProvince);
		if (size)
			*size = sizeof(_ns1__getSupportProvince);
		((_ns1__getSupportProvince*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getSupportProvince, n);
		if (size)
			*size = n * sizeof(_ns1__getSupportProvince);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getSupportProvince*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getSupportProvince*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSupportProvince(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getSupportProvince %p -> %p\n", q, p));
	*(_ns1__getSupportProvince*)p = *(_ns1__getSupportProvince*)q;
}

void _ns1__getSupportCityResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSupportCityResponse::getSupportCityResult = NULL;
	/* transient soap skipped */
}

void _ns1__getSupportCityResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getSupportCityResponse::getSupportCityResult);
	/* transient soap skipped */
#endif
}

int _ns1__getSupportCityResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportCityResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityResponse(struct soap *soap, const char *tag, int id, const _ns1__getSupportCityResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportCityResponse), type))
		return soap->error;
	if (a->getSupportCityResult)
		soap_element_result(soap, "ns1:getSupportCityResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getSupportCityResult", -1, &(a->_ns1__getSupportCityResponse::getSupportCityResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportCityResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportCityResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportCityResponse * SOAP_FMAC4 soap_in__ns1__getSupportCityResponse(struct soap *soap, const char *tag, _ns1__getSupportCityResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportCityResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportCityResponse, sizeof(_ns1__getSupportCityResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getSupportCityResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getSupportCityResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getSupportCityResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportCityResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getSupportCityResult", &(a->_ns1__getSupportCityResponse::getSupportCityResult), "ns1:ArrayOfString"))
				{	soap_flag_getSupportCityResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:getSupportCityResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportCityResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportCityResponse, 0, sizeof(_ns1__getSupportCityResponse), 0, soap_copy__ns1__getSupportCityResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getSupportCityResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getSupportCityResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getSupportCityResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportCityResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportCityResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportCityResponse * SOAP_FMAC4 soap_get__ns1__getSupportCityResponse(struct soap *soap, _ns1__getSupportCityResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportCityResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getSupportCityResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportCityResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getSupportCityResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getSupportCityResponse);
		if (size)
			*size = sizeof(_ns1__getSupportCityResponse);
		((_ns1__getSupportCityResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getSupportCityResponse, n);
		if (size)
			*size = n * sizeof(_ns1__getSupportCityResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getSupportCityResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getSupportCityResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSupportCityResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getSupportCityResponse %p -> %p\n", q, p));
	*(_ns1__getSupportCityResponse*)p = *(_ns1__getSupportCityResponse*)q;
}

void _ns1__getSupportCity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__getSupportCity::byProvinceName);
	/* transient soap skipped */
}

void _ns1__getSupportCity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_ns1__getSupportCity::byProvinceName);
	/* transient soap skipped */
#endif
}

int _ns1__getSupportCity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportCity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCity(struct soap *soap, const char *tag, int id, const _ns1__getSupportCity *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportCity), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:byProvinceName", -1, &(a->_ns1__getSupportCity::byProvinceName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportCity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportCity(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportCity * SOAP_FMAC4 soap_in__ns1__getSupportCity(struct soap *soap, const char *tag, _ns1__getSupportCity *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportCity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportCity, sizeof(_ns1__getSupportCity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getSupportCity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getSupportCity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_byProvinceName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_byProvinceName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:byProvinceName", &(a->_ns1__getSupportCity::byProvinceName), "xsd:string"))
				{	soap_flag_byProvinceName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportCity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportCity, 0, sizeof(_ns1__getSupportCity), 0, soap_copy__ns1__getSupportCity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getSupportCity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__getSupportCity);
	if (this->soap_out(soap, tag?tag:"ns1:getSupportCity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportCity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportCity(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportCity * SOAP_FMAC4 soap_get__ns1__getSupportCity(struct soap *soap, _ns1__getSupportCity *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportCity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getSupportCity * SOAP_FMAC2 soap_instantiate__ns1__getSupportCity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportCity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getSupportCity, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__getSupportCity);
		if (size)
			*size = sizeof(_ns1__getSupportCity);
		((_ns1__getSupportCity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__getSupportCity, n);
		if (size)
			*size = n * sizeof(_ns1__getSupportCity);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getSupportCity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getSupportCity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSupportCity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getSupportCity %p -> %p\n", q, p));
	*(_ns1__getSupportCity*)p = *(_ns1__getSupportCity*)q;
}

void ns1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfString::__sizestring = 0;
	this->ns1__ArrayOfString::string = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__ArrayOfString::string)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfString::__sizestring; i++)
		{
			soap_serialize_string(soap, this->ns1__ArrayOfString::string + i);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap *soap, const char *tag, int id, const ns1__ArrayOfString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfString), type))
		return soap->error;
	if (a->ns1__ArrayOfString::string)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfString::__sizestring; i++)
			if (soap_out_string(soap, "ns1:string", -1, a->ns1__ArrayOfString::string + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_string1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:string", 1, NULL))
			{	if (a->ns1__ArrayOfString::string == NULL)
				{	if (soap_blist_string1 == NULL)
						soap_blist_string1 = soap_new_block(soap);
					a->ns1__ArrayOfString::string = (char **)soap_push_block(soap, soap_blist_string1, sizeof(char *));
					if (a->ns1__ArrayOfString::string == NULL)
						return NULL;
					*a->ns1__ArrayOfString::string = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "ns1:string", a->ns1__ArrayOfString::string, "xsd:string"))
				{	a->ns1__ArrayOfString::__sizestring++;
					a->ns1__ArrayOfString::string = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfString::string)
			soap_pop_block(soap, soap_blist_string1);
		if (a->ns1__ArrayOfString::__sizestring)
			a->ns1__ArrayOfString::string = (char **)soap_save_block(soap, soap_blist_string1, NULL, 1);
		else
		{	a->ns1__ArrayOfString::string = NULL;
			if (soap_blist_string1)
				soap_end_block(soap, soap_blist_string1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfString, 0, sizeof(ns1__ArrayOfString), 0, soap_copy_ns1__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfString);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfString, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns1__ArrayOfString);
		if (size)
			*size = sizeof(ns1__ArrayOfString);
		((ns1__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns1__ArrayOfString, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfString);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfString %p -> %p\n", q, p));
	*(ns1__ArrayOfString*)p = *(ns1__ArrayOfString*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityNamePro_(struct soap *soap, struct __ns1__getWeatherbyCityNamePro_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getWeatherbyCityNamePro = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityNamePro_(struct soap *soap, const struct __ns1__getWeatherbyCityNamePro_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getWeatherbyCityNamePro(soap, &a->ns1__getWeatherbyCityNamePro);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityNamePro_(struct soap *soap, const char *tag, int id, const struct __ns1__getWeatherbyCityNamePro_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getWeatherbyCityNamePro(soap, "ns1:getWeatherbyCityNamePro", -1, &a->ns1__getWeatherbyCityNamePro, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro_ * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityNamePro_(struct soap *soap, const char *tag, struct __ns1__getWeatherbyCityNamePro_ *a, const char *type)
{
	size_t soap_flag_ns1__getWeatherbyCityNamePro = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getWeatherbyCityNamePro_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getWeatherbyCityNamePro_, sizeof(struct __ns1__getWeatherbyCityNamePro_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getWeatherbyCityNamePro_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getWeatherbyCityNamePro && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getWeatherbyCityNamePro(soap, "ns1:getWeatherbyCityNamePro", &a->ns1__getWeatherbyCityNamePro, ""))
				{	soap_flag_ns1__getWeatherbyCityNamePro--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityNamePro_(struct soap *soap, const struct __ns1__getWeatherbyCityNamePro_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getWeatherbyCityNamePro_(soap, tag?tag:"-ns1:getWeatherbyCityNamePro", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro_ * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityNamePro_(struct soap *soap, struct __ns1__getWeatherbyCityNamePro_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getWeatherbyCityNamePro_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getWeatherbyCityNamePro_ * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityNamePro_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getWeatherbyCityNamePro_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getWeatherbyCityNamePro_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getWeatherbyCityNamePro_);
		if (size)
			*size = sizeof(struct __ns1__getWeatherbyCityNamePro_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getWeatherbyCityNamePro_, n);
		if (size)
			*size = n * sizeof(struct __ns1__getWeatherbyCityNamePro_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getWeatherbyCityNamePro_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getWeatherbyCityNamePro_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getWeatherbyCityNamePro_ %p -> %p\n", q, p));
	*(struct __ns1__getWeatherbyCityNamePro_*)p = *(struct __ns1__getWeatherbyCityNamePro_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityName_(struct soap *soap, struct __ns1__getWeatherbyCityName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getWeatherbyCityName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityName_(struct soap *soap, const struct __ns1__getWeatherbyCityName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getWeatherbyCityName(soap, &a->ns1__getWeatherbyCityName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityName_(struct soap *soap, const char *tag, int id, const struct __ns1__getWeatherbyCityName_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getWeatherbyCityName(soap, "ns1:getWeatherbyCityName", -1, &a->ns1__getWeatherbyCityName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityName_ * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityName_(struct soap *soap, const char *tag, struct __ns1__getWeatherbyCityName_ *a, const char *type)
{
	size_t soap_flag_ns1__getWeatherbyCityName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getWeatherbyCityName_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getWeatherbyCityName_, sizeof(struct __ns1__getWeatherbyCityName_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getWeatherbyCityName_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getWeatherbyCityName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getWeatherbyCityName(soap, "ns1:getWeatherbyCityName", &a->ns1__getWeatherbyCityName, ""))
				{	soap_flag_ns1__getWeatherbyCityName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityName_(struct soap *soap, const struct __ns1__getWeatherbyCityName_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getWeatherbyCityName_(soap, tag?tag:"-ns1:getWeatherbyCityName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityName_ * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityName_(struct soap *soap, struct __ns1__getWeatherbyCityName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getWeatherbyCityName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getWeatherbyCityName_ * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getWeatherbyCityName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getWeatherbyCityName_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getWeatherbyCityName_);
		if (size)
			*size = sizeof(struct __ns1__getWeatherbyCityName_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getWeatherbyCityName_, n);
		if (size)
			*size = n * sizeof(struct __ns1__getWeatherbyCityName_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getWeatherbyCityName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getWeatherbyCityName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getWeatherbyCityName_ %p -> %p\n", q, p));
	*(struct __ns1__getWeatherbyCityName_*)p = *(struct __ns1__getWeatherbyCityName_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportDataSet_(struct soap *soap, struct __ns1__getSupportDataSet_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportDataSet = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportDataSet_(struct soap *soap, const struct __ns1__getSupportDataSet_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportDataSet(soap, &a->ns1__getSupportDataSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportDataSet_(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportDataSet_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportDataSet(soap, "ns1:getSupportDataSet", -1, &a->ns1__getSupportDataSet, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportDataSet_ * SOAP_FMAC4 soap_in___ns1__getSupportDataSet_(struct soap *soap, const char *tag, struct __ns1__getSupportDataSet_ *a, const char *type)
{
	size_t soap_flag_ns1__getSupportDataSet = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportDataSet_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportDataSet_, sizeof(struct __ns1__getSupportDataSet_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportDataSet_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportDataSet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getSupportDataSet(soap, "ns1:getSupportDataSet", &a->ns1__getSupportDataSet, ""))
				{	soap_flag_ns1__getSupportDataSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportDataSet_(struct soap *soap, const struct __ns1__getSupportDataSet_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getSupportDataSet_(soap, tag?tag:"-ns1:getSupportDataSet", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportDataSet_ * SOAP_FMAC4 soap_get___ns1__getSupportDataSet_(struct soap *soap, struct __ns1__getSupportDataSet_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportDataSet_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getSupportDataSet_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportDataSet_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportDataSet_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSupportDataSet_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getSupportDataSet_);
		if (size)
			*size = sizeof(struct __ns1__getSupportDataSet_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getSupportDataSet_, n);
		if (size)
			*size = n * sizeof(struct __ns1__getSupportDataSet_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getSupportDataSet_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSupportDataSet_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSupportDataSet_ %p -> %p\n", q, p));
	*(struct __ns1__getSupportDataSet_*)p = *(struct __ns1__getSupportDataSet_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportProvince_(struct soap *soap, struct __ns1__getSupportProvince_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportProvince = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportProvince_(struct soap *soap, const struct __ns1__getSupportProvince_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportProvince(soap, &a->ns1__getSupportProvince);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportProvince_(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportProvince_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportProvince(soap, "ns1:getSupportProvince", -1, &a->ns1__getSupportProvince, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportProvince_ * SOAP_FMAC4 soap_in___ns1__getSupportProvince_(struct soap *soap, const char *tag, struct __ns1__getSupportProvince_ *a, const char *type)
{
	size_t soap_flag_ns1__getSupportProvince = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportProvince_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportProvince_, sizeof(struct __ns1__getSupportProvince_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportProvince_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportProvince && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getSupportProvince(soap, "ns1:getSupportProvince", &a->ns1__getSupportProvince, ""))
				{	soap_flag_ns1__getSupportProvince--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportProvince_(struct soap *soap, const struct __ns1__getSupportProvince_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getSupportProvince_(soap, tag?tag:"-ns1:getSupportProvince", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportProvince_ * SOAP_FMAC4 soap_get___ns1__getSupportProvince_(struct soap *soap, struct __ns1__getSupportProvince_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportProvince_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getSupportProvince_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportProvince_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportProvince_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSupportProvince_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getSupportProvince_);
		if (size)
			*size = sizeof(struct __ns1__getSupportProvince_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getSupportProvince_, n);
		if (size)
			*size = n * sizeof(struct __ns1__getSupportProvince_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getSupportProvince_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSupportProvince_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSupportProvince_ %p -> %p\n", q, p));
	*(struct __ns1__getSupportProvince_*)p = *(struct __ns1__getSupportProvince_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCity_(struct soap *soap, struct __ns1__getSupportCity_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportCity = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCity_(struct soap *soap, const struct __ns1__getSupportCity_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportCity(soap, &a->ns1__getSupportCity);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCity_(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportCity_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportCity(soap, "ns1:getSupportCity", -1, &a->ns1__getSupportCity, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCity_ * SOAP_FMAC4 soap_in___ns1__getSupportCity_(struct soap *soap, const char *tag, struct __ns1__getSupportCity_ *a, const char *type)
{
	size_t soap_flag_ns1__getSupportCity = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportCity_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportCity_, sizeof(struct __ns1__getSupportCity_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportCity_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportCity && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getSupportCity(soap, "ns1:getSupportCity", &a->ns1__getSupportCity, ""))
				{	soap_flag_ns1__getSupportCity--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCity_(struct soap *soap, const struct __ns1__getSupportCity_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getSupportCity_(soap, tag?tag:"-ns1:getSupportCity", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCity_ * SOAP_FMAC4 soap_get___ns1__getSupportCity_(struct soap *soap, struct __ns1__getSupportCity_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportCity_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getSupportCity_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportCity_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportCity_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSupportCity_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getSupportCity_);
		if (size)
			*size = sizeof(struct __ns1__getSupportCity_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getSupportCity_, n);
		if (size)
			*size = n * sizeof(struct __ns1__getSupportCity_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getSupportCity_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSupportCity_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSupportCity_ %p -> %p\n", q, p));
	*(struct __ns1__getSupportCity_*)p = *(struct __ns1__getSupportCity_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityNamePro(struct soap *soap, struct __ns1__getWeatherbyCityNamePro *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getWeatherbyCityNamePro = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityNamePro(struct soap *soap, const struct __ns1__getWeatherbyCityNamePro *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getWeatherbyCityNamePro(soap, &a->ns1__getWeatherbyCityNamePro);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, int id, const struct __ns1__getWeatherbyCityNamePro *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getWeatherbyCityNamePro(soap, "ns1:getWeatherbyCityNamePro", -1, &a->ns1__getWeatherbyCityNamePro, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, struct __ns1__getWeatherbyCityNamePro *a, const char *type)
{
	size_t soap_flag_ns1__getWeatherbyCityNamePro = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getWeatherbyCityNamePro *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getWeatherbyCityNamePro, sizeof(struct __ns1__getWeatherbyCityNamePro), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getWeatherbyCityNamePro(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getWeatherbyCityNamePro && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getWeatherbyCityNamePro(soap, "ns1:getWeatherbyCityNamePro", &a->ns1__getWeatherbyCityNamePro, ""))
				{	soap_flag_ns1__getWeatherbyCityNamePro--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityNamePro(struct soap *soap, const struct __ns1__getWeatherbyCityNamePro *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getWeatherbyCityNamePro(soap, tag?tag:"-ns1:getWeatherbyCityNamePro", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityNamePro(struct soap *soap, struct __ns1__getWeatherbyCityNamePro *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getWeatherbyCityNamePro(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityNamePro(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getWeatherbyCityNamePro(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getWeatherbyCityNamePro, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getWeatherbyCityNamePro);
		if (size)
			*size = sizeof(struct __ns1__getWeatherbyCityNamePro);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getWeatherbyCityNamePro, n);
		if (size)
			*size = n * sizeof(struct __ns1__getWeatherbyCityNamePro);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getWeatherbyCityNamePro*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getWeatherbyCityNamePro(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getWeatherbyCityNamePro %p -> %p\n", q, p));
	*(struct __ns1__getWeatherbyCityNamePro*)p = *(struct __ns1__getWeatherbyCityNamePro*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityName(struct soap *soap, struct __ns1__getWeatherbyCityName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getWeatherbyCityName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityName(struct soap *soap, const struct __ns1__getWeatherbyCityName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getWeatherbyCityName(soap, &a->ns1__getWeatherbyCityName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityName(struct soap *soap, const char *tag, int id, const struct __ns1__getWeatherbyCityName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getWeatherbyCityName(soap, "ns1:getWeatherbyCityName", -1, &a->ns1__getWeatherbyCityName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityName * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityName(struct soap *soap, const char *tag, struct __ns1__getWeatherbyCityName *a, const char *type)
{
	size_t soap_flag_ns1__getWeatherbyCityName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getWeatherbyCityName *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getWeatherbyCityName, sizeof(struct __ns1__getWeatherbyCityName), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getWeatherbyCityName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getWeatherbyCityName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getWeatherbyCityName(soap, "ns1:getWeatherbyCityName", &a->ns1__getWeatherbyCityName, ""))
				{	soap_flag_ns1__getWeatherbyCityName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityName(struct soap *soap, const struct __ns1__getWeatherbyCityName *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getWeatherbyCityName(soap, tag?tag:"-ns1:getWeatherbyCityName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeatherbyCityName * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityName(struct soap *soap, struct __ns1__getWeatherbyCityName *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getWeatherbyCityName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getWeatherbyCityName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getWeatherbyCityName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getWeatherbyCityName);
		if (size)
			*size = sizeof(struct __ns1__getWeatherbyCityName);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getWeatherbyCityName, n);
		if (size)
			*size = n * sizeof(struct __ns1__getWeatherbyCityName);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getWeatherbyCityName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getWeatherbyCityName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getWeatherbyCityName %p -> %p\n", q, p));
	*(struct __ns1__getWeatherbyCityName*)p = *(struct __ns1__getWeatherbyCityName*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportDataSet(struct soap *soap, struct __ns1__getSupportDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportDataSet = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportDataSet(struct soap *soap, const struct __ns1__getSupportDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportDataSet(soap, &a->ns1__getSupportDataSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportDataSet(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportDataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportDataSet(soap, "ns1:getSupportDataSet", -1, &a->ns1__getSupportDataSet, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportDataSet * SOAP_FMAC4 soap_in___ns1__getSupportDataSet(struct soap *soap, const char *tag, struct __ns1__getSupportDataSet *a, const char *type)
{
	size_t soap_flag_ns1__getSupportDataSet = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportDataSet *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportDataSet, sizeof(struct __ns1__getSupportDataSet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportDataSet(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportDataSet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getSupportDataSet(soap, "ns1:getSupportDataSet", &a->ns1__getSupportDataSet, ""))
				{	soap_flag_ns1__getSupportDataSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportDataSet(struct soap *soap, const struct __ns1__getSupportDataSet *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getSupportDataSet(soap, tag?tag:"-ns1:getSupportDataSet", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportDataSet * SOAP_FMAC4 soap_get___ns1__getSupportDataSet(struct soap *soap, struct __ns1__getSupportDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getSupportDataSet * SOAP_FMAC2 soap_instantiate___ns1__getSupportDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportDataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSupportDataSet, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getSupportDataSet);
		if (size)
			*size = sizeof(struct __ns1__getSupportDataSet);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getSupportDataSet, n);
		if (size)
			*size = n * sizeof(struct __ns1__getSupportDataSet);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getSupportDataSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSupportDataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSupportDataSet %p -> %p\n", q, p));
	*(struct __ns1__getSupportDataSet*)p = *(struct __ns1__getSupportDataSet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportProvince(struct soap *soap, struct __ns1__getSupportProvince *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportProvince = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportProvince(struct soap *soap, const struct __ns1__getSupportProvince *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportProvince(soap, &a->ns1__getSupportProvince);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportProvince(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportProvince *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportProvince(soap, "ns1:getSupportProvince", -1, &a->ns1__getSupportProvince, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportProvince * SOAP_FMAC4 soap_in___ns1__getSupportProvince(struct soap *soap, const char *tag, struct __ns1__getSupportProvince *a, const char *type)
{
	size_t soap_flag_ns1__getSupportProvince = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportProvince *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportProvince, sizeof(struct __ns1__getSupportProvince), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportProvince(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportProvince && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getSupportProvince(soap, "ns1:getSupportProvince", &a->ns1__getSupportProvince, ""))
				{	soap_flag_ns1__getSupportProvince--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportProvince(struct soap *soap, const struct __ns1__getSupportProvince *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getSupportProvince(soap, tag?tag:"-ns1:getSupportProvince", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportProvince * SOAP_FMAC4 soap_get___ns1__getSupportProvince(struct soap *soap, struct __ns1__getSupportProvince *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getSupportProvince * SOAP_FMAC2 soap_instantiate___ns1__getSupportProvince(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportProvince(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSupportProvince, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getSupportProvince);
		if (size)
			*size = sizeof(struct __ns1__getSupportProvince);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getSupportProvince, n);
		if (size)
			*size = n * sizeof(struct __ns1__getSupportProvince);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getSupportProvince*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSupportProvince(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSupportProvince %p -> %p\n", q, p));
	*(struct __ns1__getSupportProvince*)p = *(struct __ns1__getSupportProvince*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCity(struct soap *soap, struct __ns1__getSupportCity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportCity = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCity(struct soap *soap, const struct __ns1__getSupportCity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportCity(soap, &a->ns1__getSupportCity);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCity(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportCity *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportCity(soap, "ns1:getSupportCity", -1, &a->ns1__getSupportCity, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCity * SOAP_FMAC4 soap_in___ns1__getSupportCity(struct soap *soap, const char *tag, struct __ns1__getSupportCity *a, const char *type)
{
	size_t soap_flag_ns1__getSupportCity = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportCity *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportCity, sizeof(struct __ns1__getSupportCity), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportCity(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportCity && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getSupportCity(soap, "ns1:getSupportCity", &a->ns1__getSupportCity, ""))
				{	soap_flag_ns1__getSupportCity--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCity(struct soap *soap, const struct __ns1__getSupportCity *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__getSupportCity(soap, tag?tag:"-ns1:getSupportCity", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCity * SOAP_FMAC4 soap_get___ns1__getSupportCity(struct soap *soap, struct __ns1__getSupportCity *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportCity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getSupportCity * SOAP_FMAC2 soap_instantiate___ns1__getSupportCity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportCity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSupportCity, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__getSupportCity);
		if (size)
			*size = sizeof(struct __ns1__getSupportCity);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__getSupportCity, n);
		if (size)
			*size = n * sizeof(struct __ns1__getSupportCity);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getSupportCity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSupportCity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSupportCity %p -> %p\n", q, p));
	*(struct __ns1__getSupportCity*)p = *(struct __ns1__getSupportCity*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getWeatherbyCityNamePro(struct soap *soap, _ns1__getWeatherbyCityNamePro *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getWeatherbyCityNamePro))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, int id, _ns1__getWeatherbyCityNamePro *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getWeatherbyCityNamePro);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNamePro ** SOAP_FMAC4 soap_in_PointerTo_ns1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, _ns1__getWeatherbyCityNamePro **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getWeatherbyCityNamePro **)soap_malloc(soap, sizeof(_ns1__getWeatherbyCityNamePro *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getWeatherbyCityNamePro *)soap_instantiate__ns1__getWeatherbyCityNamePro(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getWeatherbyCityNamePro ** p = (_ns1__getWeatherbyCityNamePro **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getWeatherbyCityNamePro, sizeof(_ns1__getWeatherbyCityNamePro), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getWeatherbyCityNamePro(struct soap *soap, _ns1__getWeatherbyCityNamePro *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro);
	if (soap_out_PointerTo_ns1__getWeatherbyCityNamePro(soap, tag?tag:"ns1:getWeatherbyCityNamePro", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getWeatherbyCityNamePro ** SOAP_FMAC4 soap_get_PointerTo_ns1__getWeatherbyCityNamePro(struct soap *soap, _ns1__getWeatherbyCityNamePro **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getWeatherbyCityNamePro(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getWeatherbyCityName(struct soap *soap, _ns1__getWeatherbyCityName *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getWeatherbyCityName))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getWeatherbyCityName(struct soap *soap, const char *tag, int id, _ns1__getWeatherbyCityName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getWeatherbyCityName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getWeatherbyCityName ** SOAP_FMAC4 soap_in_PointerTo_ns1__getWeatherbyCityName(struct soap *soap, const char *tag, _ns1__getWeatherbyCityName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getWeatherbyCityName **)soap_malloc(soap, sizeof(_ns1__getWeatherbyCityName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getWeatherbyCityName *)soap_instantiate__ns1__getWeatherbyCityName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getWeatherbyCityName ** p = (_ns1__getWeatherbyCityName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getWeatherbyCityName, sizeof(_ns1__getWeatherbyCityName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getWeatherbyCityName(struct soap *soap, _ns1__getWeatherbyCityName *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName);
	if (soap_out_PointerTo_ns1__getWeatherbyCityName(soap, tag?tag:"ns1:getWeatherbyCityName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getWeatherbyCityName ** SOAP_FMAC4 soap_get_PointerTo_ns1__getWeatherbyCityName(struct soap *soap, _ns1__getWeatherbyCityName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getWeatherbyCityName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportDataSet(struct soap *soap, _ns1__getSupportDataSet *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSupportDataSet))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportDataSet(struct soap *soap, const char *tag, int id, _ns1__getSupportDataSet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSupportDataSet);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getSupportDataSet ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportDataSet(struct soap *soap, const char *tag, _ns1__getSupportDataSet **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSupportDataSet **)soap_malloc(soap, sizeof(_ns1__getSupportDataSet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSupportDataSet *)soap_instantiate__ns1__getSupportDataSet(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getSupportDataSet ** p = (_ns1__getSupportDataSet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSupportDataSet, sizeof(_ns1__getSupportDataSet), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportDataSet(struct soap *soap, _ns1__getSupportDataSet *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__getSupportDataSet);
	if (soap_out_PointerTo_ns1__getSupportDataSet(soap, tag?tag:"ns1:getSupportDataSet", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSupportDataSet ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportDataSet(struct soap *soap, _ns1__getSupportDataSet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSupportDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportProvince(struct soap *soap, _ns1__getSupportProvince *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSupportProvince))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportProvince(struct soap *soap, const char *tag, int id, _ns1__getSupportProvince *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSupportProvince);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getSupportProvince ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportProvince(struct soap *soap, const char *tag, _ns1__getSupportProvince **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSupportProvince **)soap_malloc(soap, sizeof(_ns1__getSupportProvince *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSupportProvince *)soap_instantiate__ns1__getSupportProvince(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getSupportProvince ** p = (_ns1__getSupportProvince **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSupportProvince, sizeof(_ns1__getSupportProvince), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportProvince(struct soap *soap, _ns1__getSupportProvince *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__getSupportProvince);
	if (soap_out_PointerTo_ns1__getSupportProvince(soap, tag?tag:"ns1:getSupportProvince", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSupportProvince ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportProvince(struct soap *soap, _ns1__getSupportProvince **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSupportProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCity(struct soap *soap, _ns1__getSupportCity *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSupportCity))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCity(struct soap *soap, const char *tag, int id, _ns1__getSupportCity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSupportCity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getSupportCity ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCity(struct soap *soap, const char *tag, _ns1__getSupportCity **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSupportCity **)soap_malloc(soap, sizeof(_ns1__getSupportCity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSupportCity *)soap_instantiate__ns1__getSupportCity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getSupportCity ** p = (_ns1__getSupportCity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSupportCity, sizeof(_ns1__getSupportCity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCity(struct soap *soap, _ns1__getSupportCity *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__getSupportCity);
	if (soap_out_PointerTo_ns1__getSupportCity(soap, tag?tag:"ns1:getSupportCity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSupportCity ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCity(struct soap *soap, _ns1__getSupportCity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSupportCity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, int id, _ns1__getSupportDataSetResponse_getSupportDataSetResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, _ns1__getSupportDataSetResponse_getSupportDataSetResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSupportDataSetResponse_getSupportDataSetResult **)soap_malloc(soap, sizeof(_ns1__getSupportDataSetResponse_getSupportDataSetResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSupportDataSetResponse_getSupportDataSetResult *)soap_instantiate__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getSupportDataSetResponse_getSupportDataSetResult ** p = (_ns1__getSupportDataSetResponse_getSupportDataSetResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult, sizeof(_ns1__getSupportDataSetResponse_getSupportDataSetResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult);
	if (soap_out_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag?tag:"ns1:getSupportDataSetResponse-getSupportDataSetResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfString))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, int id, ns1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfString **)soap_malloc(soap, sizeof(ns1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfString *)soap_instantiate_ns1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfString ** p = (ns1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfString);
	if (soap_out_PointerTons1__ArrayOfString(soap, tag?tag:"ns1:ArrayOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
