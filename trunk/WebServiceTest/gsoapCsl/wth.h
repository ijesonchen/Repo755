/* wth.h
   Generated by wsdl2h 2.8.22 from http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl and typemap.dat
   2015-07-23 01:42:23 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on wth.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

<a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>
Web 2.5
340  60 </br>Web
Services<a href="http://www.webxml.com.cn/zh_cn/contact_us.aspx"
target="_blank"></a> QQ8409035<br />
WEB http://www.webxml.com.cn/ </strong><br
/><span style="color:#999999;"> WEB 
http://www.onhap.com/WebServices/WeatherWebService.asmx 
http://www.webxml.com.cn/WebServices/WeatherWebService.asmx </span><br
/><br />&nbsp;
*/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://WebXml.com.cn/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://WebXml.com.cn/"
//gsoap ns1   schema namespace:	http://WebXml.com.cn/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in element "xs:schema".
typedef _XML _xsd__schema;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__ArrayOfString.
class ns1__ArrayOfString;

//  Forward declaration of class _ns1__getSupportCity.
class _ns1__getSupportCity;

//  Forward declaration of class _ns1__getSupportCityResponse.
class _ns1__getSupportCityResponse;

//  Forward declaration of class _ns1__getSupportProvince.
class _ns1__getSupportProvince;

//  Forward declaration of class _ns1__getSupportProvinceResponse.
class _ns1__getSupportProvinceResponse;

//  Forward declaration of class _ns1__getSupportDataSet.
class _ns1__getSupportDataSet;

//  Forward declaration of class _ns1__getSupportDataSetResponse.
class _ns1__getSupportDataSetResponse;

//  Forward declaration of class _ns1__getWeatherbyCityName.
class _ns1__getWeatherbyCityName;

//  Forward declaration of class _ns1__getWeatherbyCityNameResponse.
class _ns1__getWeatherbyCityNameResponse;

//  Forward declaration of class _ns1__getWeatherbyCityNamePro.
class _ns1__getWeatherbyCityNamePro;

//  Forward declaration of class _ns1__getWeatherbyCityNameProResponse.
class _ns1__getWeatherbyCityNameProResponse;

//  Forward declaration of class _ns1__DataSet.
class _ns1__DataSet;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://WebXml.com.cn/":ArrayOfString is a complexType.
///
/// class ns1__ArrayOfString operations:
/// - soap_new_ns1__ArrayOfString(soap*) allocate
/// - soap_new_ns1__ArrayOfString(soap*, int num) allocate array
/// - soap_new_req_ns1__ArrayOfString(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__ArrayOfString(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__ArrayOfString(soap*, ns1__ArrayOfString*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfString(soap, ns1__ArrayOfString*) serialize to a stream
class ns1__ArrayOfString
{ public:
/// Size of array of char* is 0..unbounded.
   $int                                  __sizestring                   0;
/// Pointer to array char* of size 0..unbounded.
    char*                               *string                         0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCity
/// @brief "http://WebXml.com.cn/":getSupportCity is a complexType.
///
/// class _ns1__getSupportCity operations:
/// - soap_new__ns1__getSupportCity(soap*) allocate
/// - soap_new__ns1__getSupportCity(soap*, int num) allocate array
/// - soap_new_req__ns1__getSupportCity(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSupportCity(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSupportCity(soap*, _ns1__getSupportCity*) deserialize from a stream
/// - int soap_write__ns1__getSupportCity(soap, _ns1__getSupportCity*) serialize to a stream
class _ns1__getSupportCity
{ public:
/// Element "byProvinceName" of XSD type xs:string.
    char*                                byProvinceName                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCityResponse
/// @brief "http://WebXml.com.cn/":getSupportCityResponse is a complexType.
///
/// class _ns1__getSupportCityResponse operations:
/// - soap_new__ns1__getSupportCityResponse(soap*) allocate
/// - soap_new__ns1__getSupportCityResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getSupportCityResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSupportCityResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSupportCityResponse(soap*, _ns1__getSupportCityResponse*) deserialize from a stream
/// - int soap_write__ns1__getSupportCityResponse(soap, _ns1__getSupportCityResponse*) serialize to a stream
class _ns1__getSupportCityResponse
{ public:
/// Element "getSupportCityResult" of XSD type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getSupportCityResult           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportProvince
/// @brief "http://WebXml.com.cn/":getSupportProvince is a complexType.
///
/// class _ns1__getSupportProvince operations:
/// - soap_new__ns1__getSupportProvince(soap*) allocate
/// - soap_new__ns1__getSupportProvince(soap*, int num) allocate array
/// - soap_new_req__ns1__getSupportProvince(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSupportProvince(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSupportProvince(soap*, _ns1__getSupportProvince*) deserialize from a stream
/// - int soap_write__ns1__getSupportProvince(soap, _ns1__getSupportProvince*) serialize to a stream
class _ns1__getSupportProvince
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportProvinceResponse
/// @brief "http://WebXml.com.cn/":getSupportProvinceResponse is a complexType.
///
/// class _ns1__getSupportProvinceResponse operations:
/// - soap_new__ns1__getSupportProvinceResponse(soap*) allocate
/// - soap_new__ns1__getSupportProvinceResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getSupportProvinceResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSupportProvinceResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSupportProvinceResponse(soap*, _ns1__getSupportProvinceResponse*) deserialize from a stream
/// - int soap_write__ns1__getSupportProvinceResponse(soap, _ns1__getSupportProvinceResponse*) serialize to a stream
class _ns1__getSupportProvinceResponse
{ public:
/// Element "getSupportProvinceResult" of XSD type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getSupportProvinceResult       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportDataSet
/// @brief "http://WebXml.com.cn/":getSupportDataSet is a complexType.
///
/// class _ns1__getSupportDataSet operations:
/// - soap_new__ns1__getSupportDataSet(soap*) allocate
/// - soap_new__ns1__getSupportDataSet(soap*, int num) allocate array
/// - soap_new_req__ns1__getSupportDataSet(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSupportDataSet(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSupportDataSet(soap*, _ns1__getSupportDataSet*) deserialize from a stream
/// - int soap_write__ns1__getSupportDataSet(soap, _ns1__getSupportDataSet*) serialize to a stream
class _ns1__getSupportDataSet
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportDataSetResponse
/// @brief "http://WebXml.com.cn/":getSupportDataSetResponse is a complexType.
///
/// class _ns1__getSupportDataSetResponse operations:
/// - soap_new__ns1__getSupportDataSetResponse(soap*) allocate
/// - soap_new__ns1__getSupportDataSetResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getSupportDataSetResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSupportDataSetResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSupportDataSetResponse(soap*, _ns1__getSupportDataSetResponse*) deserialize from a stream
/// - int soap_write__ns1__getSupportDataSetResponse(soap, _ns1__getSupportDataSetResponse*) serialize to a stream
class _ns1__getSupportDataSetResponse
{ public:
/// class _ns1__getSupportDataSetResponse_getSupportDataSetResult operations:
/// - soap_new__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap*) allocate
/// - soap_new__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap*, int num) allocate array
/// - soap_new_req__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap*, _ns1__getSupportDataSetResponse_getSupportDataSetResult*) deserialize from a stream
/// - int soap_write__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult*) serialize to a stream
    class _ns1__getSupportDataSetResponse_getSupportDataSetResult
    {
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// @todo <any namespace="##any">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *getSupportDataSetResult        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityName
/// @brief "http://WebXml.com.cn/":getWeatherbyCityName is a complexType.
///
/// class _ns1__getWeatherbyCityName operations:
/// - soap_new__ns1__getWeatherbyCityName(soap*) allocate
/// - soap_new__ns1__getWeatherbyCityName(soap*, int num) allocate array
/// - soap_new_req__ns1__getWeatherbyCityName(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getWeatherbyCityName(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getWeatherbyCityName(soap*, _ns1__getWeatherbyCityName*) deserialize from a stream
/// - int soap_write__ns1__getWeatherbyCityName(soap, _ns1__getWeatherbyCityName*) serialize to a stream
class _ns1__getWeatherbyCityName
{ public:
/// Element "theCityName" of XSD type xs:string.
    char*                                theCityName                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityNameResponse
/// @brief "http://WebXml.com.cn/":getWeatherbyCityNameResponse is a complexType.
///
/// class _ns1__getWeatherbyCityNameResponse operations:
/// - soap_new__ns1__getWeatherbyCityNameResponse(soap*) allocate
/// - soap_new__ns1__getWeatherbyCityNameResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getWeatherbyCityNameResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getWeatherbyCityNameResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getWeatherbyCityNameResponse(soap*, _ns1__getWeatherbyCityNameResponse*) deserialize from a stream
/// - int soap_write__ns1__getWeatherbyCityNameResponse(soap, _ns1__getWeatherbyCityNameResponse*) serialize to a stream
class _ns1__getWeatherbyCityNameResponse
{ public:
/// Element "getWeatherbyCityNameResult" of XSD type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getWeatherbyCityNameResult     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityNamePro
/// @brief "http://WebXml.com.cn/":getWeatherbyCityNamePro is a complexType.
///
/// class _ns1__getWeatherbyCityNamePro operations:
/// - soap_new__ns1__getWeatherbyCityNamePro(soap*) allocate
/// - soap_new__ns1__getWeatherbyCityNamePro(soap*, int num) allocate array
/// - soap_new_req__ns1__getWeatherbyCityNamePro(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getWeatherbyCityNamePro(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getWeatherbyCityNamePro(soap*, _ns1__getWeatherbyCityNamePro*) deserialize from a stream
/// - int soap_write__ns1__getWeatherbyCityNamePro(soap, _ns1__getWeatherbyCityNamePro*) serialize to a stream
class _ns1__getWeatherbyCityNamePro
{ public:
/// Element "theCityName" of XSD type xs:string.
    char*                                theCityName                    0;	///< Optional element.
/// Element "theUserID" of XSD type xs:string.
    char*                                theUserID                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityNameProResponse
/// @brief "http://WebXml.com.cn/":getWeatherbyCityNameProResponse is a complexType.
///
/// class _ns1__getWeatherbyCityNameProResponse operations:
/// - soap_new__ns1__getWeatherbyCityNameProResponse(soap*) allocate
/// - soap_new__ns1__getWeatherbyCityNameProResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getWeatherbyCityNameProResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getWeatherbyCityNameProResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getWeatherbyCityNameProResponse(soap*, _ns1__getWeatherbyCityNameProResponse*) deserialize from a stream
/// - int soap_write__ns1__getWeatherbyCityNameProResponse(soap, _ns1__getWeatherbyCityNameProResponse*) serialize to a stream
class _ns1__getWeatherbyCityNameProResponse
{ public:
/// Element "getWeatherbyCityNameProResult" of XSD type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getWeatherbyCityNameProResult  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":DataSet
/// @brief "http://WebXml.com.cn/":DataSet is a complexType.
///
/// class _ns1__DataSet operations:
/// - soap_new__ns1__DataSet(soap*) allocate
/// - soap_new__ns1__DataSet(soap*, int num) allocate array
/// - soap_new_req__ns1__DataSet(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__DataSet(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__DataSet(soap*, _ns1__DataSet*) deserialize from a stream
/// - int soap_write__ns1__DataSet(soap, _ns1__DataSet*) serialize to a stream
class _ns1__DataSet
{ public:
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// @todo <any namespace="##any">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://WebXml.com.cn/":ArrayOfString of XSD type "http://WebXml.com.cn/":ArrayOfString.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	WeatherWebServiceSoap 
//gsoap ns1  service type:	WeatherWebServiceSoap 
//gsoap ns1  service port:	http://www.webxml.com.cn/WebServices/WeatherWebService.asmx 
//gsoap ns1  service namespace:	http://WebXml.com.cn/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
<a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>
Web 2.5
340  60 </br>Web
Services<a href="http://www.webxml.com.cn/zh_cn/contact_us.aspx"
target="_blank"></a> QQ8409035<br />
WEB http://www.webxml.com.cn/ </strong><br
/><span style="color:#999999;"> WEB 
http://www.onhap.com/WebServices/WeatherWebService.asmx 
http://www.webxml.com.cn/WebServices/WeatherWebService.asmx </span><br
/><br />&nbsp;

@section Service_bindings Service Bindings

  - @ref WeatherWebServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page WeatherWebServiceSoap Binding "WeatherWebServiceSoap"

@section WeatherWebServiceSoap_service Service Documentation "WeatherWebServiceSoap"
<a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>
Web 2.5
340  60 </br>Web
Services<a href="http://www.webxml.com.cn/zh_cn/contact_us.aspx"
target="_blank"></a> QQ8409035<br />
WEB http://www.webxml.com.cn/ </strong><br
/><span style="color:#999999;"> WEB 
http://www.onhap.com/WebServices/WeatherWebService.asmx 
http://www.webxml.com.cn/WebServices/WeatherWebService.asmx </span><br
/><br />&nbsp;

@section WeatherWebServiceSoap_operations Operations of Binding "WeatherWebServiceSoap"

  - @ref __ns1__getSupportCity

  - @ref __ns1__getSupportProvince

  - @ref __ns1__getSupportDataSet

  - @ref __ns1__getWeatherbyCityName

  - @ref __ns1__getWeatherbyCityNamePro

  - @ref __ns1__getSupportCity_

  - @ref __ns1__getSupportProvince_

  - @ref __ns1__getSupportDataSet_

  - @ref __ns1__getWeatherbyCityName_

  - @ref __ns1__getWeatherbyCityNamePro_

@section WeatherWebServiceSoap_ports Endpoints of Binding "WeatherWebServiceSoap"

  - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WeatherWebServiceSoap                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportCity                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportCity" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>byProvinceName
= ALL
String()()</p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getSupportCity"

  - Addressing input action: "http://WebXml.com.cn/getSupportCity"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportCity(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportCity*               ns1__getSupportCity,
    // output parameters:
    _ns1__getSupportCityResponse       &ns1__getSupportCityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportCity(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportCity*               ns1__getSupportCity,
    // output parameters:
    _ns1__getSupportCityResponse       &ns1__getSupportCityResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportCity SOAP
//gsoap ns1  service method-style:	getSupportCity document
//gsoap ns1  service method-encoding:	getSupportCity literal
//gsoap ns1  service method-input-action:	getSupportCity http://WebXml.com.cn/getSupportCity
//gsoap ns1  service method-output-action:	getSupportCity http://WebXml.com.cn/getSupportCityResponse
int __ns1__getSupportCity(
    _ns1__getSupportCity*               ns1__getSupportCity,	///< Input parameter
    _ns1__getSupportCityResponse       &ns1__getSupportCityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportProvince                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportProvince" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>
 String()</p><br
/>

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getSupportProvince"

  - Addressing input action: "http://WebXml.com.cn/getSupportProvince"

  - Addressing output action: "http://WebXml.com.cn/getSupportProvinceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportProvince(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportProvince*           ns1__getSupportProvince,
    // output parameters:
    _ns1__getSupportProvinceResponse   &ns1__getSupportProvinceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportProvince(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportProvince*           ns1__getSupportProvince,
    // output parameters:
    _ns1__getSupportProvinceResponse   &ns1__getSupportProvinceResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportProvince SOAP
//gsoap ns1  service method-style:	getSupportProvince document
//gsoap ns1  service method-encoding:	getSupportProvince literal
//gsoap ns1  service method-input-action:	getSupportProvince http://WebXml.com.cn/getSupportProvince
//gsoap ns1  service method-output-action:	getSupportProvince http://WebXml.com.cn/getSupportProvinceResponse
int __ns1__getSupportProvince(
    _ns1__getSupportProvince*           ns1__getSupportProvince,	///< Input parameter
    _ns1__getSupportProvinceResponse   &ns1__getSupportProvinceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportDataSet                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportDataSet" of service binding "WeatherWebServiceSoap".
<br><h3>Web Services</h3><p>DataSet
DataSet.Tables(0) DataSet.Tables(1) DataSet.Tables(0).Rows(i).Item("ID")
 DataSet.Tables(1).Rows(i).Item("ZoneID") <br />Tables(0)ID
= IDZone = Tables(1)ID ZoneID = Tables(0)IDArea
= AreaCode = </p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getSupportDataSet"

  - Addressing input action: "http://WebXml.com.cn/getSupportDataSet"

  - Addressing output action: "http://WebXml.com.cn/getSupportDataSetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportDataSet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportDataSet*            ns1__getSupportDataSet,
    // output parameters:
    _ns1__getSupportDataSetResponse    &ns1__getSupportDataSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportDataSet(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportDataSet*            ns1__getSupportDataSet,
    // output parameters:
    _ns1__getSupportDataSetResponse    &ns1__getSupportDataSetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportDataSet SOAP
//gsoap ns1  service method-style:	getSupportDataSet document
//gsoap ns1  service method-encoding:	getSupportDataSet literal
//gsoap ns1  service method-input-action:	getSupportDataSet http://WebXml.com.cn/getSupportDataSet
//gsoap ns1  service method-output-action:	getSupportDataSet http://WebXml.com.cn/getSupportDataSetResponse
int __ns1__getSupportDataSet(
    _ns1__getSupportDataSet*            ns1__getSupportDataSet,	///< Input parameter
    _ns1__getSupportDataSetResponse    &ns1__getSupportDataSetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWeatherbyCityName                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getWeatherbyCityName" of service binding "WeatherWebServiceSoap".
<br><h3></h3><p>theCityName
= ()()
 58367( getSupportCity
 getSupportDataSet )  String(22)23<br
/>String(0)  String(4)String(5)
 String(11) ()()String(12)
 String(16) String(17)
 String(21) String(22)
 <br /><a href="http://www.webxml.com.cn/images/weather.zip"><img
src="http://www.webxml.com.cn/images/download_w.gif" border="0" align="absbottom"
/></a>() <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx"
target="_blank"></a> <a href="http://www.webxml.com.cn/files/weather_eg.zip">Web
Services</a> (VB ASP.net 2.0)</p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWeatherbyCityName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getWeatherbyCityName*         ns1__getWeatherbyCityName,
    // output parameters:
    _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWeatherbyCityName(
    struct soap *soap,
    // input parameters:
    _ns1__getWeatherbyCityName*         ns1__getWeatherbyCityName,
    // output parameters:
    _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getWeatherbyCityName SOAP
//gsoap ns1  service method-style:	getWeatherbyCityName document
//gsoap ns1  service method-encoding:	getWeatherbyCityName literal
//gsoap ns1  service method-input-action:	getWeatherbyCityName http://WebXml.com.cn/getWeatherbyCityName
//gsoap ns1  service method-output-action:	getWeatherbyCityName http://WebXml.com.cn/getWeatherbyCityNameResponse
int __ns1__getWeatherbyCityName(
    _ns1__getWeatherbyCityName*         ns1__getWeatherbyCityName,	///< Input parameter
    _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWeatherbyCityNamePro                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getWeatherbyCityNamePro" of service binding "WeatherWebServiceSoap".
<br><h3>For</h3><p>
getWeatherbyCityNametheUserID = ID</p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameProResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWeatherbyCityNamePro(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getWeatherbyCityNamePro*      ns1__getWeatherbyCityNamePro,
    // output parameters:
    _ns1__getWeatherbyCityNameProResponse&ns1__getWeatherbyCityNameProResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWeatherbyCityNamePro(
    struct soap *soap,
    // input parameters:
    _ns1__getWeatherbyCityNamePro*      ns1__getWeatherbyCityNamePro,
    // output parameters:
    _ns1__getWeatherbyCityNameProResponse&ns1__getWeatherbyCityNameProResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getWeatherbyCityNamePro SOAP
//gsoap ns1  service method-style:	getWeatherbyCityNamePro document
//gsoap ns1  service method-encoding:	getWeatherbyCityNamePro literal
//gsoap ns1  service method-input-action:	getWeatherbyCityNamePro http://WebXml.com.cn/getWeatherbyCityNamePro
//gsoap ns1  service method-output-action:	getWeatherbyCityNamePro http://WebXml.com.cn/getWeatherbyCityNameProResponse
int __ns1__getWeatherbyCityNamePro(
    _ns1__getWeatherbyCityNamePro*      ns1__getWeatherbyCityNamePro,	///< Input parameter
    _ns1__getWeatherbyCityNameProResponse&ns1__getWeatherbyCityNameProResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportCity_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportCity_" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>byProvinceName
= ALL
String()()</p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getSupportCity"

  - Addressing input action: "http://WebXml.com.cn/getSupportCity"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportCity_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportCity*               ns1__getSupportCity,
    // output parameters:
    _ns1__getSupportCityResponse       &ns1__getSupportCityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportCity_(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportCity*               ns1__getSupportCity,
    // output parameters:
    _ns1__getSupportCityResponse       &ns1__getSupportCityResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportCity_ SOAP
//gsoap ns1  service method-style:	getSupportCity_ document
//gsoap ns1  service method-encoding:	getSupportCity_ literal
//gsoap ns1  service method-input-action:	getSupportCity_ http://WebXml.com.cn/getSupportCity
//gsoap ns1  service method-output-action:	getSupportCity_ http://WebXml.com.cn/getSupportCityResponse
int __ns1__getSupportCity_(
    _ns1__getSupportCity*               ns1__getSupportCity,	///< Input parameter
    _ns1__getSupportCityResponse       &ns1__getSupportCityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportProvince_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportProvince_" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>
 String()</p><br
/>

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getSupportProvince"

  - Addressing input action: "http://WebXml.com.cn/getSupportProvince"

  - Addressing output action: "http://WebXml.com.cn/getSupportProvinceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportProvince_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportProvince*           ns1__getSupportProvince,
    // output parameters:
    _ns1__getSupportProvinceResponse   &ns1__getSupportProvinceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportProvince_(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportProvince*           ns1__getSupportProvince,
    // output parameters:
    _ns1__getSupportProvinceResponse   &ns1__getSupportProvinceResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportProvince_ SOAP
//gsoap ns1  service method-style:	getSupportProvince_ document
//gsoap ns1  service method-encoding:	getSupportProvince_ literal
//gsoap ns1  service method-input-action:	getSupportProvince_ http://WebXml.com.cn/getSupportProvince
//gsoap ns1  service method-output-action:	getSupportProvince_ http://WebXml.com.cn/getSupportProvinceResponse
int __ns1__getSupportProvince_(
    _ns1__getSupportProvince*           ns1__getSupportProvince,	///< Input parameter
    _ns1__getSupportProvinceResponse   &ns1__getSupportProvinceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportDataSet_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportDataSet_" of service binding "WeatherWebServiceSoap".
<br><h3>Web Services</h3><p>DataSet
DataSet.Tables(0) DataSet.Tables(1) DataSet.Tables(0).Rows(i).Item("ID")
 DataSet.Tables(1).Rows(i).Item("ZoneID") <br />Tables(0)ID
= IDZone = Tables(1)ID ZoneID = Tables(0)IDArea
= AreaCode = </p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getSupportDataSet"

  - Addressing input action: "http://WebXml.com.cn/getSupportDataSet"

  - Addressing output action: "http://WebXml.com.cn/getSupportDataSetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportDataSet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportDataSet*            ns1__getSupportDataSet,
    // output parameters:
    _ns1__getSupportDataSetResponse    &ns1__getSupportDataSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportDataSet_(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportDataSet*            ns1__getSupportDataSet,
    // output parameters:
    _ns1__getSupportDataSetResponse    &ns1__getSupportDataSetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportDataSet_ SOAP
//gsoap ns1  service method-style:	getSupportDataSet_ document
//gsoap ns1  service method-encoding:	getSupportDataSet_ literal
//gsoap ns1  service method-input-action:	getSupportDataSet_ http://WebXml.com.cn/getSupportDataSet
//gsoap ns1  service method-output-action:	getSupportDataSet_ http://WebXml.com.cn/getSupportDataSetResponse
int __ns1__getSupportDataSet_(
    _ns1__getSupportDataSet*            ns1__getSupportDataSet,	///< Input parameter
    _ns1__getSupportDataSetResponse    &ns1__getSupportDataSetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWeatherbyCityName_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getWeatherbyCityName_" of service binding "WeatherWebServiceSoap".
<br><h3></h3><p>theCityName
= ()()
 58367( getSupportCity
 getSupportDataSet )  String(22)23<br
/>String(0)  String(4)String(5)
 String(11) ()()String(12)
 String(16) String(17)
 String(21) String(22)
 <br /><a href="http://www.webxml.com.cn/images/weather.zip"><img
src="http://www.webxml.com.cn/images/download_w.gif" border="0" align="absbottom"
/></a>() <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx"
target="_blank"></a> <a href="http://www.webxml.com.cn/files/weather_eg.zip">Web
Services</a> (VB ASP.net 2.0)</p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWeatherbyCityName_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getWeatherbyCityName*         ns1__getWeatherbyCityName,
    // output parameters:
    _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWeatherbyCityName_(
    struct soap *soap,
    // input parameters:
    _ns1__getWeatherbyCityName*         ns1__getWeatherbyCityName,
    // output parameters:
    _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getWeatherbyCityName_ SOAP
//gsoap ns1  service method-style:	getWeatherbyCityName_ document
//gsoap ns1  service method-encoding:	getWeatherbyCityName_ literal
//gsoap ns1  service method-input-action:	getWeatherbyCityName_ http://WebXml.com.cn/getWeatherbyCityName
//gsoap ns1  service method-output-action:	getWeatherbyCityName_ http://WebXml.com.cn/getWeatherbyCityNameResponse
int __ns1__getWeatherbyCityName_(
    _ns1__getWeatherbyCityName*         ns1__getWeatherbyCityName,	///< Input parameter
    _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWeatherbyCityNamePro_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getWeatherbyCityNamePro_" of service binding "WeatherWebServiceSoap".
<br><h3>For</h3><p>
getWeatherbyCityNametheUserID = ID</p><br />

  - SOAP document/literal style messaging

  - Action: "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameProResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWeatherbyCityNamePro_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getWeatherbyCityNamePro*      ns1__getWeatherbyCityNamePro,
    // output parameters:
    _ns1__getWeatherbyCityNameProResponse&ns1__getWeatherbyCityNameProResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWeatherbyCityNamePro_(
    struct soap *soap,
    // input parameters:
    _ns1__getWeatherbyCityNamePro*      ns1__getWeatherbyCityNamePro,
    // output parameters:
    _ns1__getWeatherbyCityNameProResponse&ns1__getWeatherbyCityNameProResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getWeatherbyCityNamePro_ SOAP
//gsoap ns1  service method-style:	getWeatherbyCityNamePro_ document
//gsoap ns1  service method-encoding:	getWeatherbyCityNamePro_ literal
//gsoap ns1  service method-input-action:	getWeatherbyCityNamePro_ http://WebXml.com.cn/getWeatherbyCityNamePro
//gsoap ns1  service method-output-action:	getWeatherbyCityNamePro_ http://WebXml.com.cn/getWeatherbyCityNameProResponse
int __ns1__getWeatherbyCityNamePro_(
    _ns1__getWeatherbyCityNamePro*      ns1__getWeatherbyCityNamePro,	///< Input parameter
    _ns1__getWeatherbyCityNameProResponse&ns1__getWeatherbyCityNameProResponse	///< Output parameter
);

/**

@page WeatherWebServiceSoap Binding "WeatherWebServiceSoap"

@section WeatherWebServiceSoap_policy_enablers Policy Enablers of Binding "WeatherWebServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://WebXml.com.cn/"

  - <getSupportCity> @ref _ns1__getSupportCity
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportCity(struct soap*, _ns1__getSupportCity*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportCity(struct soap*, _ns1__getSupportCity*);
    @endcode

  - <getSupportCityResponse> @ref _ns1__getSupportCityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportCityResponse(struct soap*, _ns1__getSupportCityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportCityResponse(struct soap*, _ns1__getSupportCityResponse*);
    @endcode

  - <getSupportProvince> @ref _ns1__getSupportProvince
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportProvince(struct soap*, _ns1__getSupportProvince*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportProvince(struct soap*, _ns1__getSupportProvince*);
    @endcode

  - <getSupportProvinceResponse> @ref _ns1__getSupportProvinceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportProvinceResponse(struct soap*, _ns1__getSupportProvinceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportProvinceResponse(struct soap*, _ns1__getSupportProvinceResponse*);
    @endcode

  - <getSupportDataSet> @ref _ns1__getSupportDataSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportDataSet(struct soap*, _ns1__getSupportDataSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportDataSet(struct soap*, _ns1__getSupportDataSet*);
    @endcode

  - <getSupportDataSetResponse> @ref _ns1__getSupportDataSetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportDataSetResponse(struct soap*, _ns1__getSupportDataSetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportDataSetResponse(struct soap*, _ns1__getSupportDataSetResponse*);
    @endcode

  - <getWeatherbyCityName> @ref _ns1__getWeatherbyCityName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getWeatherbyCityName(struct soap*, _ns1__getWeatherbyCityName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getWeatherbyCityName(struct soap*, _ns1__getWeatherbyCityName*);
    @endcode

  - <getWeatherbyCityNameResponse> @ref _ns1__getWeatherbyCityNameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getWeatherbyCityNameResponse(struct soap*, _ns1__getWeatherbyCityNameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getWeatherbyCityNameResponse(struct soap*, _ns1__getWeatherbyCityNameResponse*);
    @endcode

  - <getWeatherbyCityNamePro> @ref _ns1__getWeatherbyCityNamePro
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getWeatherbyCityNamePro(struct soap*, _ns1__getWeatherbyCityNamePro*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getWeatherbyCityNamePro(struct soap*, _ns1__getWeatherbyCityNamePro*);
    @endcode

  - <getWeatherbyCityNameProResponse> @ref _ns1__getWeatherbyCityNameProResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getWeatherbyCityNameProResponse(struct soap*, _ns1__getWeatherbyCityNameProResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getWeatherbyCityNameProResponse(struct soap*, _ns1__getWeatherbyCityNameProResponse*);
    @endcode

  - <ArrayOfString> (use wsdl2h option -g to auto-generate)

  - <DataSet> @ref _ns1__DataSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DataSet(struct soap*, _ns1__DataSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DataSet(struct soap*, _ns1__DataSet*);
    @endcode

*/

/* End of wth.h */
