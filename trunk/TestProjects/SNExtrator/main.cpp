/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"
#include <wx/dir.h>
#include <wx/regex.h>

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainFrame( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

struct DVListTitle
{
	wxString strName;
	wxDataViewCellMode cellMode;
	int nWidth;
	bool isToggle;
};

static const DVListTitle dvListTitles[] =
{
	{" ",		wxDATAVIEW_CELL_ACTIVATABLE,	wxCOL_WIDTH_AUTOSIZE, true},
	{"Title",	wxDATAVIEW_CELL_ACTIVATABLE,	wxCOL_WIDTH_AUTOSIZE, false},
	{"Ext",		wxDATAVIEW_CELL_ACTIVATABLE,	wxCOL_WIDTH_AUTOSIZE, false},
	{"SN",		wxDATAVIEW_CELL_EDITABLE,		wxCOL_WIDTH_AUTOSIZE, false},
	{"Path",	wxDATAVIEW_CELL_ACTIVATABLE,	wxCOL_WIDTH_AUTOSIZE, false},
	{"FullPath",wxDATAVIEW_CELL_ACTIVATABLE,	wxCOL_WIDTH_AUTOSIZE, false},
};
////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////

MainFrame::MainFrame(wxWindow *parent) : MainFrameBase( parent )
{
	int nColunm = sizeof(dvListTitles) / sizeof(DVListTitle);
	for (int ii = 0; ii < nColunm; ++ii)
	{
		const DVListTitle& dvTitle = dvListTitles[ii];
		if (dvTitle.isToggle)
		{
			m_dvlistFiles->AppendToggleColumn(dvTitle.strName, dvTitle.cellMode, dvTitle.nWidth);
		}
		else
		{
			m_dvlistFiles->AppendTextColumn(dvTitle.strName, dvTitle.cellMode, dvTitle.nWidth);
		}
	}
}

MainFrame::~MainFrame()
{
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
	Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
	Destroy();
}


void MainFrame::m_dirExplorerOnTreeItemRightClick( wxTreeEvent& event ) 
{
	wxString strName;

	wxTreeCtrl* pTreeCtrl = m_dirExplorer->GetTreeCtrl();
	pTreeCtrl->SelectItem(event.GetItem());

	strName = m_dirExplorer->GetPath();

	wxString strExt;
	wxFileName::SplitPath(strName, NULL, NULL, NULL, &strExt);
	if (!wxDirExists(strName))
	{
		event.Skip();
		return;
	}

	LoadFiles(strName);

	m_strPathName = strName;
}

void MainFrame::LoadFiles(const wxString& strPathName)
{
	wxArrayString fileArray;
	size_t nFile = wxDir::GetAllFiles(strPathName, &fileArray);

	for (size_t ii = 0, iLoop = fileArray.size();
		ii < iLoop; ++ii)
	{
		InsertToCtrl(fileArray[ii]);
	}
}

bool MainFrame::InsertToCtrl(const wxString& strFileName)
{
	bool bToggle = false;
	wxFileName fileName = strFileName;
	wxString strTitle = fileName.GetName();
	wxString strExt = fileName.GetExt();
	wxString strSN;
	wxString strPath = fileName.GetPath();
	wxString strFullPath = fileName.GetFullPath();

	wxRegEx reSN = "[a-z, A-Z]{2,6}[-]?[0-9]{2,6}";
	if (reSN.IsValid())
	{
		if (reSN.Matches(strTitle))
		{
			wxString str1;
			wxString str2;
			str1 = reSN.GetMatch(strTitle);
			strSN = str1;
		}
	}

	wxVector<wxVariant> vtItem;
	vtItem.push_back(false);
	vtItem.push_back(strTitle);
	vtItem.push_back(strExt);
	vtItem.push_back(strSN);
	vtItem.push_back(strPath);
	vtItem.push_back(strFullPath);
	m_dvlistFiles->AppendItem(vtItem);

	return false;
}