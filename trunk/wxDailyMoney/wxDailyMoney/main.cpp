/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"
#include "DBDailyMoney.h"
#include "..\Sqlite3008006\sqlite3.h"
#include "..\wxCommon\wxCommon.h"

using namespace DailyMoney;
using namespace wxCommon;


static const wxCommon::ListHeader gdvlistHeaderDetail[] = 
{
	{0, "序号", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "支出账户", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "支出类别", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "收入账户", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "收入类别", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "时间", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "金额", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "账号", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "备注", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
};
 
static const wxCommon::ListHeader gdvlistHeaderAccount[] = 
{
	{0, "标识", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "名称", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "类别", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "类型", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
	{0, "初始值", wxDATAVIEW_CELL_ACTIVATABLE, wxCOL_WIDTH_AUTOSIZE, 1},
};

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainFrame( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////

MainFrame::MainFrame(wxWindow *parent) : MainFrameBase( parent )
{
}

MainFrame::~MainFrame()
{
}

void MainFrame::MainFrameBaseOnActivate( wxActivateEvent& event ) 
{
	m_datePickerBeginDet->
		SetValue(m_datePickerBeginDet->GetValue().Subtract(wxDateSpan(0, 0, 1, 0)));

	wxCommon::SetDvlistHeader(m_dvlistDetail, gdvlistHeaderDetail,
		sizeof(gdvlistHeaderDetail) / sizeof(wxCommon::ListHeader));
	wxCommon::SetDvlistHeader(m_dvlistAccount, gdvlistHeaderAccount,
		sizeof(gdvlistHeaderAccount) / sizeof(wxCommon::ListHeader));
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
	Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
	Destroy();
}

#include <WinNls.h>
#include <string>
using namespace std;


void MainFrame::m_filePickerOnFileChanged( wxFileDirPickerEvent& event )
{
	wxString strFileName;
	strFileName = m_filePicker->GetPath();
	if (!m_dbDailyMoney.Open(strFileName.wc_str()))
	{
		wxMessageBox(wxString::Format(L"File open error: %s", m_dbDailyMoney.GetMsg()));
	}
	m_statusBar->SetStatusText(wxString::Format("%s opened.", strFileName));
}

void MainFrame::m_buttonAddDetOnButtonClick( wxCommandEvent& event )
{
	if (DbNotOpen())
	{
		return;
	}

	DlgDetail dlgDetail(this, &m_dbDailyMoney, DlgDetail::DlgDetailModeAdd);
	dlgDetail.ShowModal();
}

void MainFrame::m_buttonUpdateDetOnButtonClick( wxCommandEvent& event )
{
	if (DbNotOpen())
	{
		return;
	}

	DlgDetail dlgDetail(this, &m_dbDailyMoney, DlgDetail::DlgDetailModeUpdate);
	dlgDetail.ShowModal();
}

void MainFrame::m_buttonListDetOnButtonClick( wxCommandEvent& event )
{
	INT64 tfrom = m_datePickerBeginDet->GetValue().GetTicks();	
	INT64 tto = m_datePickerEndDet->GetValue().GetTicks();

	deque<Detail> dqDetails;
	if (!m_dbDailyMoney.LoadDetail(dqDetails, tfrom, tto))
	{
		m_statusBar->SetStatusText(L"LoadDetail failed: " + m_dbDailyMoney.GetMsg());
		return;
	}
	if (!dqDetails.size())
	{
		m_statusBar->SetStatusText("NO detail record.");
		return;
	}

	SetDetailListData(dqDetails);
	m_statusBar->SetStatusText("LoadDetail finished.");
}

void MainFrame::m_buttonListAccOnButtonClick( wxCommandEvent& event )
{
	m_dbDailyMoney.LoadAccounts();
	SetAccountListData(m_dbDailyMoney.m_dqAccounts);
}

//////////////////////////////////////////////////////////////////////////
// MainFrame user functions

bool MainFrame::DbNotOpen()
{
	if (!m_dbDailyMoney.IsOpen())
	{
		wxMessageBox("DB not open.");
		return true;
	}
	return false;
}

void MainFrame::SetDetailListData(const std::deque<DailyMoney::Detail>& dqDetails)
{
	m_dvlistDetail->DeleteAllItems();

	for (size_t ii = 0, iLoop = dqDetails.size();
		ii < iLoop; ++ii)
	{
		const Detail& det = dqDetails[ii];
		wxVector<wxVariant> vtItem;
		vtItem.push_back(det.id);
		vtItem.push_back(det.from);
		vtItem.push_back(Account::GetTypeString(det.fromType));
		vtItem.push_back(det.to);
		vtItem.push_back(Account::GetTypeString(det.toType));
		wxDateTime dt(det.date / 1000);
		vtItem.push_back(dt.Format("%Y-%m-%d"));
		vtItem.push_back(det.money);
		vtItem.push_back(det.bookid);
		vtItem.push_back(det.note);
		m_dvlistDetail->InsertItem(ii, vtItem);
	}
}
void MainFrame::SetAccountListData(const std::deque<DailyMoney::Account>& dqAccounts)
{
	m_dvlistAccount->DeleteAllItems();

	for (size_t ii = 0, iLoop = dqAccounts.size();
		ii < iLoop; ++ii)
	{
		const Account& acc = dqAccounts[ii];
		wxVector<wxVariant> vtItem;
		vtItem.push_back(acc.id);
		vtItem.push_back(acc.name);
		vtItem.push_back(Account::GetTypeString(acc.type));
		vtItem.push_back(acc.iscash ? "现金" : "");
		vtItem.push_back(acc.init);
		m_dvlistAccount->InsertItem(ii, vtItem);
	}

}

//////////////////////////////////////////////////////////////////////////
// DlgDetailBase
//////////////////////////////////////////////////////////////////////////

DlgDetail::DlgDetail(wxWindow* parent, DailyMoney::DBDailyMoney* pdb, DlgDetailMode mode, const wxString& title /*= wxEmptyString*/)
: DlgDetailBase(parent, wxID_ANY, title)
, m_pdbDailyMoney(pdb)
, m_nDlgMode(mode)
{
}


void DlgDetail::DlgDetailBaseOnInitDialog( wxInitDialogEvent& event )
{
	bool bInitError = false;
	if (!m_pdbDailyMoney)
	{
		wxMessageBox("无效数据库指针");
		bInitError = true;
	}
	if ((m_nDlgMode == DlgDetailModeUpdate) && (m_detail.id == -1))
	{
		wxMessageBox("错误的明细数据");
		bInitError = true;
	}
	if (bInitError)
	{
		m_buttonOK->Enable(false);
	}
}